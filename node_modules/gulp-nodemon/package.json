{
  "_args": [
    [
      {
        "raw": "gulp-nodemon@2.2.1",
        "scope": null,
        "escapedName": "gulp-nodemon",
        "name": "gulp-nodemon",
        "rawSpec": "2.2.1",
        "spec": "2.2.1",
        "type": "version"
      },
      "/home/arch/galileo"
    ]
  ],
  "_from": "gulp-nodemon@2.2.1",
  "_id": "gulp-nodemon@2.2.1",
  "_inCache": true,
  "_location": "/gulp-nodemon",
  "_nodeVersion": "6.3.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/gulp-nodemon-2.2.1.tgz_1475128514312_0.4443575507029891"
  },
  "_npmUser": {
    "name": "jacksongariety",
    "email": "jackson@gariety.xxx"
  },
  "_npmVersion": "3.10.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gulp-nodemon@2.2.1",
    "scope": null,
    "escapedName": "gulp-nodemon",
    "name": "gulp-nodemon",
    "rawSpec": "2.2.1",
    "spec": "2.2.1",
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-nodemon/-/gulp-nodemon-2.2.1.tgz",
  "_shasum": "d9bf199f5585458159d3d299153e60b46868b6f4",
  "_shrinkwrap": null,
  "_spec": "gulp-nodemon@2.2.1",
  "_where": "/home/arch/galileo",
  "author": {
    "name": "Jackson Gariety"
  },
  "bugs": {
    "url": "https://github.com/JacksonGariety/gulp-nodemon/issues"
  },
  "dependencies": {
    "colors": "^1.0.3",
    "event-stream": "^3.2.1",
    "gulp": "^3.9.1",
    "nodemon": "^1.10.2"
  },
  "description": "it's gulp + nodemon + convenience",
  "devDependencies": {
    "coffee-script": "^1.7.1",
    "gulp-jshint": "^1.6.1",
    "gulp-mocha": "^0.2.0",
    "is-running": "^1.0.3",
    "should": "^4.0.0"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "d9bf199f5585458159d3d299153e60b46868b6f4",
    "tarball": "https://registry.npmjs.org/gulp-nodemon/-/gulp-nodemon-2.2.1.tgz"
  },
  "gitHead": "485614c1bf7cf1c8192c570423bd2e5b24e5f81c",
  "homepage": "https://github.com/JacksonGariety/gulp-nodemon",
  "keywords": [
    "gulp",
    "nodemon",
    "develop",
    "server",
    "restart",
    "automatically",
    "watch",
    "gulpfriendly",
    "gulpplugin"
  ],
  "license": "BSD-2-Clause",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jacksongariety",
      "email": "personal@jacksongariety.com"
    }
  ],
  "name": "gulp-nodemon",
  "optionalDependencies": {},
  "readme": "gulp-nodemon\n===========\n\nit's gulp + nodemon + convenience\n\n## Install\n\n```bash\n$ npm install --save-dev gulp-nodemon\n```\n\n## Usage\n\nGulp-nodemon looks almost exactly like regular nodemon, but it's made for use with gulp tasks.\n\n### **nodemon([options])**\n\nYou can pass an object to gulp-nodemon with options [like you would in nodemon config](https://github.com/remy/nodemon#config-files).\n\nExample below will start `server.js` in `development` mode and watch for changes, as well as watch all `.html` and `.js` files in the directory.\n```js\ngulp.task('start', function () {\n  nodemon({\n    script: 'server.js'\n  , ext: 'js html'\n  , env: { 'NODE_ENV': 'development' }\n  })\n})\n```\n\n## Synchronous Build Tasks\n\n*NOTE: This feature requires Node v0.12 because of `child_process.spawnSync`.*\n\nNodemon is powerful but lacks the ability to compile/cleanup code prior to restarting the application... until now! Most build systems can never be complete without compilation, and now it works harmoniously with your nodemon loop.\n\n### **{ tasks: [Array || Function(changedFiles)] }**\n\nIf you want to lint your code when you make changes that's easy to do with a simple event. But what if you need to wait while your project re-builds before you start it up again? This isn't possible with vanilla nodemon, and can be tedious to implement yourself, but it's easy with gulp-nodemon:\n```js\nnodemon({\n  script: 'index.js'\n, tasks: ['browserify']\n})\n```\n\nWhat if you want to decouple your build processes by language? Or even by file? Easy, just set the `tasks` option to a function. Gulp-nodemon will pass you the list of changed files and it'll let you return a list of tasks you want run.\n```js\nnodemon({\n  script: './index.js'\n, ext: 'js css'\n, tasks: function (changedFiles) {\n    var tasks = []\n    changedFiles.forEach(function (file) {\n      if (path.extname(file) === '.js' && !~tasks.indexOf('lint')) tasks.push('lint')\n      if (path.extname(file) === '.css' && !~tasks.indexOf('cssmin')) tasks.push('cssmin')\n    })\n    return tasks\n  }\n})\n```\n\n## Events\n\ngulp-nodemon returns a stream just like any other NodeJS stream, **except for the `on` method**, which conveniently accepts gulp task names in addition to the typical function.\n\n### **.on([event], [Array || Function])**\n\n1. `[event]` is an event name as a string. See [nodemon events](https://github.com/remy/nodemon/blob/master/doc/events.md).\n2. `[tasks]` An array of gulp task names or a function to execute.\n\n### **.emit([event])**\n1. `event`   is an event name as a string. See [nodemon events](https://github.com/remy/nodemon/blob/master/doc/events.md#using-nodemon-events).\n\n## Examples\n\n### Basic Usage\n\nThe following example will run your code with nodemon, lint it when you make changes, and log a message when nodemon runs it again.\n\n```js\n// Gulpfile.js\nvar gulp = require('gulp')\n  , nodemon = require('gulp-nodemon')\n  , jshint = require('gulp-jshint')\n\ngulp.task('lint', function () {\n  gulp.src('./**/*.js')\n    .pipe(jshint())\n})\n\ngulp.task('develop', function () {\n  var stream = nodemon({ script: 'server.js'\n          , ext: 'html js'\n          , ignore: ['ignored.js']\n          , tasks: ['lint'] })\n\n  stream\n      .on('restart', function () {\n        console.log('restarted!')\n      })\n      .on('crash', function() {\n        console.error('Application has crashed!\\n')\n         stream.emit('restart', 10)  // restart the server in 10 seconds\n      })\n})\n```\n\n_**You can also plug an external version or fork of nodemon**_\n```js\ngulp.task('pluggable', function() {\n  nodemon({ nodemon: require('nodemon'),\n            script: 'server.js'})\n})\n```\n\n### Bunyan Logger integration\n\nThe [bunyan](https://github.com/trentm/node-bunyan/) logger includes a `bunyan` script that beautifies JSON logging when piped to it. Here's how you can you can pipe your output to `bunyan` when using `gulp-nodemon`:\n\n```js\ngulp.task('run', ['default', 'watch'], function() {\n    var nodemon = require('gulp-nodemon'),\n        spawn   = require('child_process').spawn,\n        bunyan\n\n    nodemon({\n        script: paths.server,\n        ext:    'js json',\n        ignore: [\n            'var/',\n            'node_modules/'\n        ],\n        watch:    [paths.etc, paths.src],\n        stdout:   false,\n        readable: false\n    })\n    .on('readable', function() {\n\n        // free memory\n        bunyan && bunyan.kill()\n\n        bunyan = spawn('./node_modules/bunyan/bin/bunyan', [\n            '--output', 'short',\n            '--color'\n        ])\n\n        bunyan.stdout.pipe(process.stdout)\n        bunyan.stderr.pipe(process.stderr)\n\n        this.stdout.pipe(bunyan.stdin)\n        this.stderr.pipe(bunyan.stdin)\n    });\n})\n```\n\n## Using `gulp-nodemon` with React, Browserify, Babel, ES2015, etc.\n\nGulp-nodemon is made to work with the \"groovy\" new tools like Babel, JSX, and other JavaScript compilers/bundlers/transpilers.\n\nIn gulp-nodemon land, you'll want one task for compilation that uses an on-disk cache (e.g. `gulp-file-cache`, `gulp-cache-money`) along with your bundler (e.g. `gulp-babel`, `gulp-react`, etc.). Then you'll put `nodemon({})` in another task and pass the entire compile task in your config:\n\n```js\nvar gulp = require('gulp')\n  , nodemon = require('gulp-nodemon')\n  , babel = require('gulp-babel')\n  , Cache = require('gulp-file-cache')\n\nvar cache = new Cache();\n\ngulp.task('compile', function () {\n  var stream = gulp.src('./src/**/*.js') // your ES2015 code\n                   .pipe(cache.filter()) // remember files\n                   .pipe(babel({ ... })) // compile new ones\n                   .pipe(cache.cache()) // cache them\n                   .pipe(gulp.dest('./dist')) // write them\n  return stream // important for gulp-nodemon to wait for completion\n})\n\ngulp.task('watch', ['compile'], function () {\n  var stream = nodemon({\n                 script: 'dist/' // run ES5 code\n               , watch: 'src' // watch ES2015 code\n               , tasks: ['compile'] // compile synchronously onChange\n               })\n\n  return stream\n})\n```\n\nThe cache keeps your development flow moving quickly and the `return stream` line ensure that your tasks get run in order. If you want them to run async, just remove that line.\n\n## Using `gulp-nodemon` with `browser-sync`\n\nSome people want to use `browser-sync`. That's totally fine, just start browser sync in the same task as `nodemon({})` and use gulp-nodemon's `.on('start', function () {})` to trigger browser-sync. Don't use the `.on('restart')` event because it will fire before your app is up and running.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/JacksonGariety/gulp-nodemon.git"
  },
  "scripts": {
    "test": "gulp test"
  },
  "version": "2.2.1"
}
