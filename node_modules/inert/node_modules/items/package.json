{
  "_args": [
    [
      {
        "raw": "items@1.x.x",
        "scope": null,
        "escapedName": "items",
        "name": "items",
        "rawSpec": "1.x.x",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/home/arch/galileo/node_modules/inert"
    ]
  ],
  "_from": "items@>=1.0.0 <2.0.0",
  "_id": "items@1.1.1",
  "_inCache": true,
  "_location": "/inert/items",
  "_nodeVersion": "4.0.0",
  "_npmUser": {
    "name": "hueniverse",
    "email": "eran@hammer.io"
  },
  "_npmVersion": "2.14.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "items@1.x.x",
    "scope": null,
    "escapedName": "items",
    "name": "items",
    "rawSpec": "1.x.x",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/inert"
  ],
  "_resolved": "https://registry.npmjs.org/items/-/items-1.1.1.tgz",
  "_shasum": "435b5dd21bca28b3cfd25bb5c6b278b715010fd9",
  "_shrinkwrap": null,
  "_spec": "items@1.x.x",
  "_where": "/home/arch/galileo/node_modules/inert",
  "bugs": {
    "url": "https://github.com/hapijs/items/issues"
  },
  "dependencies": {},
  "description": "Bare minimum async methods",
  "devDependencies": {
    "code": "1.x.x",
    "lab": "5.x.x"
  },
  "directories": {},
  "dist": {
    "shasum": "435b5dd21bca28b3cfd25bb5c6b278b715010fd9",
    "tarball": "https://registry.npmjs.org/items/-/items-1.1.1.tgz"
  },
  "engines": {
    "node": ">=0.10.40"
  },
  "gitHead": "d1d0a14d03ae5d92bcf64f5343e9c7d346faa04a",
  "homepage": "https://github.com/hapijs/items#readme",
  "keywords": [
    "async",
    "serial",
    "parallel"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "hueniverse",
      "email": "eran@hueniverse.com"
    },
    {
      "name": "rockbot",
      "email": "raquel@rckbt.me"
    }
  ],
  "name": "items",
  "optionalDependencies": {},
  "readme": "#items\n\nBare minimum async methods adapted specifically for the very limited **hapi** core use cases. Use\n[async](https://github.com/caolan/async) for all your application needs.\n\n[![Build Status](https://secure.travis-ci.org/hapijs/items.png)](http://travis-ci.org/hapijs/items)\n\nLead Maintainer - [Raquel VÃ©lez](https://github.com/rockbot)\n\n## `Items.serial(items, method, callback)`\n\nRuns `method` against each value in the `items` array *in series*. `callback` is executed when all of the tasks are complete. Calling back with an error will short-circuit the remaining tasks.\n\n- `items` an array of items to pass to `method`.\n- `method` a function with the signature `function (item, next)`.\n    - `item` - is the currently processing item in the `items` array.\n    - `next` - callback function to indicate the end of processing for `item`. Calling `next` with a truthy parameter indicates an error and ends `Items.serial`.\n- `callback` - a function with the signature `function (err)`.\n    - `err` - indicates any errors during processing.\n\n## `Items.parallel(items, method, callback)`\n\nRuns `method` against each value in the `items` array *in parallel*. `callback` is executed when all of the tasks are complete. Calling back with an error will short-circuit the remaining tasks.\n\n- `items` an array of items to pass to `method`.\n- `method` a function with the signature `function (item, next)`.\n    - `item` - is the currently processing item in the `items` array.\n    - `next` - callback function to indicate the end of processing for `item`. Calling `next` with a truthy parameter indicates an error and ends `Items.serial`.\n- `callback` - a function with the signature `function (err)`.\n    - `err` - indicates any errors during processing.\n\n## `Items.parallel.execute(tasks, callback)`\n\nRuns all of the functions in `tasks` *in parallel* and stores the results in a collector object passed into `callback`. If any of the tasks callback with an error, the collector object is `null`.\n\n- `tasks` - on object containing functions to execute in parallel. The `key` of the function is the `key` in the result of collector object. The task should have the signature `function (next)`\n    - `next(err, result)` - callback function to indicate the end of processing for the current task.\n        - `err` - indicates any errors during processing.\n        - `result` - result of this function. This value will be set on the collector object in the final callback.\n- `callback(err, result)`\n    - `err` - any errors reported by *any* of the `tasks`.\n    - `result` - an object containing the result of running all of the `tasks`. `result` will be `null` if any of the tasks callback with an error. The `result.key` will be the corresponding `key` of the `tasks` object.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/items.git"
  },
  "scripts": {
    "test": "lab -a code -t 100 -L",
    "test-cov-html": "lab -a code -r html -o coverage.html"
  },
  "version": "1.1.1"
}
