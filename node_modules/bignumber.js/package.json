{
  "_args": [
    [
      {
        "raw": "bignumber.js@3.1.2",
        "scope": null,
        "escapedName": "bignumber.js",
        "name": "bignumber.js",
        "rawSpec": "3.1.2",
        "spec": "3.1.2",
        "type": "version"
      },
      "/home/arch/galileo/node_modules/mysql"
    ]
  ],
  "_from": "bignumber.js@3.1.2",
  "_id": "bignumber.js@3.1.2",
  "_inCache": true,
  "_location": "/bignumber.js",
  "_nodeVersion": "7.2.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/bignumber.js-3.1.2.tgz_1483896554937_0.13670875830575824"
  },
  "_npmUser": {
    "name": "mikemcl",
    "email": "M8ch88l@gmail.com"
  },
  "_npmVersion": "3.8.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bignumber.js@3.1.2",
    "scope": null,
    "escapedName": "bignumber.js",
    "name": "bignumber.js",
    "rawSpec": "3.1.2",
    "spec": "3.1.2",
    "type": "version"
  },
  "_requiredBy": [
    "/mysql"
  ],
  "_resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-3.1.2.tgz",
  "_shasum": "f3bdb99ad5268a15fc1f0bed2fb018e2693fe236",
  "_shrinkwrap": null,
  "_spec": "bignumber.js@3.1.2",
  "_where": "/home/arch/galileo/node_modules/mysql",
  "author": {
    "name": "Michael Mclaughlin",
    "email": "M8ch88l@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/MikeMcl/bignumber.js/issues"
  },
  "dependencies": {},
  "description": "A library for arbitrary-precision decimal and non-decimal arithmetic",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "f3bdb99ad5268a15fc1f0bed2fb018e2693fe236",
    "tarball": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-3.1.2.tgz"
  },
  "engines": {
    "node": "*"
  },
  "gitHead": "2ccc3a7d2831fbd849fe1efbd9895c814bb344ff",
  "homepage": "https://github.com/MikeMcl/bignumber.js#readme",
  "keywords": [
    "arbitrary",
    "precision",
    "arithmetic",
    "big",
    "number",
    "decimal",
    "float",
    "biginteger",
    "bigdecimal",
    "bignumber",
    "bigint",
    "bignum"
  ],
  "license": "MIT",
  "main": "bignumber.js",
  "maintainers": [
    {
      "name": "mikemcl",
      "email": "M8ch88l@gmail.com"
    }
  ],
  "name": "bignumber.js",
  "optionalDependencies": {},
  "readme": "![bignumber.js](https://raw.githubusercontent.com/MikeMcl/bignumber.js/gh-pages/bignumberjs.png)\r\n\r\nA JavaScript library for arbitrary-precision decimal and non-decimal arithmetic.\r\n\r\n[![Build Status](https://travis-ci.org/MikeMcl/bignumber.js.svg)](https://travis-ci.org/MikeMcl/bignumber.js)\r\n\r\n<br />\r\n\r\n## Features\r\n\r\n  - Faster, smaller, and perhaps easier to use than JavaScript versions of Java's BigDecimal\r\n  - 8 KB minified and gzipped\r\n  - Simple API but full-featured\r\n  - Works with numbers with or without fraction digits in bases from 2 to 64 inclusive\r\n  - Replicates the `toExponential`, `toFixed`, `toPrecision` and `toString` methods of JavaScript's Number type\r\n  - Includes a `toFraction` and a correctly-rounded `squareRoot` method\r\n  - Supports cryptographically-secure pseudo-random number generation\r\n  - No dependencies\r\n  - Wide platform compatibility: uses JavaScript 1.5 (ECMAScript 3) features only\r\n  - Comprehensive [documentation](http://mikemcl.github.io/bignumber.js/) and test set\r\n\r\n![API](https://raw.githubusercontent.com/MikeMcl/bignumber.js/gh-pages/API.png)\r\n\r\nIf a smaller and simpler library is required see [big.js](https://github.com/MikeMcl/big.js/).\r\nIt's less than half the size but only works with decimal numbers and only has half the methods.\r\nIt also does not allow `NaN` or `Infinity`, or have the configuration options of this library.\r\n\r\nSee also [decimal.js](https://github.com/MikeMcl/decimal.js/), which among other things adds support for non-integer powers, and performs all operations to a specified number of significant digits.\r\n\r\n## Load\r\n\r\nThe library is the single JavaScript file *bignumber.js* (or minified, *bignumber.min.js*).\r\n\r\n```html\r\n<script src='relative/path/to/bignumber.js'></script>\r\n```\r\n\r\nFor [Node.js](http://nodejs.org), the library is available from the [npm](https://npmjs.org/) registry\r\n\r\n    $ npm install bignumber.js\r\n\r\n```javascript\r\nvar BigNumber = require('bignumber.js');\r\n```\r\n\r\nTo load with AMD loader libraries such as [requireJS](http://requirejs.org/):\r\n\r\n```javascript\r\nrequire(['path/to/bignumber'], function(BigNumber) {\r\n    // Use BigNumber here in local scope. No global BigNumber.\r\n});\r\n```\r\n\r\n## Use\r\n\r\n*In all examples below, `var`, semicolons and `toString` calls are not shown.\r\nIf a commented-out value is in quotes it means `toString` has been called on the preceding expression.*\r\n\r\nThe library exports a single function: `BigNumber`, the constructor of BigNumber instances.\r\n\r\nIt accepts a value of type number *(up to 15 significant digits only)*, string or BigNumber object,\r\n\r\n```javascript\r\nx = new BigNumber(123.4567)\r\ny = BigNumber('123456.7e-3')\r\nz = new BigNumber(x)\r\nx.equals(y) && y.equals(z) && x.equals(z)      // true\r\n```\r\n\r\n\r\nand a base from 2 to 64 inclusive can be specified.\r\n\r\n```javascript\r\nx = new BigNumber(1011, 2)          // \"11\"\r\ny = new BigNumber('zz.9', 36)       // \"1295.25\"\r\nz = x.plus(y)                       // \"1306.25\"\r\n```\r\n\r\nA BigNumber is immutable in the sense that it is not changed by its methods.\r\n\r\n```javascript\r\n0.3 - 0.1                           // 0.19999999999999998\r\nx = new BigNumber(0.3)\r\nx.minus(0.1)                        // \"0.2\"\r\nx                                   // \"0.3\"\r\n```\r\n\r\nThe methods that return a BigNumber can be chained.\r\n\r\n```javascript\r\nx.dividedBy(y).plus(z).times(9).floor()\r\nx.times('1.23456780123456789e+9').plus(9876.5432321).dividedBy('4444562598.111772').ceil()\r\n```\r\n\r\nMany method names have a shorter alias.\r\n\r\n```javascript\r\nx.squareRoot().dividedBy(y).toPower(3).equals(x.sqrt().div(y).pow(3))         // true\r\nx.cmp(y.mod(z).neg()) == 1 && x.comparedTo(y.modulo(z).negated()) == 1        // true\r\n```\r\n\r\nLike JavaScript's number type, there are `toExponential`, `toFixed` and `toPrecision` methods\r\n\r\n```javascript\r\nx = new BigNumber(255.5)\r\nx.toExponential(5)                  // \"2.55500e+2\"\r\nx.toFixed(5)                        // \"255.50000\"\r\nx.toPrecision(5)                    // \"255.50\"\r\nx.toNumber()                        // 255.5\r\n```\r\n\r\n and a base can be specified for `toString`.\r\n\r\n ```javascript\r\n x.toString(16)                     // \"ff.8\"\r\n ```\r\n\r\nThere is also a `toFormat` method which may be useful for internationalisation\r\n\r\n```javascript\r\ny = new BigNumber('1234567.898765')\r\ny.toFormat(2)                       // \"1,234,567.90\"\r\n```\r\n\r\nThe maximum number of decimal places of the result of an operation involving division (i.e. a division, square root, base conversion or negative power operation) is set using the `config` method of the `BigNumber` constructor.\r\n\r\nThe other arithmetic operations always give the exact result.\r\n\r\n```javascript\r\nBigNumber.config({ DECIMAL_PLACES: 10, ROUNDING_MODE: 4 })\r\n\r\nx = new BigNumber(2);\r\ny = new BigNumber(3);\r\nz = x.div(y)                        // \"0.6666666667\"\r\nz.sqrt()                            // \"0.8164965809\"\r\nz.pow(-3)                           // \"3.3749999995\"\r\nz.toString(2)                       // \"0.1010101011\"\r\nz.times(z)                          // \"0.44444444448888888889\"\r\nz.times(z).round(10)                // \"0.4444444445\"\r\n```\r\n\r\nThere is a `toFraction` method with an optional *maximum denominator* argument\r\n\r\n```javascript\r\ny = new BigNumber(355)\r\npi = y.dividedBy(113)               // \"3.1415929204\"\r\npi.toFraction()                     // [ \"7853982301\", \"2500000000\" ]\r\npi.toFraction(1000)                 // [ \"355\", \"113\" ]\r\n```\r\n\r\nand `isNaN` and `isFinite` methods, as `NaN` and `Infinity` are valid `BigNumber` values.\r\n\r\n```javascript\r\nx = new BigNumber(NaN)                                           // \"NaN\"\r\ny = new BigNumber(Infinity)                                      // \"Infinity\"\r\nx.isNaN() && !y.isNaN() && !x.isFinite() && !y.isFinite()        // true\r\n```\r\n\r\nThe value of a BigNumber is stored in a decimal floating point format in terms of a coefficient, exponent and sign.\r\n\r\n\r\n```javascript\r\nx = new BigNumber(-123.456);\r\nx.c                                 // [ 123, 45600000000000 ]  coefficient (i.e. significand)\r\nx.e                                 // 2                        exponent\r\nx.s                                 // -1                       sign\r\n```\r\n\r\n\r\nMultiple BigNumber constructors can be created, each with their own independent configuration which applies to all BigNumber's created from it.\r\n\r\n```javascript\r\n// Set DECIMAL_PLACES for the original BigNumber constructor\r\nBigNumber.config({ DECIMAL_PLACES: 10 })\r\n\r\n// Create another BigNumber constructor, optionally passing in a configuration object\r\nBN = BigNumber.another({ DECIMAL_PLACES: 5 })\r\n\r\nx = new BigNumber(1)\r\ny = new BN(1)\r\n\r\nx.div(3)                            // '0.3333333333'\r\ny.div(3)                            // '0.33333'\r\n```\r\n\r\nFor futher information see the [API](http://mikemcl.github.io/bignumber.js/) reference in the *doc* directory.\r\n\r\n## Test\r\n\r\nThe *test* directory contains the test scripts for each method.\r\n\r\nThe tests can be run with Node or a browser. For Node use\r\n\r\n    $ npm test\r\n\r\nor\r\n\r\n    $ node test/every-test\r\n\r\nTo test a single method, e.g.\r\n\r\n    $ node test/toFraction\r\n\r\nFor the browser, see *every-test.html* and *single-test.html* in the *test/browser* directory.\r\n\r\n*bignumber-vs-number.html* enables some of the methods of bignumber.js to be compared with those of JavaScript's number type.\r\n\r\n## Versions\r\n\r\nVersion 1.x.x of this library is still supported on the 'original' branch. The advantages of later versions are that they are considerably faster for numbers with many digits and that there are some added methods (see Change Log below). The disadvantages are more lines of code and increased code complexity, and the loss of simplicity in no longer having the coefficient of a BigNumber stored in base 10.\r\n\r\n## Performance\r\n\r\nSee the [README](https://github.com/MikeMcl/bignumber.js/tree/master/perf) in the *perf* directory.\r\n\r\n## Build\r\n\r\nFor Node, if [uglify-js](https://github.com/mishoo/UglifyJS2) is installed\r\n\r\n    npm install uglify-js -g\r\n\r\nthen\r\n\r\n    npm run build\r\n\r\nwill create *bignumber.min.js*.\r\n\r\nA source map will also be created in the root directory.\r\n\r\n## Feedback\r\n\r\nOpen an issue, or email\r\n\r\nMichael\r\n\r\n<a href=\"mailto:M8ch88l@gmail.com\">M8ch88l@gmail.com</a>\r\n\r\n## Licence\r\n\r\nMIT.\r\n\r\nSee [LICENCE](https://github.com/MikeMcl/bignumber.js/blob/master/LICENCE).\r\n\r\n## Change Log\r\n\r\n#### 3.1.2\r\n* 08/01/2017\r\n* Minor documentation edit.\r\n\r\n#### 3.1.1\r\n* 08/01/2017\r\n* Uncomment `isBigNumber` tests.\r\n* Ignore dot files.\r\n\r\n#### 3.1.0\r\n* 08/01/2017\r\n* Add `isBigNumber` method.\r\n\r\n#### 3.0.2\r\n* 08/01/2017\r\n* Bugfix: Possible incorrect value of `ERRORS` after a `BigNumber.another` call (due to `parseNumeric` declaration in outer scope).\r\n\r\n#### 3.0.1\r\n* 23/11/2016\r\n* Apply fix for old ipads with `%` issue, see #57 and #102.\r\n* Correct error message.\r\n\r\n#### 3.0.0\r\n* 09/11/2016\r\n* Remove `require('crypto')` - leave it to the user.\r\n* Add `BigNumber.set` as `BigNumber.config` alias.\r\n* Default `POW_PRECISION` to `0`.\r\n\r\n#### 2.4.0\r\n* 14/07/2016\r\n* #97 Add exports to support ES6 imports.\r\n\r\n#### 2.3.0\r\n* 07/03/2016\r\n* #86 Add modulus parameter to `toPower`.\r\n\r\n#### 2.2.0\r\n* 03/03/2016\r\n* #91 Permit larger JS integers.\r\n\r\n#### 2.1.4\r\n* 15/12/2015\r\n* Correct UMD.\r\n\r\n#### 2.1.3\r\n* 13/12/2015\r\n* Refactor re global object and crypto availability when bundling.\r\n\r\n#### 2.1.2\r\n* 10/12/2015\r\n* Bugfix: `window.crypto` not assigned to `crypto`.\r\n\r\n#### 2.1.1\r\n* 09/12/2015\r\n* Prevent code bundler from adding `crypto` shim.\r\n\r\n#### 2.1.0\r\n* 26/10/2015\r\n* For `valueOf` and `toJSON`, include the minus sign with negative zero.\r\n\r\n#### 2.0.8\r\n* 2/10/2015\r\n* Internal round function bugfix.\r\n\r\n#### 2.0.6\r\n* 31/03/2015\r\n* Add bower.json. Tweak division after in-depth review.\r\n\r\n#### 2.0.5\r\n* 25/03/2015\r\n* Amend README. Remove bitcoin address.\r\n\r\n#### 2.0.4\r\n* 25/03/2015\r\n* Critical bugfix #58: division.\r\n\r\n#### 2.0.3\r\n* 18/02/2015\r\n* Amend README. Add source map.\r\n\r\n#### 2.0.2\r\n* 18/02/2015\r\n* Correct links.\r\n\r\n#### 2.0.1\r\n* 18/02/2015\r\n* Add `max`, `min`, `precision`, `random`, `shift`, `toDigits` and `truncated` methods.\r\n* Add the short-forms: `add`, `mul`, `sd`, `sub` and `trunc`.\r\n* Add an `another` method to enable multiple independent constructors to be created.\r\n* Add support for the base 2, 8 and 16 prefixes `0b`, `0o` and `0x`.\r\n* Enable a rounding mode to be specified as a second parameter to `toExponential`, `toFixed`, `toFormat` and `toPrecision`.\r\n* Add a `CRYPTO` configuration property so cryptographically-secure pseudo-random number generation can be specified.\r\n* Add a `MODULO_MODE` configuration property to enable the rounding mode used by the `modulo` operation to be specified.\r\n* Add a `POW_PRECISION` configuration property to enable the number of significant digits calculated by the power operation to be limited.\r\n* Improve code quality.\r\n* Improve documentation.\r\n\r\n#### 2.0.0\r\n* 29/12/2014\r\n* Add `dividedToIntegerBy`, `isInteger` and `toFormat` methods.\r\n* Remove the following short-forms: `isF`, `isZ`, `toE`, `toF`, `toFr`, `toN`, `toP`, `toS`.\r\n* Store a BigNumber's coefficient in base 1e14, rather than base 10.\r\n* Add fast path for integers to BigNumber constructor.\r\n* Incorporate the library into the online documentation.\r\n\r\n#### 1.5.0\r\n* 13/11/2014\r\n* Add `toJSON` and `decimalPlaces` methods.\r\n\r\n#### 1.4.1\r\n* 08/06/2014\r\n* Amend README.\r\n\r\n#### 1.4.0\r\n* 08/05/2014\r\n* Add `toNumber`.\r\n\r\n#### 1.3.0\r\n* 08/11/2013\r\n* Ensure correct rounding of `sqrt` in all, rather than almost all, cases.\r\n* Maximum radix to 64.\r\n\r\n#### 1.2.1\r\n* 17/10/2013\r\n* Sign of zero when x < 0 and x + (-x) = 0.\r\n\r\n#### 1.2.0\r\n* 19/9/2013\r\n* Throw Error objects for stack.\r\n\r\n#### 1.1.1\r\n* 22/8/2013\r\n* Show original value in constructor error message.\r\n\r\n#### 1.1.0\r\n* 1/8/2013\r\n* Allow numbers with trailing radix point.\r\n\r\n#### 1.0.1\r\n* Bugfix: error messages with incorrect method name\r\n\r\n#### 1.0.0\r\n* 8/11/2012\r\n* Initial release\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/MikeMcl/bignumber.js.git"
  },
  "scripts": {
    "build": "uglifyjs bignumber.js --source-map bignumber.js.map -c -m -o bignumber.min.js --preamble \"/* bignumber.js v3.1.2 https://github.com/MikeMcl/bignumber.js/LICENCE */\"",
    "test": "node ./test/every-test.js"
  },
  "version": "3.1.2"
}
