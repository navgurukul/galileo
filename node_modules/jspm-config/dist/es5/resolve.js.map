{"version":3,"file":"resolve.js","sourceRoot":"/@unional/jspm-config/","sources":["resolve.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'any-promise'\nimport * as extend from 'xtend'\nimport * as path from 'path'\n\nimport {\n  Options, DependencyBranch, DependencyTree, DependencyInfo, PathMap, ModuleMap, Configs,\n  JspmPackageJson\n} from './interfaces'\nimport { readProjectConfig, readJspmConfigs } from './readProjectConfig'\nimport { ModuleNotFoundError } from './error'\n\nexport function resolveAll(options: Options): Promise<DependencyBranch> {\n  return readProjectConfig(options)\n    .then(config => {\n      const dependencyInfo = getDependencyInfo(config.jspmConfigs)\n      return readMap(\n        dependencyInfo.map,\n        config.jspmPackageJson,\n        dependencyInfo)\n    })\n}\n\nexport function resolveByPackageJson(pjson: JspmPackageJson, options: Options): Promise<DependencyBranch> {\n  return readJspmConfigs(pjson, options)\n    .then(configs => {\n      const dependencyInfo = getDependencyInfo(configs)\n      return readMap(\n        dependencyInfo.map,\n        pjson,\n        dependencyInfo)\n    })\n}\n\nexport function resolve(moduleName: string, options: Options): Promise<DependencyTree> {\n  return readProjectConfig(options)\n    .then(config => {\n      const dependencyInfo = getDependencyInfo(config.jspmConfigs)\n      const packageName = dependencyInfo.map[moduleName]\n      if (!packageName) {\n        throw new ModuleNotFoundError(moduleName)\n      }\n      const map = readMap(\n        { [moduleName]: packageName },\n        config.jspmPackageJson,\n        dependencyInfo)\n      return map[moduleName]\n    })\n}\n\nfunction readMap(map: ModuleMap, pjson: JspmPackageJson, dependencyInfo: DependencyInfo) {\n  const { paths, packages } = dependencyInfo\n  const baseURL = pjson.directories && pjson.directories.baseURL\n  const result: DependencyBranch = {}\n  for (let moduleName in map) {\n    const node: DependencyTree = {} as any\n    const packageName = map[moduleName]\n    node.path = path.join(baseURL || '', getModulePath(packageName, paths))\n    const pkg = packages[packageName]\n    if (pkg && pkg.map) {\n      node.map = readMap(pkg.map, pjson, dependencyInfo)\n    }\n    result[moduleName] = node\n  }\n\n  return result\n}\nfunction getModulePath(packageName: string, paths: PathMap) {\n  for (let prefix in paths) {\n    if (packageName.indexOf(prefix) === 0) {\n      return packageName.replace(prefix, paths[prefix])\n    }\n  }\n  return packageName\n}\nfunction getDependencyInfo(jspmConfigs: Configs): DependencyInfo {\n  const config = extend(\n    jspmConfigs.browser,\n    jspmConfigs.dev,\n    jspmConfigs.jspm,\n    jspmConfigs.node)\n  return {\n    paths: config.paths,\n    map: config.map,\n    packages: config.packages\n  }\n}\n"]}