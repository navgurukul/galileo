{"version":3,"file":"readProjectConfig.js","sourceRoot":"/@unional/jspm-config/","sources":["readProjectConfig.ts"],"names":[],"mappings":"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","sourcesContent":["import path = require('path')\nimport Promise = require('any-promise')\nimport extend = require('xtend')\nimport pick = require('object.pick')\n\nimport { readJson } from './utils/fs'\nimport { JspmPackageJson, Configs, Options, DependenciesJson, JspmProjectInfo } from './interfaces'\nimport { JSPM_PACKAGE_JSON_DEFAULT } from './constants'\nimport { ConfigError } from './error'\nimport { ConfigReader } from './ConfigReader'\n\nexport function readProjectConfig(options: Options): Promise<JspmProjectInfo> {\n  return readJspmPackageJson(options)\n    .then((jspmPackageJson) => {\n      return Promise.all(\n        [\n          readJspmConfigs(jspmPackageJson, options),\n          readDependenciesJson(jspmPackageJson, options)\n        ])\n        .then((results) => {\n          return {\n            jspmPackageJson,\n            jspmConfigs: results[0],\n            dependenciesJson: results[1]\n          }\n        })\n    })\n    .catch<JspmProjectInfo | void>(err => {\n      if (err.code === 'ENOENT') {\n        // package.json does not exist. Returns undefined.\n        return\n      }\n\n      throw err\n    })\n}\n\nexport function readDependenciesJson(jspmPackageJson: JspmPackageJson, options: Options): Promise<DependenciesJson> {\n  let packages: string\n  if (jspmPackageJson.directories) {\n    if (jspmPackageJson.directories.packages) {\n      packages = jspmPackageJson.directories.packages\n    }\n    else if (jspmPackageJson.directories.baseURL) {\n      packages = path.join(jspmPackageJson.directories.baseURL, JSPM_PACKAGE_JSON_DEFAULT.directories.packages)\n    }\n    else {\n      packages = JSPM_PACKAGE_JSON_DEFAULT.directories.packages\n    }\n  }\n  else {\n      packages = JSPM_PACKAGE_JSON_DEFAULT.directories.packages\n  }\n  const filePath = path.join(options.cwd, packages, '.dependencies.json')\n  return readJson(filePath).catch<DependenciesJson | void>(err => {\n    if (err.code === 'ENOENT') {\n      // <jspm_packages>/.dependencies.json does not exist. Returns undefined.\n      return\n    }\n\n    throw err\n  })\n}\n\nexport function readJspmPackageJson(options: Options): Promise<JspmPackageJson> {\n  return readJson(path.join(options.cwd, 'package.json'))\n    .then(pjson => {\n      return extractJspmPackageJson(pjson)\n    })\n}\n\nexport function readJspmConfigs(jspmPackageJson: JspmPackageJson, options: Options): Promise<Configs> {\n  const baseURL = jspmPackageJson.directories && jspmPackageJson.directories.baseURL || JSPM_PACKAGE_JSON_DEFAULT.directories.baseURL\n  const configFiles = extend(\n    JSPM_PACKAGE_JSON_DEFAULT.configFiles,\n    jspmPackageJson.configFiles\n  )\n  const { cwd } = options\n  const configs: Configs = {}\n  const reader = new ConfigReader()\n  let hasConfig = false\n  return Promise.resolve()\n    .then(() => {\n      let filePath = path.resolve(cwd, baseURL, configFiles['jspm'])\n      return reader.read(filePath).then(config => {\n        if (config) {\n          configs.jspm = config\n          hasConfig = true\n        }\n      })\n    })\n    .then(() => {\n      let filePath = path.resolve(options.cwd, baseURL, configFiles['jspm:browser'])\n      return reader.read(filePath).then(config => {\n        if (config) {\n          configs.browser = config\n          hasConfig = true\n        }\n      })\n    })\n    .then(() => {\n      let filePath = path.resolve(options.cwd, baseURL, configFiles['jspm:dev'])\n      return reader.read(filePath).then(config => {\n        if (config) {\n          configs.dev = config\n          hasConfig = true\n        }\n      })\n    })\n    .then(() => {\n      let filePath = path.resolve(options.cwd, baseURL, configFiles['jspm:node'])\n      return reader.read(filePath).then(config => {\n        if (config) {\n          configs.node = config\n          hasConfig = true\n        }\n      })\n    })\n    .then(\n    () => {\n      reader.close()\n      return hasConfig ? configs : undefined\n    },\n    () => {\n      reader.close()\n    })\n}\n\nfunction extractJspmPackageJson(packageJson: any): JspmPackageJson {\n  const result = pick(packageJson, [\n    'name',\n    'version',\n    'main',\n    'browser',\n    'typings',\n    'browserTypings',\n    'directories',\n    'configFiles',\n    'dependencies',\n    'peerDependencies',\n    'devDependencies'\n  ])\n  if (packageJson.jspm === true) {\n    return result\n  }\n  else if (typeof packageJson.jspm === 'object') {\n    return extend(result, packageJson.jspm)\n  }\n  else {\n    throw new ConfigError('This is not a jspm project')\n  }\n}\n"]}