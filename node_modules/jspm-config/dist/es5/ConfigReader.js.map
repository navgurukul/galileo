{"version":3,"file":"ConfigReader.js","sourceRoot":"/@unional/jspm-config/","sources":["ConfigReader.ts"],"names":[],"mappings":";AAAA,yBAA+B;AAC/B,+CAAkD;AAClD,qCAAsC;AAEtC;;;GAGG;AACH;IAIE;QACE,IAAI,CAAC,KAAK,GAAG,oBAAI,CAAI,SAAS,oBAAiB,CAAC,CAAA;QAChD,IAAI,CAAC,aAAa,EAAE,CAAA;IACtB,CAAC;IAED,2BAAI,GAAJ,UAAK,QAAgB;QAArB,iBAcC;QAbC,IAAI,CAAC,eAAe,EAAE,CAAA;QACtB,EAAE,CAAC,CAAC,CAAC,eAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAA;QAC1B,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,OAAO;gBAClC,KAAI,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,EAAE,UAAC,MAAW;oBACnC,OAAO,CAAC,MAAM,CAAC,CAAA;gBACjB,CAAC,CAAC,CAAA;gBAEF,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;YAC3B,CAAC,CAAC,CAAA;QACJ,CAAC;IACH,CAAC;IAED,4BAAK,GAAL;QACE,IAAI,CAAC,YAAY,EAAE,CAAA;QACnB,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAA;IACnB,CAAC;IAEO,oCAAa,GAArB;QAAA,iBAMC;QALC,IAAI,CAAC,KAAK,GAAG,UAAU,CACrB;YACE,KAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAA;QACnB,CAAC,EACD,KAAK,CAAC,CAAA;IACV,CAAC;IACO,mCAAY,GAApB;QACE,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IAC1B,CAAC;IAEO,sCAAe,GAAvB;QACE,IAAI,CAAC,YAAY,EAAE,CAAA;QACnB,IAAI,CAAC,aAAa,EAAE,CAAA;IACtB,CAAC;IACH,mBAAC;AAAD,CAAC,AA7CD,IA6CC;AA7CY,oCAAY","sourcesContent":["import { existsSync } from 'fs'\nimport { fork, ChildProcess } from 'child_process'\nimport * as Promise from 'any-promise'\n\n/**\n * Read jspm config in separate process.\n * Should call `close()` when you are done.\n */\nexport class ConfigReader {\n  private child: ChildProcess\n  private timer: NodeJS.Timer\n\n  constructor() {\n    this.child = fork(`${__dirname}/readJspmConfig`)\n    this.startTimeBomb()\n  }\n\n  read(filePath: string): Promise<any> {\n    this.restartTimeBomb()\n    if (!existsSync(filePath)) {\n      return Promise.resolve()\n    }\n    else {\n      return new Promise((resolve, _reject) => {\n        this.child.on('message', (config: any) => {\n          resolve(config)\n        })\n\n        this.child.send(filePath)\n      })\n    }\n  }\n\n  close() {\n    this.stopTimeBomb()\n    this.child.kill()\n  }\n\n  private startTimeBomb() {\n    this.timer = setTimeout(\n      () => {\n        this.child.kill()\n      },\n      10000)\n  }\n  private stopTimeBomb() {\n    clearTimeout(this.timer)\n  }\n\n  private restartTimeBomb() {\n    this.stopTimeBomb()\n    this.startTimeBomb()\n  }\n}\n"]}