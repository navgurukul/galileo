{"version":3,"file":"compile.js","sourceRoot":"","sources":["../../src/lib/compile.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript'\nimport extend = require('xtend')\nimport has = require('has')\nimport { join, relative, basename } from 'path'\nimport { DependencyTree, Overrides, Emitter } from '../interfaces'\nimport { readFileFrom } from '../utils/fs'\nimport { EOL, normalizeEOL } from '../utils/path'\nimport {\n  resolveFrom,\n  relativeTo,\n  isHttp,\n  isModuleName,\n  normalizeSlashes,\n  pathFromDefinition,\n  normalizeToDefinition,\n  appendToPath\n} from '../utils/path'\nimport { REFERENCE_REGEXP } from '../utils/references'\nimport { PROJECT_NAME, DEPENDENCY_SEPARATOR } from '../utils/config'\nimport TypingsError from './error'\n\n/**\n * Options interface. Supply a name and the current working directory.\n */\nexport interface Options {\n  cwd: string\n  name: string\n  global: boolean\n  meta: boolean\n  emitter: Emitter\n}\n\n/**\n * Result of compiling multiple resolutions.\n */\nexport interface ResolutionResult {\n  main?: string\n  browser?: string\n  [name: string]: string\n}\n\n/**\n * The compiled output data.\n */\nexport interface CompileResult {\n  cwd: string\n  name: string\n  tree: DependencyTree\n  results: ResolutionResult\n  global: boolean\n}\n\n/**\n * Compile a dependency tree using a root name.\n */\nexport function compile (tree: DependencyTree, resolutions: string[], options: Options): Promise<CompileResult> {\n  const { name, cwd, global } = options\n  const fileCache: ts.MapLike<Promise<string>> = {}\n\n  // Ensure the global installation is valid.\n  if (tree.global && !global) {\n    return Promise.reject(new TypingsError(\n      `Unable to compile \"${name}\", the typings are meant to be installed as ` +\n      `global but attempted to be compiled as an external module`\n    ))\n  }\n\n  // Ensure the resolution is a valid target.\n  for (const resolution of resolutions) {\n    if (resolution !== 'main' && resolution !== 'browser') {\n      return Promise.reject(new TypingsError(\n        `Unable to resolve using \"${resolution}\" setting`\n      ))\n    }\n  }\n\n  return Promise.all(resolutions.map(resolution => {\n    const resolved: ts.MapLike<string> = {}\n    const imported: ts.MapLike<Promise<ModuleInfo>> = {}\n\n    return compileDependencyTree(tree, extend(options, {\n      resolution,\n      fileCache,\n      imported,\n      resolved\n    }))\n  }))\n    .then((output) => {\n      const results: ResolutionResult = {}\n\n      for (let i = 0; i < output.length; i++) {\n        results[resolutions[i]] = output[i]\n      }\n\n      return {\n        cwd,\n        name,\n        tree,\n        global,\n        results\n      }\n    })\n}\n\n/**\n * Extends the default options with different compilation settings.\n */\ninterface CompileOptions extends Options {\n  resolution: string\n  fileCache: ts.MapLike<Promise<string>>\n  resolved: ts.MapLike<string>\n  imported: ts.MapLike<Promise<ModuleInfo>>\n  emitter: Emitter\n}\n\n/**\n * Resolve import.\n */\nfunction resolveImportFrom (from: string, to: string) {\n  return isModuleName(to) ? to : resolveFrom(from, to)\n}\n\n/**\n * Resolve override paths.\n */\nfunction resolveOverride (src: string, to: string | boolean, tree: DependencyTree): string {\n  if (typeof to === 'string') {\n    if (isModuleName(to)) {\n      const [moduleName, modulePath] = getModuleNameParts(to, tree)\n\n      return modulePath ? normalizeToDefinition(to) : moduleName\n    }\n\n    return resolveFrom(src, normalizeToDefinition(to))\n  }\n\n  return to ? src : undefined\n}\n\n/**\n * Get stringify options for a dependency.\n */\nfunction getStringifyOptions (\n  tree: DependencyTree,\n  options: CompileOptions,\n  parent: StringifyOptions\n): StringifyOptions {\n  const overrides: Overrides = {}\n  const isTypings = typeof tree.typings === 'string'\n  const main = isTypings ? tree.typings : tree.main\n  const browser = isTypings ? tree.browserTypings : tree.browser\n\n  if (options.resolution === 'browser' && browser) {\n    if (typeof browser === 'string') {\n      const mainDefinition = resolveFrom(tree.src, normalizeToDefinition(main))\n      const browserDefinition = resolveFrom(tree.src, normalizeToDefinition(browser))\n\n      overrides[mainDefinition] = browserDefinition\n    } else {\n      for (const key of Object.keys(browser)) {\n        const from = resolveOverride(tree.src, key, tree) as string\n        const to = resolveOverride(tree.src, browser[key], tree)\n\n        overrides[from] = to\n      }\n    }\n  }\n\n  const referenced: ts.MapLike<boolean> = {}\n  const dependencies: ts.MapLike<StringifyOptions> = {}\n  const entry = main == null ? undefined : normalizeToDefinition(main)\n  const prefix = `${parent ? parent.prefix : ''}${DEPENDENCY_SEPARATOR}${options.name}`\n\n  return extend(options, {\n    tree,\n    entry,\n    prefix,\n    overrides,\n    referenced,\n    dependencies,\n    parent\n  })\n}\n\n/**\n * Compile a dependency tree to a single definition.\n */\nfunction compileDependencyTree (tree: DependencyTree, options: CompileOptions): Promise<string> {\n  const stringifyOptions = getStringifyOptions(tree, options, undefined)\n  const contents: Array<Promise<string>> = []\n  const { name, global, resolution } = options\n\n  options.emitter.emit('compiledependency', { tree, global, name, resolution })\n\n  if (Array.isArray(tree.files)) {\n    for (const file of tree.files) {\n      contents.push(stringifyDependencyImport(resolveFrom(tree.src, file), DependencyImport.ALL_PATHS, false, stringifyOptions))\n    }\n  }\n\n  if (stringifyOptions.entry) {\n    contents.push(stringifyDependencyImport(resolveFrom(tree.src, stringifyOptions.entry), DependencyImport.ALL_PATHS, true, stringifyOptions))\n  }\n\n  if (contents.length === 0) {\n    contents.push(stringifyDependencyImport(resolveFrom(tree.src, 'index.d.ts'), DependencyImport.DEFAULT_ONLY, true, stringifyOptions))\n  }\n\n  return Promise.all(contents).then(out => out.join(EOL))\n}\n\n/**\n * Stringify options extend the compiler options.\n */\ninterface StringifyOptions extends CompileOptions {\n  entry: string\n  prefix: string\n  overrides: Overrides\n  referenced: ts.MapLike<boolean>\n  dependencies: ts.MapLike<StringifyOptions>\n  tree: DependencyTree\n  parent: StringifyOptions\n}\n\n/**\n * Read a file with a backup cache object.\n */\nfunction cachedReadFileFrom (path: string, options: StringifyOptions) {\n  if (!has(options.fileCache, path)) {\n    options.fileCache[path] = readFileFrom(path)\n  }\n\n  return options.fileCache[path]\n}\n\n/**\n * Return cached stringify options from the current options object.\n */\nfunction cachedStringifyOptions (name: string, compileOptions: CompileOptions, options: StringifyOptions) {\n  if (!has(options.dependencies, name)) {\n    const branch = options.tree.dependencies[name]\n\n    if (branch) {\n      options.dependencies[name] = getStringifyOptions(branch, compileOptions, options)\n    } else {\n      options.dependencies[name] = null\n    }\n  }\n\n  return options.dependencies[name]\n}\n\n/**\n * Get possible path and dependency overrides.\n */\nfunction getPath (path: string, options: StringifyOptions) {\n  if (has(options.overrides, path)) {\n    return options.overrides[path]\n  }\n\n  return path\n}\n\n/**\n * Track options per-file.\n */\ninterface ModuleInfo {\n  parent?: ModuleInfo\n  path: string\n  modulePath: string\n  isEntry: boolean\n  options: StringifyOptions\n  sourceFile: ts.SourceFile\n  fileInfo: ts.PreProcessedFileInfo\n}\n\n/**\n * Valid dependency import path resolution methods.\n */\nenum DependencyImport {\n  DEFAULT_ONLY,\n  SUFFIXES_ONLY,\n  ALL_PATHS\n}\n\n/**\n * Transform a path and dependency import mode into the list of paths to test.\n */\nfunction getDependencyImportPaths (importPath: string, mode: DependencyImport) {\n  const paths: string[] = []\n\n  if (mode === DependencyImport.DEFAULT_ONLY || mode === DependencyImport.ALL_PATHS) {\n    paths.push(importPath)\n  }\n\n  if (mode === DependencyImport.SUFFIXES_ONLY || mode === DependencyImport.ALL_PATHS) {\n    paths.push(appendToPath(importPath, '.d.ts'), appendToPath(importPath, '/index.d.ts'))\n  }\n\n  return paths\n}\n\n/**\n * Try to resolve a dependency import.\n */\nfunction readDependencyImport (importPath: string, mode: DependencyImport, isEntry: boolean, stringifyOptions: StringifyOptions, parent?: ModuleInfo) {\n  // Make an attempt at compiling the raw path and mapping module imports.\n  function attempt (cause: Error, paths: string[], index: number, isEntry: boolean, options: StringifyOptions): Promise<ModuleInfo | null> {\n    const { cwd, tree, resolution, fileCache, resolved, imported, emitter, meta } = options\n\n    // Skip future resolution attempts.\n    if (index >= paths.length) {\n      const authorPhrase = options.parent ? `The author of \"${options.parent.name}\" needs to` : 'You should'\n      const relativePath = isModuleName(importPath) ? importPath : relativeTo(options.tree.src, importPath)\n\n      if (isEntry) {\n        return Promise.reject(new TypingsError(\n          `Unable to read typings for \"${options.name}\". ` +\n          `${authorPhrase} check the entry paths in \"${basename(options.tree.src)}\" are up to date`,\n          cause\n        ))\n      }\n\n      return Promise.reject(new TypingsError(\n        `Unable to read \"${relativePath}\" from \"${options.name}\". ` +\n        `${authorPhrase} validate all import paths are accurate (case sensitive and relative)`,\n        cause\n      ))\n    }\n\n    const path = getPath(paths[index], options)\n\n    if (isModuleName(path)) {\n      const [moduleName, modulePath] = getModuleNameParts(path, tree)\n\n      const childOptions = cachedStringifyOptions(moduleName, {\n        cwd,\n        resolution,\n        fileCache,\n        emitter,\n        imported,\n        resolved,\n        name: moduleName,\n        global: false,\n        meta\n      }, options)\n\n      // When no options are returned, the dependency is a global and should be ignored.\n      if (!childOptions) {\n        stringifyOptions.resolved[getCachePath(importPath, stringifyOptions, false)] = path\n\n        return Promise.resolve(null)\n      }\n\n      const paths = getDependencyImportPaths(\n        resolveFrom(childOptions.tree.src, modulePath || childOptions.entry || 'index.d.ts'),\n        modulePath ? DependencyImport.SUFFIXES_ONLY : (childOptions.entry ? DependencyImport.ALL_PATHS : DependencyImport.DEFAULT_ONLY)\n      )\n\n      return attempt(null, paths, 0, true, childOptions)\n    }\n\n    const cached = has(options.imported, path)\n\n    // Avoid loading the same path twice.\n    if (!cached) {\n      options.imported[path] = readFileFrom(path).then(\n        function (contents) {\n          const fileInfo = ts.preProcessFile(contents)\n          const sourceFile = ts.createSourceFile(path, contents.replace(REFERENCE_REGEXP, ''), ts.ScriptTarget.Latest, true)\n          const modulePath = getCachePath(path, options, true)\n          const moduleInfo: ModuleInfo = { path, modulePath, isEntry, parent, sourceFile, options, fileInfo }\n\n          return moduleInfo\n        },\n        function (err) {\n          if (err.code === 'ENOENT' || err.code === 'ENOTDIR' || err.code === 'EISDIR' || err.code === 'EINVALIDSTATUS') {\n            return attempt(err, paths, index + 1, isEntry, options)\n          }\n\n          return Promise.reject(err)\n        }\n      )\n    }\n\n    return options.imported[path].then((moduleInfo) => {\n      // When `moduleInfo` is defined, set the resolution path. It can sometimes\n      // be undefined in the case when subsequent resolution attempts have resulted\n      // in a different resolution method but the same cache hit.\n      // Example: `./foo -> ./bar` and `./foo/bar/baz -> ./index`.\n      if (moduleInfo) {\n        // Cache at the original import path.\n        stringifyOptions.resolved[getCachePath(importPath, stringifyOptions, false)] = moduleInfo.modulePath\n      }\n\n      return !cached ? moduleInfo : undefined\n    })\n  }\n\n  return attempt(null, getDependencyImportPaths(importPath, mode), 0, isEntry, stringifyOptions)\n}\n\n/**\n * Try to stringify a dependency import.\n */\nfunction stringifyDependencyImport (importPath: string, mode: DependencyImport, isEntry: boolean, options: StringifyOptions, parent?: ModuleInfo) {\n  return readDependencyImport(importPath, mode, isEntry, options, parent)\n    .then((info) => info ? stringifyDependencyPath(info) : undefined)\n}\n\n/**\n * Return the path for the module.\n */\nfunction getCachePath (originalPath: string, options: StringifyOptions, strip: boolean) {\n  const path = strip ? pathFromDefinition(originalPath) : originalPath\n\n  if (isModuleName(path)) {\n    return normalizeSlashes(`${options.prefix}${DEPENDENCY_SEPARATOR}${path}`)\n  }\n\n  return normalizeSlashes(join(options.prefix, relativeTo(options.tree.src, path)))\n}\n\n/**\n * Stringify a dependency file.\n */\nfunction stringifyDependencyPath (moduleInfo: ModuleInfo): Promise<string> {\n  const { path, options, sourceFile, fileInfo } = moduleInfo\n  const { tree, global, resolution, name, prefix, emitter } = options\n\n  // Emit compile events for progression.\n  emitter.emit('compile', { name, prefix, path, tree, resolution })\n\n  const importedFiles = fileInfo.importedFiles.map(x => resolveImportFrom(path, x.fileName))\n  const referencedFiles = fileInfo.referencedFiles.map(x => resolveFrom(path, x.fileName))\n\n  // All dependencies MUST be imported for global modules.\n  if (global) {\n    Object.keys(tree.dependencies).forEach(x => importedFiles.push(x))\n  }\n\n  const imports = importedFiles.map(importedFile => {\n    const mode = isModuleName(importedFile) ? DependencyImport.DEFAULT_ONLY : DependencyImport.SUFFIXES_ONLY\n\n    return stringifyDependencyImport(importedFile, mode, false, options, moduleInfo)\n  })\n\n  return Promise.all(imports).then(imports => {\n    const stringified = stringifyModuleFile(moduleInfo)\n\n    for (const reference of referencedFiles) {\n      emitter.emit('reference', { name, prefix, path, reference, tree, resolution })\n    }\n\n    const contents = imports.filter(x => x != null).concat(stringified).join(EOL)\n\n    emitter.emit('compiled', { name, prefix, path, tree, resolution, contents })\n\n    return contents\n  })\n}\n\n/**\n * Separate the module name into pieces.\n */\nfunction getModuleNameParts (name: string, tree: DependencyTree): [string, string] {\n  const parts = name.split(/[\\\\\\/]/g)\n  let len = parts.length\n\n  while (len) {\n    len--\n\n    const name = parts.slice(0, len).join('/')\n    const path = parts.slice(len).join('/')\n\n    if (tree.dependencies[name]) {\n      return [name, path]\n    }\n  }\n\n  return [parts.join('/'), null]\n}\n\n/**\n * Normalize import paths against the prefix.\n */\nfunction getImportPath (path: string, options: StringifyOptions) {\n  return options.resolved[getCachePath(path, options, false)]\n}\n\n/**\n * Stringify a dependency file contents.\n */\nfunction stringifyModuleFile (info: ModuleInfo) {\n  const { options, modulePath } = info\n  const { tree, name, prefix, parent, cwd, global } = options\n\n  // Output information for the original type source.\n  const source = isHttp(info.path) ? info.path : normalizeSlashes(relative(cwd, info.path))\n  const meta = options.meta ? `// Generated by ${PROJECT_NAME}${EOL}// Source: ${source}${EOL}` : ''\n\n  if (global) {\n    if (ts.isExternalModule(info.sourceFile)) {\n      throw new TypingsError(\n        `Attempted to compile \"${name}\" as a global ` +\n        `module, but it looks like an external module. ` +\n        `You'll need to remove the global option to continue.`\n      )\n    }\n\n    return `${meta}${normalizeEOL(info.sourceFile.getText().trim(), EOL)}${EOL}`\n  } else {\n    if (!ts.isExternalModule(info.sourceFile) && !(info.parent && ts.isExternalModule(info.parent.sourceFile))) {\n      throw new TypingsError(\n        `Attempted to compile \"${name}\" as an external module, ` +\n        `but it looks like a global module. ` +\n        `You'll need to enable the global option to continue.`\n      )\n    }\n  }\n\n  let hasExports = false\n  let hasDefaultExport = false\n  let hasExportEquals = false\n  let hasLocalImports = false\n  let wasDeclared = false\n\n  // Custom replacer function to rewrite the file.\n  function replacer (node: ts.Node) {\n    // Flag `export =` as the main re-definition needs to be written different.\n    if (node.kind === ts.SyntaxKind.ExportAssignment) {\n      hasDefaultExport = !(node as ts.ExportAssignment).isExportEquals\n      hasExportEquals = !hasDefaultExport\n    } else if (node.kind === ts.SyntaxKind.ExportDeclaration) {\n      hasExports = true\n    } else if (node.kind === ts.SyntaxKind.ExportSpecifier) {\n      hasDefaultExport = hasDefaultExport || (node as ts.ExportSpecifier).name.getText() === 'default'\n    }\n\n    const flags = ts.getCombinedModifierFlags(node)\n\n    hasExports = hasExports || !!(flags & ts.ModifierFlags.Export)\n    hasDefaultExport = hasDefaultExport || !!(flags & ts.ModifierFlags.Default)\n\n    if (\n      node.kind === ts.SyntaxKind.StringLiteral &&\n      (\n        node.parent.kind === ts.SyntaxKind.ExportDeclaration ||\n        node.parent.kind === ts.SyntaxKind.ImportDeclaration ||\n        node.parent.kind === ts.SyntaxKind.ModuleDeclaration\n      )\n    ) {\n      hasLocalImports = hasLocalImports || !isModuleName((node as ts.StringLiteral).text)\n\n      return ` '${getImportPath(resolveImportFrom(info.path, (node as ts.StringLiteral).text), options)}'`\n    }\n\n    if (node.kind === ts.SyntaxKind.DeclareKeyword) {\n      // Notify the reader to remove leading trivia.\n      wasDeclared = true\n\n      return info.sourceFile.text.slice(node.getFullStart(), node.getStart())\n    }\n\n    if (node.kind === ts.SyntaxKind.ExternalModuleReference) {\n      const requirePath = getImportPath(resolveImportFrom(info.path, (node as any).expression.text), options)\n\n      return ` require('${requirePath}')`\n    }\n  }\n\n  // Read through the file.\n  function read (start: number, end: number) {\n    const text = info.sourceFile.text.slice(start, end)\n\n    // Trim leading whitespace.\n    if (start === 0) {\n      return text.replace(/^\\s+$/, '')\n    }\n\n    // Trim trailing whitespace.\n    if (end == null) {\n      return text.replace(/\\s+$/, '')\n    }\n\n    // Remove leading whitespace from the statement after \"declare\".\n    if (wasDeclared) {\n      wasDeclared = false\n\n      return text.replace(/^\\s+/, '')\n    }\n\n    return text\n  }\n\n  const moduleText = normalizeEOL(processTree(info.sourceFile, replacer, read), EOL)\n  const moduleName = parent && parent.global ? name : modulePath\n\n  // Direct usage of definition/typings. This is *not* a psuedo-module.\n  if (info.isEntry && !hasLocalImports) {\n    return meta + declareText(parent ? moduleName : name, moduleText)\n  }\n\n  const prettyPath = normalizeSlashes(join(name, relativeTo(tree.src, pathFromDefinition(info.path))))\n  const declared = meta + declareText(modulePath, moduleText)\n\n  // Create an alias/proxy module namespace to expose the implementation.\n  function alias (name: string) {\n    const imports: string[] = []\n\n    if (hasExportEquals) {\n      imports.push(`import main = require('${modulePath}');`)\n      imports.push(`export = main;`)\n    } else {\n      if (hasExports) {\n        imports.push(`export * from '${modulePath}';`)\n      }\n\n      if (hasDefaultExport) {\n        imports.push(`export { default } from '${modulePath}';`)\n      }\n    }\n\n    // No aliases, nothing exported.\n    if (imports.length === 0) {\n      return ''\n    }\n\n    return declareText(name, imports.join(EOL))\n  }\n\n  if (info.isEntry && !parent) {\n    return declared + alias(prettyPath) + alias(name)\n  }\n\n  return declared + (parent ? '' : alias(prettyPath))\n}\n\n/**\n * Declare a module.\n */\nfunction declareText (name: string, text: string) {\n  return `declare module '${name}' {${text ? EOL + text + EOL : ''}}${EOL}`\n}\n\n/**\n * Rewrite TypeScript source files.\n *\n * Reference: https://github.com/SitePen/dts-generator/blob/22402351ffd953bf32344a0e48f2ba073fc5b65a/index.ts#L70-L101\n */\nfunction processTree (\n  sourceFile: ts.SourceFile,\n  replacer: (node: ts.Node) => string,\n  reader: (start: number, end?: number) => string\n): string {\n  let code = ''\n  let position = 0\n\n  function skip (node: ts.Node) {\n    position = node.end\n  }\n\n  function readThrough (node: ts.Node) {\n    if (node.pos > position) {\n      code += reader(position, node.pos)\n      position = node.pos\n    }\n  }\n\n  function visit (node: ts.Node) {\n    readThrough(node)\n\n    const replacement = replacer(node)\n\n    if (replacement != null) {\n      code += replacement\n      skip(node)\n    } else {\n      ts.forEachChild(node, visit)\n    }\n  }\n\n  visit(sourceFile)\n\n  code += reader(position)\n\n  return code\n}\n"]}