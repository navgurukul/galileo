{
  "_args": [
    [
      {
        "raw": "glogg@^1.0.0",
        "scope": null,
        "escapedName": "glogg",
        "name": "glogg",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/home/arch/galileo/node_modules/gulplog"
    ]
  ],
  "_from": "glogg@>=1.0.0 <2.0.0",
  "_id": "glogg@1.0.0",
  "_inCache": true,
  "_location": "/glogg",
  "_nodeVersion": "0.10.36",
  "_npmUser": {
    "name": "phated",
    "email": "blaine@iceddev.com"
  },
  "_npmVersion": "2.8.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "glogg@^1.0.0",
    "scope": null,
    "escapedName": "glogg",
    "name": "glogg",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gulplog"
  ],
  "_resolved": "https://registry.npmjs.org/glogg/-/glogg-1.0.0.tgz",
  "_shasum": "7fe0f199f57ac906cf512feead8f90ee4a284fc5",
  "_shrinkwrap": null,
  "_spec": "glogg@^1.0.0",
  "_where": "/home/arch/galileo/node_modules/gulplog",
  "author": {
    "name": "Blaine Bublitz",
    "email": "blaine@iceddev.com",
    "url": "http://iceddev.com/"
  },
  "bugs": {
    "url": "https://github.com/undertakerjs/glogg/issues"
  },
  "contributors": [],
  "dependencies": {
    "sparkles": "^1.0.0"
  },
  "description": "Global logging utility",
  "devDependencies": {
    "@phated/eslint-config-iceddev": "^0.2.1",
    "code": "^1.5.0",
    "eslint": "^1.3.1",
    "eslint-plugin-mocha": "^0.5.1",
    "eslint-plugin-react": "^3.3.2",
    "lab": "^5.16.0"
  },
  "directories": {},
  "dist": {
    "shasum": "7fe0f199f57ac906cf512feead8f90ee4a284fc5",
    "tarball": "https://registry.npmjs.org/glogg/-/glogg-1.0.0.tgz"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "files": [
    "LICENSE",
    "index.js"
  ],
  "gitHead": "2683314c5bb5473e0d492418974b111f366168db",
  "homepage": "https://github.com/undertakerjs/glogg#readme",
  "keywords": [
    "global",
    "log",
    "logger",
    "logging",
    "shared"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "phated",
      "email": "blaine@iceddev.com"
    }
  ],
  "name": "glogg",
  "optionalDependencies": {},
  "readme": "# glogg\n\n[![Travis Build Status](https://img.shields.io/travis/undertakerjs/glogg/master.svg?label=travis&style=flat-square)](https://travis-ci.org/undertakerjs/glogg)\n\nGlobal logging utility\n\n## Usage\n\n```js\nvar getLogger = require('glogg');\n\nvar logger = getLogger('my-namespace');\n\n// logs strings\nlogger.debug('The MOST verbose!');\nlogger.info('Some important info');\nlogger.warn('All the warnings to you');\nlogger.error('OH NO! SOMETHING HAPPENED!');\n\n// supports util.format!\nlogger.info('%s style!', 'printf');\n\n// log anything\nlogger.debug({ my: 'obj' });\nlogger.info([1, 2, 3]);\n\n// somewhere else\nlogger.on('info', function(msg){\n  // do something with msg\n});\n\n// must be handled to avoid crashing process\nlogger.on('error', function(msg){\n  // now it won't crash\n});\n```\n\n## API\n\n__Note: This module makes no assumptions about the log levels and they will always\nbe emitted.  If you are looking to filter some out, your listeners will need to have\nextra logic.__\n\n### getLogger([namespace])\n\nCreate a new logger at the given namespace (or the default if no namespace is provided).\nReturns an augmented [`sparkles`](https://github.com/phated/sparkles) EventEmitter object\nwith 4 methods: `debug()`, `info()`, `warn()` and `error()`. When called, these methods emit\nan event with the same name.  If the first argument is a string, the arguments\nare passed through node's `util.format()` before being emitted.  Other parts\nof a node program can get the logger by namespace and listen for the events to\nbe emitted.\n\n#### logger.debug(msg)\n\nEmits a `debug` event with the given `msg`.\n\nIf the first argument is a string, all arguments are passed to node's\n`util.format()` before being emitted.\n\n#### logger.info(msg)\n\nEmits a `info` event with the given `msg`.\n\nIf the first argument is a string, all arguments are passed to node's\n`util.format()` before being emitted.\n\n#### logger.warn(msg)\n\nEmits a `warn` event with the given `msg`.\n\nIf the first argument is a string, all arguments are passed to node's\n`util.format()` before being emitted.\n\n#### logger.error(msg)\n\nEmits a `error` event with the given `msg`.\n\nIf the first argument is a string, all arguments are passed to node's\n`util.format()` before being emitted.\n\n__Note: You must handle this event in some way or the node process will crash\nwhen an `error` event is emitted.__\n\n#### logger.on(event, fn)\n\nStandard API from node's `EventEmitter`.  Use this to listen for events from\nthe logger methods.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/undertakerjs/glogg.git"
  },
  "scripts": {
    "test": "lab -cvL --globals store@sparkles"
  },
  "version": "1.0.0"
}
