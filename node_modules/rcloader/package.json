{
  "_args": [
    [
      {
        "raw": "rcloader@~0.2.0",
        "scope": null,
        "escapedName": "rcloader",
        "name": "rcloader",
        "rawSpec": "~0.2.0",
        "spec": ">=0.2.0 <0.3.0",
        "type": "range"
      },
      "/home/arch/galileo/node_modules/gulp-tslint"
    ]
  ],
  "_from": "rcloader@>=0.2.0 <0.3.0",
  "_id": "rcloader@0.2.2",
  "_inCache": true,
  "_location": "/rcloader",
  "_nodeVersion": "6.5.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/rcloader-0.2.2.tgz_1479153118035_0.9512690082192421"
  },
  "_npmUser": {
    "name": "spalger",
    "email": "email@spalger.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rcloader@~0.2.0",
    "scope": null,
    "escapedName": "rcloader",
    "name": "rcloader",
    "rawSpec": "~0.2.0",
    "spec": ">=0.2.0 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gulp-tslint"
  ],
  "_resolved": "https://registry.npmjs.org/rcloader/-/rcloader-0.2.2.tgz",
  "_shasum": "58d2298b462d0b9bfd2133d2a1ec74fbd705c717",
  "_shrinkwrap": null,
  "_spec": "rcloader@~0.2.0",
  "_where": "/home/arch/galileo/node_modules/gulp-tslint",
  "author": {
    "name": "Spencer Alger"
  },
  "bugs": {
    "url": "https://github.com/spenceralger/rcloader/issues"
  },
  "dependencies": {
    "lodash.assign": "^4.2.0",
    "lodash.isobject": "^3.0.2",
    "lodash.merge": "^4.6.0",
    "rcfinder": "^0.1.6"
  },
  "description": "For build system plugins that need to fetch relative config files (like .jshintrc).",
  "devDependencies": {
    "mocha": "^2.1.0",
    "should": "^4.6.2"
  },
  "directories": {},
  "dist": {
    "shasum": "58d2298b462d0b9bfd2133d2a1ec74fbd705c717",
    "tarball": "https://registry.npmjs.org/rcloader/-/rcloader-0.2.2.tgz"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "gitHead": "540219658cc9e0f7f24b1ea7d392264d5ff4d76c",
  "homepage": "https://github.com/spenceralger/rcloader",
  "keywords": [
    "find",
    "rcfile",
    "rc",
    "search",
    "defaults",
    "config"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "spalger",
      "email": "email@spalger.com"
    }
  ],
  "name": "rcloader",
  "optionalDependencies": {},
  "readme": "# rcloader\n\n[![Travis CI](https://travis-ci.org/spalger/rcloader.svg)](https://travis-ci.org/spalger/rcloader)\n\nFor build system plugins that need to fetch relative config files (like .jshintrc).\n\n## Features\n  - Find the closest config file (like .jshintrc) relative to the file you are linting\n  - Lookups are cached to limit IO operations\n  - Accepts input directly from plugin consumers to\n    - specifiy a file that should always be used\n    - specify a default file\n    - specify overrides\n    - disable file lookup\n\n## Install\n```sh\nnpm install rcloader\n```\n\n## Use\nThis plugin was written to specifically address this issue for a couple of gulp plugins.\n\n### within a gulp plugin\n```js\nvar RcLoader = require('rcloader');\nvar map = require('map-stream');\n\nmodule.exports = function MyGulpPlugin(options) {\n  var rcLoader = new RcLoader('.configfilename', options);\n\n  return map(function (file, cb) {\n    // get the options for this file specifically\n    rcLoader.for(file.path, function (err, fileOpts) {\n      // do something cool\n\n      // send the file along\n      cb(null, file);\n    });\n  });\n};\n```\n\nIf you would rather, just skip the callback and it will run synchronously.\n```js\nvar fileOpts = rcLoader.for(file.path, options);\n```\n\n## Options\nThe second argument to the `RcLoader` constructor should be the options that plugin consumers define, and it can take a few different forms.\n\n**If the user specifies a string**, it is used as a path to the only config file that they care about. Calling `rcLoader.for(path)` will always return a copy of the config file at that path.\n\n**If the user specifies an object**, the following keys will be stripped from it:\n\n- `lookup`, Boolean: Find the closest config file each time `.for()` is called. default is true, unless `options` is a path.\n- `defaultFile`, string: Specify a default configuration file.\n\nIf `defaultFile` is not specified, all values except `lookup` will override values found in the config file.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/spenceralger/rcloader.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.2.2"
}
