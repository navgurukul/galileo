{
  "_args": [
    [
      {
        "raw": "vision@4.1.1",
        "scope": null,
        "escapedName": "vision",
        "name": "vision",
        "rawSpec": "4.1.1",
        "spec": "4.1.1",
        "type": "version"
      },
      "/home/arch/galileo"
    ]
  ],
  "_from": "vision@4.1.1",
  "_id": "vision@4.1.1",
  "_inCache": true,
  "_location": "/vision",
  "_nodeVersion": "7.2.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/vision-4.1.1.tgz_1480383382388_0.2223711737897247"
  },
  "_npmUser": {
    "name": "hueniverse",
    "email": "eran@hammer.io"
  },
  "_npmVersion": "4.0.3",
  "_phantomChildren": {
    "isemail": "2.2.1",
    "items": "2.1.1",
    "topo": "2.0.2"
  },
  "_requested": {
    "raw": "vision@4.1.1",
    "scope": null,
    "escapedName": "vision",
    "name": "vision",
    "rawSpec": "4.1.1",
    "spec": "4.1.1",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/vision/-/vision-4.1.1.tgz",
  "_shasum": "e1b612b2d2e2f20310a039290fd49d51248f82da",
  "_shrinkwrap": null,
  "_spec": "vision@4.1.1",
  "_where": "/home/arch/galileo",
  "bugs": {
    "url": "https://github.com/hapijs/vision/issues"
  },
  "dependencies": {
    "boom": "4.x.x",
    "hoek": "4.x.x",
    "items": "2.x.x",
    "joi": "10.x.x"
  },
  "description": "Templates rendering plugin support for hapi.js",
  "devDependencies": {
    "babel-core": "6.x.x",
    "babel-plugin-transform-react-jsx": "6.x.x",
    "code": "4.x.x",
    "ejs": "2.x.x",
    "handlebars": "4.x.x",
    "hapi": "15.x.x",
    "hapi-react-views": "6.x.x",
    "lab": "11.x.x",
    "marko": "3.x.x",
    "mustache": "2.x.x",
    "nunjucks": "2.x.0",
    "pug": ">=2.0.0-beta6",
    "react": "0.14.x",
    "react-dom": "0.14.x"
  },
  "directories": {},
  "dist": {
    "shasum": "e1b612b2d2e2f20310a039290fd49d51248f82da",
    "tarball": "https://registry.npmjs.org/vision/-/vision-4.1.1.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "gitHead": "10760955c69b54450adcaaa219ac2f945c38ee3d",
  "homepage": "https://github.com/hapijs/vision#readme",
  "keywords": [
    "view",
    "render",
    "template",
    "hapi"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "hueniverse",
      "email": "eran@hammer.io"
    },
    {
      "name": "jagoda",
      "email": "jeffrey.jagoda@gmail.com"
    }
  ],
  "name": "vision",
  "optionalDependencies": {},
  "readme": "#vision\n\nTemplates rendering plugin support for hapi.js.\n\n[![Build Status](https://secure.travis-ci.org/hapijs/vision.png)](http://travis-ci.org/hapijs/vision)\n\nLead Maintainer - [Jeffrey Jagoda](https://github.com/jagoda)\n\n**vision** decorates the [server](https://github.com/hapijs/hapi/blob/master/API.md#server),\n[request](https://github.com/hapijs/hapi/blob/master/API.md#request-object), and\n[reply](https://github.com/hapijs/hapi/blob/master/API.md#reply-interface) interfaces with additional\nmethods for managing view engines that can be used to render templated responses. **vision** also\nprovides a built-in [handler](https://github.com/hapijs/hapi/blob/master/API.md#serverhandlername-method)\nimplementation for creating templated responses.\n\n**You will need to install `vision` using something like `npm install --save vision` before you can register it.**\n\n```js\nconst server = new Hapi.Server();\nserver.connection({ port: 8080 });\n\nserver.register(require('vision'), (err) => {\n\n    if (err) {\n        console.log(\"Failed to load vision.\");\n    }\n});\n```\n**NOTE:** Vision is included with and loaded by default in Hapi < 9.0.\n\n- [Examples](#examples)\n    - [EJS](#ejs)\n    - [Handlebars](#handlebars)\n    - [Jade](#jade)\n    - [Mustache](#mustache)\n    - [Nunjucks](#nunjucks)\n\nSee [API.md](./API.md) for detailed usage information.\n\n## Examples\n\n**vision** is compatible with most major templating engines out of the box. Engines that don't follow\nthe normal API pattern can still be used by mapping their API to the **vision** API. Working code for\nthe following examples can be found in the [examples directory](./examples).\n\n### EJS\n\n```js\nconst server = new Hapi.Server();\nserver.connection({ port: 8000 });\n\nconst rootHandler = function (request, reply) {\n\n    reply.view('index', {\n        title: 'examples/views/ejs/index.js | Hapi ' + request.server.version,\n        message: 'Index - Hello World!'\n    });\n};\n\nserver.register(require('vision'), (err) => {\n\n    if (err) {\n        throw err;\n    }\n\n    server.views({\n        engines: { ejs: require('ejs') },\n        relativeTo: __dirname,\n        path: 'templates'\n    });\n\n    server.route({ method: 'GET', path: '/', handler: rootHandler });\n});\n```\n\n### Handlebars\n\n```js\nconst server = new Hapi.Server();\nserver.connection({ port: 8000 });\n\nconst handler = function (request, reply) {\n\n    reply.view('basic/index', {\n        title: 'examples/views/handlebars/basic.js | Hapi ' + request.server.version,\n        message: 'Hello World!'\n    });\n};\n\nserver.register(require('vision'), (err) => {\n\n    if (err) {\n        throw err;\n    }\n\n    server.views({\n        engines: { html: require('handlebars') },\n        path: __dirname + '/templates'\n    });\n\n    server.route({ method: 'GET', path: '/', handler: handler });\n});\n```\n\n### Jade\n\n```js\nconst server = new Hapi.Server();\nserver.connection({ port: 8000 });\n\nconst rootHandler = function (request, reply) {\n\n    reply.view('index', {\n        title: 'examples/views/jade/index.js | Hapi ' + request.server.version,\n        message: 'Index - Hello World!'\n    });\n};\n\nconst aboutHandler = function (request, reply) {\n\n    reply.view('about', {\n        title: 'examples/views/jade/index.js | Hapi ' + request.server.version,\n        message: 'About - Hello World!'\n    });\n};\n\nserver.register(require('vision'), (err) => {\n\n    if (err) {\n        throw err;\n    }\n\n    server.views({\n        engines: { jade: require('jade') },\n        path: __dirname + '/templates',\n        compileOptions: {\n            pretty: true\n        }\n    });\n\n    server.route({ method: 'GET', path: '/', handler: rootHandler });\n    server.route({ method: 'GET', path: '/about', handler: aboutHandler });\n});\n```\n\n### Mustache\n\n```js\nconst server = new Hapi.Server();\nserver.connection({ port: 8000 });\n\nconst rootHandler = function (request, reply) {\n\n    reply.view('index', {\n        title: 'examples/views/mustache/index.js | Hapi ' + request.server.version,\n        message: 'Index - Hello World!'\n    });\n};\n\nserver.register(require('vision'), (err) => {\n\n    if (err) {\n        throw err;\n    }\n\n    server.views({\n        engines: {\n            html: {\n                compile: function (template) {\n\n                    Mustache.parse(template);\n\n                    return function (context) {\n\n                        return Mustache.render(template, context);\n                    };\n                }\n            }\n        },\n        relativeTo: __dirname,\n        path: 'templates'\n    });\n\n    server.route({ method: 'GET', path: '/', handler: rootHandler });\n});\n```\n\n### Nunjucks\n\n```js\nconst server = new Hapi.Server();\nserver.connection({ port: 8000 });\n\nconst rootHandler = function (request, reply) {\n\n    reply.view('index', {\n        title: 'examples/views/nunjucks/index.js | Hapi ' + request.server.version,\n        message: 'Index - Hello World!'\n    });\n};\n\nserver.register(require('vision'), (err) => {\n\n    if (err) {\n        throw err;\n    }\n\n    server.views({\n        engines: {\n            html: {\n                compile: function (src, options) {\n\n                    var template = Nunjucks.compile(src, options.environment);\n\n                    return function (context) {\n\n                        return template.render(context);\n                    };\n                },\n\n                prepare: function (options, next) {\n\n                    options.compileOptions.environment = Nunjucks.configure(options.path, { watch : false });\n                    return next();\n                }\n            }\n        },\n        path: Path.join(__dirname, 'templates')\n    });\n\n    server.route({ method: 'GET', path: '/', handler: rootHandler });\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/vision.git"
  },
  "scripts": {
    "test": "lab -a code -t 100 -L",
    "test-cov-html": "lab -a code -r html -o coverage.html"
  },
  "version": "4.1.1"
}
