{
  "_args": [
    [
      {
        "raw": "wreck@10.0.0",
        "scope": null,
        "escapedName": "wreck",
        "name": "wreck",
        "rawSpec": "10.0.0",
        "spec": "10.0.0",
        "type": "version"
      },
      "/home/arch/galileo/node_modules/hapi"
    ]
  ],
  "_from": "wreck@10.0.0",
  "_id": "wreck@10.0.0",
  "_inCache": true,
  "_location": "/hapi/wreck",
  "_nodeVersion": "6.4.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/wreck-10.0.0.tgz_1473356015239_0.27296936768107116"
  },
  "_npmUser": {
    "name": "wyatt",
    "email": "wpreul@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "wreck@10.0.0",
    "scope": null,
    "escapedName": "wreck",
    "name": "wreck",
    "rawSpec": "10.0.0",
    "spec": "10.0.0",
    "type": "version"
  },
  "_requiredBy": [
    "/hapi/subtext"
  ],
  "_resolved": "https://registry.npmjs.org/wreck/-/wreck-10.0.0.tgz",
  "_shasum": "98ab882f85e16a526332507f101f5a7841162278",
  "_shrinkwrap": null,
  "_spec": "wreck@10.0.0",
  "_where": "/home/arch/galileo/node_modules/hapi",
  "bugs": {
    "url": "https://github.com/hapijs/wreck/issues"
  },
  "dependencies": {
    "boom": "4.x.x",
    "hoek": "4.x.x"
  },
  "description": "HTTP Client Utilities",
  "devDependencies": {
    "code": "3.x.x",
    "lab": "11.x.x",
    "require-reload": "0.2.x"
  },
  "directories": {},
  "dist": {
    "shasum": "98ab882f85e16a526332507f101f5a7841162278",
    "tarball": "https://registry.npmjs.org/wreck/-/wreck-10.0.0.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "gitHead": "0af42cd394c5fdb956166917d95157b8acd2ea96",
  "homepage": "https://github.com/hapijs/wreck#readme",
  "keywords": [
    "utilities",
    "http",
    "client"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index",
  "maintainers": [
    {
      "name": "hueniverse",
      "email": "eran@hueniverse.com"
    },
    {
      "name": "wyatt",
      "email": "wpreul@gmail.com"
    }
  ],
  "name": "wreck",
  "optionalDependencies": {},
  "readme": "![wreck Logo](https://raw.github.com/hapijs/wreck/master/images/wreck.png)\n\n### HTTP Client Utilities\n\n[![Npm Version](https://img.shields.io/npm/v/wreck.svg)](https://npmjs.com/package/wreck)\n[![Node Version](https://img.shields.io/node/v/wreck.svg)](https://npmjs.com/package/wreck)\n[![Build Status](https://secure.travis-ci.org/hapijs/wreck.svg)](http://travis-ci.org/hapijs/wreck)\n\nLead Maintainer: [Wyatt Preul](https://github.com/geek)\n\n## Usage\n\n### Basic\n```javascript\nconst Wreck = require('wreck');\n\nWreck.get('https://google.com/', (err, res, payload) => {\n    /* do stuff */\n});\n```\n\n```javascript\nconst Wreck = require('wreck');\n\nWreck.post('https://posttestserver.com/post.php', { payload: { hello: 'post' } }, (err, res, payload) => {\n    /* do stuff */\n});\n```\n\n### Advanced\n```javascript\nconst Wreck = require('wreck');\n\nconst method = 'GET'; // GET, POST, PUT, DELETE\nconst uri = '/';\nconst readableStream = Wreck.toReadableStream('foo=bar');\n\nconst wreck = Wreck.defaults({\n    headers: { 'x-foo-bar': 123 }\n});\n\n// cascading example -- does not alter `wreck`\nconst wreckWithTimeout = wreck.defaults({\n    timeout: 5\n});\n\n// all attributes are optional\nconst options = {\n    baseUrl: 'https://www.example.com',\n    payload: readableStream || 'foo=bar' || new Buffer('foo=bar'),\n    headers: { /* http headers */ },\n    redirects: 3,\n    beforeRedirect: function (redirectMethod, statusCode, location, resHeaders, redirectOptions, next) { return next() },\n    redirected: function (statusCode, location, req) {},\n    timeout: 1000,    // 1 second, default: unlimited\n    maxBytes: 1048576, // 1 MB, default: unlimited\n    rejectUnauthorized: true || false,\n    downstreamRes: null,\n    agent: null,         // Node Core http.Agent\n    secureProtocol: 'SSLv3_method' // The SSL method to use\n};\n\nconst optionalCallback = (err, res) => {\n\n    /* handle err if it exists, in which case res will be undefined */\n\n    // buffer the response stream\n    Wreck.read(res, null, (err, body) => {\n        /* do stuff */\n    });\n};\n\nconst req = wreck.request(method, uri, options, optionalCallback);\n```\n\n### `defaults(options)`\n\nReturns a *new* instance of Wreck which merges the provided `options` with those provided on a per-request basis. You can call defaults repeatedly to build up multiple http clients.\n- `options` - Config object containing settings for both `request` and `read` operations.\n\n### `request(method, uri, [options, [callback]])`\n\nInitiate an HTTP request.\n- `method` - A string specifying the HTTP request method, defaulting to 'GET'.\n- `uri` - The URI of the requested resource.\n- `options` - An optional configuration object. To omit this argument but still\n  use a callback, pass `null` in this position. The options object supports the\n  following optional keys:\n    - `baseUrl` - fully qualified uri string used as the base url. Most useful with `request.defaults`, for example when you want to do many requests to the same domain.\n                  If `baseUrl` is `https://example.com/api/`, then requesting `/end/point?test=true` will fetch `https://example.com/api/end/point?test=true`. Any\n                  querystring in the `baseUrl` will be overwritten with the querystring in the `uri` When `baseUrl` is given, `uri` must also be a string.\n    - `socketPath` - `/path/to/unix/socket` for Server.\n    - `payload` - The request body as a string, Buffer, Readable Stream, or an object that can be serialized using `JSON.stringify()`.\n    - `headers` - An object containing request headers.\n    - `redirects` - The maximum number of redirects to follow.\n    - `redirect303` - if `true`, treats HTTP 303 status code the same way as a 301/302. Defaults to no redirection on 303.\n    - `beforeRedirect` - A callback function that is called before a redirect is triggered, using the signature\n      `function(redirectMethod, statusCode, location, resHeaders, redirectOptions, next)` where:\n          - `redirectMethod` - A string specifying the redirect method.\n          - `statusCode` - HTTP status code of the response that triggered the redirect.\n          - `location` - The redirect location string.\n          - `resHeaders` - An object with the headers received as part of the redirection response.\n          - `redirectOptions` - Options that will be applied to the redirect request. Changes to this object are applied to the redirection request.\n          - `next` - the callback function called to perform the redirection using signature `function()`.\n    - `redirected` - A callback function that is called when a redirect was triggered, using the signature `function(statusCode, location, req)` where:\n      - `statusCode` - HTTP status code of the response that triggered the redirect.\n      - `location` - The redirected location string.\n      - `req` - The new [ClientRequest](http://nodejs.org/api/http.html#http_class_http_clientrequest) object which replaces the one initially returned.\n    - `timeout` - The number of milliseconds to wait without receiving a response\n      before aborting the request. Defaults to unlimited.\n    - `maxBytes` - maximum size for response payload. Defaults to unlimited.\n    - `rejectUnauthorized` - [TLS](http://nodejs.org/api/tls.html) flag indicating\n      whether the client should reject a response from a server with invalid certificates.  This cannot be set at the\n      same time as the `agent` option is set.\n    - `downstreamRes`: downstream Resource dependency.\n    - `agent` - Node Core [http.Agent](http://nodejs.org/api/http.html#http_class_http_agent).\n      Defaults to either `wreck.agents.http` or `wreck.agents.https`.  Setting to `false` disables agent pooling.\n    - `secureProtocol` - [TLS](http://nodejs.org/api/tls.html) flag indicating the SSL method to use, e.g. `SSLv3_method`\n      to force SSL version 3. The possible values depend on your installation of OpenSSL. Read the official OpenSSL docs\n      for possible [SSL_METHODS](http://www.openssl.org/docs/ssl/ssl.html#DEALING_WITH_PROTOCOL_METHODS).\n- `callback` - The optional callback function using the signature `function (err, response)` where:\n    - `err` - Any error that may have occurred during the handling of the request.\n    - `response` - The [HTTP Incoming Message](http://nodejs.org/api/http.html#http_http_incomingmessage)\n       object, which is also a readable stream.\n\nReturns an instance of the node.js [ClientRequest](http://nodejs.org/api/http.html#http_class_http_clientrequest) object.\n\n\n### `read(response, options, callback)`\n- `response` - An HTTP Incoming Message object.\n- `options` - `null` or a configuration object with the following optional keys:\n    - `timeout` - The number of milliseconds to wait while reading data before\n    aborting handling of the response. Defaults to unlimited.\n    - `json` - A value indicating how to try to parse the payload as JSON. Defaults to `undefined` meaning no parse logic.\n        - `true`, 'smart' - only try `JSON.parse` if the response indicates a JSON content-type.\n        - `force` - try `JSON.parse` regardless of the content-type header.\n    - `maxBytes` - The maximum allowed response payload size. Defaults to unlimited.\n- `callback` - The callback function using the signature `function (err, payload)` where:\n    - `err` - Any error that may have occurred while reading the response.\n    - `payload` - The payload in the form of a Buffer or (optionally) parsed JavaScript object (JSON).\n\n\n### `get(uri, [options], callback)`\n\nConvenience method for GET operations.\n- `uri` - The URI of the requested resource.\n- `options` - Optional config object containing settings for both `request` and\n  `read` operations.\n- `callback` - The callback function using the signature `function (err, response, payload)` where:\n    - `err` - Any error that may have occurred during handling of the request.\n    - `response` - The [HTTP Incoming Message](http://nodejs.org/api/http.html#http_http_incomingmessage)\n       object, which is also a readable stream.\n    - `payload` - The payload in the form of a Buffer or (optionally) parsed JavaScript object (JSON).\n\nReturns an instance of the node.js [ClientRequest](http://nodejs.org/api/http.html#http_class_http_clientrequest) object.\n\n\n### `post(uri, [options], callback)`\n\nConvenience method for POST operations.\n- `uri` - The URI of the requested resource.\n- `options` - Optional config object containing settings for both `request` and\n  `read` operations.\n- `callback` - The callback function using the signature `function (err, response, payload)` where:\n    - `err` - Any error that may have occurred during handling of the request.\n    - `response` - The [HTTP Incoming Message](http://nodejs.org/api/http.html#http_http_incomingmessage)\n       object, which is also a readable stream.\n    - `payload` - The payload in the form of a Buffer or (optionally) parsed JavaScript object (JSON).\n\nReturns an instance of the node.js [ClientRequest](http://nodejs.org/api/http.html#http_class_http_clientrequest) object.\n\n### `patch(uri, [options], callback)`\n\nConvenience method for PATCH operations.\n- `uri` - The URI of the requested resource.\n- `options` - Optional config object containing settings for both `request` and\n  `read` operations.\n- `callback` - The callback function using the signature `function (err, response, payload)` where:\n    - `err` - Any error that may have occurred during handling of the request.\n    - `response` - The [HTTP Incoming Message](http://nodejs.org/api/http.html#http_http_incomingmessage)\n       object, which is also a readable stream.\n    - `payload` - The payload in the form of a Buffer or (optionally) parsed JavaScript object (JSON).\n\nReturns an instance of the node.js [ClientRequest](http://nodejs.org/api/http.html#http_class_http_clientrequest) object.\n\n\n### `put(uri, [options], callback)`\n\nConvenience method for PUT operations.\n- `uri` - The URI of the requested resource.\n- `options` - Optional config object containing settings for both `request` and\n  `read` operations.\n- `callback` - The callback function using the signature `function (err, response, payload)` where:\n    - `err` - Any error that may have occurred during handling of the request.\n    - `response` - The [HTTP Incoming Message](http://nodejs.org/api/http.html#http_http_incomingmessage)\n       object, which is also a readable stream.\n    - `payload` - The payload in the form of a Buffer or (optionally) parsed JavaScript object (JSON).\n\nReturns an instance of the node.js [ClientRequest](http://nodejs.org/api/http.html#http_class_http_clientrequest) object.\n\n\n### `delete(uri, [options], callback)`\n\nConvenience method for DELETE operations.\n- `uri` - The URI of the requested resource.\n- `options` - Optional config object containing settings for both `request` and\n  `read` operations.\n- `callback` - The callback function using the signature `function (err, response, payload)` where:\n    - `err` - Any error that may have occurred during handling of the request.\n    - `response` - The [HTTP Incoming Message](http://nodejs.org/api/http.html#http_http_incomingmessage)\n       object, which is also a readable stream.\n    - `payload` - The payload in the form of a Buffer or (optionally) parsed JavaScript object (JSON).\n\nReturns an instance of the node.js [ClientRequest](http://nodejs.org/api/http.html#http_class_http_clientrequest) object.\n\n\n### `toReadableStream(payload, [encoding])`\n\nCreates a [readable stream](http://nodejs.org/api/stream.html#stream_class_stream_readable)\nfor the provided payload and encoding.\n- `payload` - The Buffer or string to be wrapped in a readable stream.\n- `encoding` - The encoding to use. Must be a valid Buffer encoding, such as 'utf8' or 'ascii'.\n\n```javascript\nconst stream = Wreck.toReadableStream(new Buffer('Hello', 'ascii'), 'ascii');\nconst read = stream.read();\n// read -> 'Hello'\n```\n\n### `parseCacheControl(field)`\n\nParses the provided *cache-control* request header value into an object containing\na property for each directive and it's value. Boolean directives, such as \"private\"\nor \"no-cache\" will be set to the boolean `true`.\n- `field` - The header cache control value to be parsed.\n\n```javascript\nconst result = Wreck.parseCacheControl('private, max-age=0, no-cache');\n// result.private -> true\n// result['max-age'] -> 0\n// result['no-cache'] -> true\n```\n\n### `agents`\n\nObject that contains the agents for pooling connections for `http` and `https`.\nThe properties are `http`, `https`, and `httpsAllowUnauthorized` which is an\n`https` agent with `rejectUnauthorized` set to true.  All agents have\n`maxSockets` configured to `Infinity`.  They are each instances of the node.js\n[Agent](http://nodejs.org/api/http.html#http_class_http_agent) and expose the\nstandard properties.\n\nFor example, the following code demonstrates changing `maxSockets` on the `http`\nagent.\n\n ```js\n const Wreck = require('wreck');\n\n Wreck.agents.http.maxSockets = 20;\n ```\n\n\n### Events\n\n#### `request`\n\nThe request event is emitted just before *wreck* makes a request.  The\nhandler should accept the following arguments `(uri, options)` where:\n\n  - `uri` - the result of `Url.parse(uri)`. This will provide information about\n  the resource requested.  Also includes the headers and method.\n  - `options` - the options passed into the request function.  This will include\n  a payload if there is one.\n\nSince the `request` event executes on a global event handler, you can intercept\nand decorate a request before its sent.\n\n\n#### `response`\n\nThe response event is always emitted for any request that *wreck* makes.  The\nhandler should accept the following arguments `(error, request, response, start,\nuri)` where:\n\n  - `error` - a Boom error\n  - `request` - the raw `ClientHttp` request object\n  - `response` - the raw `IncomingMessage` response object\n  - `start` - the time that the request was initiated\n  - `uri` - the result of `Url.parse(uri)`. This will provide information about\n  the resource requested.  Also includes the headers and method.\n\nThis event is useful for logging all requests that go through *wreck*. The error\nand response arguments can be undefined depending on if an error occurs.  Please\nbe aware that if multiple modules are depending on the same cached *wreck*\nmodule that this event can fire for each request made across all modules.  The\nstart argument is the timestamp when the request was started.  This can be\nuseful for determining how long it takes *wreck* to get a response back and\nprocessed.\n\nThe `EventEmitter` is attached to the `process` object under a `Symbol` with the\nvalue of `'wreck'`.  Therefore, if you want to capture a wreck event, after\nwreck has been loaded, but in a module that doesn't require wreck, you can\nhandle events in the following way:\n\n```js\nconst symbol = Symbol.for('wreck');\nprocess[symbol].on('response', (err) => {\n\n    if (err) {\n      console.error(err);\n    }\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/wreck.git"
  },
  "scripts": {
    "test": "lab -t 100 -L -a code",
    "test-cov-html": "lab -r html -o coverage.html -a code"
  },
  "version": "10.0.0"
}
