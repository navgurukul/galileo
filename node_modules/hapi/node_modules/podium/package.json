{
  "_args": [
    [
      {
        "raw": "podium@1.2.5",
        "scope": null,
        "escapedName": "podium",
        "name": "podium",
        "rawSpec": "1.2.5",
        "spec": "1.2.5",
        "type": "version"
      },
      "/home/arch/galileo/node_modules/hapi"
    ]
  ],
  "_from": "podium@1.2.5",
  "_id": "podium@1.2.5",
  "_inCache": true,
  "_location": "/hapi/podium",
  "_nodeVersion": "7.2.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/podium-1.2.5.tgz_1480454279745_0.7775171792600304"
  },
  "_npmUser": {
    "name": "hueniverse",
    "email": "eran@hammer.io"
  },
  "_npmVersion": "4.0.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "podium@1.2.5",
    "scope": null,
    "escapedName": "podium",
    "name": "podium",
    "rawSpec": "1.2.5",
    "spec": "1.2.5",
    "type": "version"
  },
  "_requiredBy": [
    "/hapi"
  ],
  "_resolved": "https://registry.npmjs.org/podium/-/podium-1.2.5.tgz",
  "_shasum": "87c566c2f0365bcf0a1ec7602c4d01948cdd2ad5",
  "_shrinkwrap": null,
  "_spec": "podium@1.2.5",
  "_where": "/home/arch/galileo/node_modules/hapi",
  "bugs": {
    "url": "https://github.com/hapijs/podium/issues"
  },
  "dependencies": {
    "hoek": "4.x.x",
    "items": "2.x.x",
    "joi": "10.x.x"
  },
  "description": "Node compatible event emitter with extra features",
  "devDependencies": {
    "code": "4.x.x",
    "lab": "11.x.x"
  },
  "directories": {},
  "dist": {
    "shasum": "87c566c2f0365bcf0a1ec7602c4d01948cdd2ad5",
    "tarball": "https://registry.npmjs.org/podium/-/podium-1.2.5.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "gitHead": "e4f31552922181d088e56f833c0869e8b7604526",
  "homepage": "https://github.com/hapijs/podium#readme",
  "keywords": [
    "emitter",
    "event"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "hueniverse",
      "email": "eran@hammer.io"
    }
  ],
  "name": "podium",
  "optionalDependencies": {},
  "readme": "#podium\n\nNode (semi) compatible event emitter with extra features.\n\n**podium** is an event emitter with support for tags, filters, channels, event update cloning,\narguments spreading, and other features useful when building large scale applications.\nWhile node's native [`EventEmitter`](https://nodejs.org/dist/latest-v6.x/docs/api/events.html#events_class_eventemitter) is strictly focused on maximum performance, \nit lacks many features that do not belong in the core implementation. **podium** is not restricted by \nnode's performance requirement as it is designed for application layer needs where it's overhead \nis largely insignificant as implementing these features will have similar cost on top of the native emitter.\n\n[![Build Status](https://secure.travis-ci.org/hapijs/podium.svg)](http://travis-ci.org/hapijs/podium)\n\nLead Maintainer - [Eran Hammer](https://github.com/hueniverse)\n\n## `new Podium(events)`\nThis creates a new event emitter.\n```javascript\nconst Podium = require('podium');\nconst podiumObject = new Podium(); // new emitter\n\nconst podiumObject2 = new Podium('event1');// creates new event and calls registerEvent()\n```\n\n## `podium.registerEvent(events)`\nRegisters an event `event1` to emitter.\n```\npodiumObject.registerEvent('event1');\n\n//with optional parameters\npodiumObject.registerEvent({\n        name: 'event1',\n        shared: true\n });\n```\n\n\n## `podium.on(criteria, listener)`\nSubscribe a handler to an event. Handler can be seen a function which will be called when the event occurs. \n```\npodiumObject.registerEvent('event1');\n\npodiumObject.on('event1',function(update){ // Way 1\n    console.log('inside autonomous listener without name! data:', update);\n});\n\nconst listener1 = function() { // normal function object\n    console.log('listener1 called');\n}\npodiumObject.on('event1',listener1); // Way 2\n```\n\n##`podium.addListener(criteria, listener)`\nSame as podium.on().\n```\npodiumObject.addListener('event1',listener1);\n```\n\n##`podium.once(criteria, listener)`\nSame as calling podium.on() with the count option set to 1. Whenever we call emit(), `listener1` will get fired\nbut also get removed, so that it won't get fired on call to emit().\n```\npodiumObject.once('event1',listener1);\n```\n\n## `podium.emit(criteria, data, [callback])`\nEmits an event update to all the subscribed listeners.\n```\npodiumObject.emit('event1','here we can send any data to listeners.');\n```\n\n##`podium.removeListener(name, listener)`\nRemoves all listeners subscribed to a given event name matching the provided listener method.\n```\npodiumObject.removeListener('event1',listener1);\n```\n\n##`podium.removeAllListeners(name)`\nRemoves all listeners subscribed to a given event name.\n```\npodiumObject.removeAllListeners('event1');\n```\n\n##`podium.hasListeners(name)`\nReturns whether an event has any listeners subscribed. \n```\nif(podiumObject.hasListeners('event1')){\n    console.log('this event has some listeners left');\n}\nelse{\n    console.log('this event has no listeners');\n}\n\n```\n\n## `podium.registerPodium(podiums)`\nRegisters a podium object(emitter) to another podium object(source). Whenever any event gets registered on `emitterObject` \nit gets registered on `sourceObject` as well. But reverse is not true. \n\n```\nconst source1Object = new Podium('test'); \nconst source2Object = new Podium('test');\n\nconst emitterObject = new Podium(source1Object); \nemitterObject.registerPodium(source2Object);\n\nconst listener1 = function() { // normal function\n    console.log('listener1 called');\n}\nconst listener2 = function() { // another normal function\n    console.log('listener1 called');\n}\nemitterObject.on('test',listener1); // listener1 gets registered on emitterObject, source1Object,source2Object events\nsource1Object.on('test',listener2); // listener2 gets registered on source1Object events only\n\nsource1Object.emit('test', 1); // runs all registered events\nemitterObject.emit('test', 2);\n\n```\n\n\n## API\n\nThe full API is available in the [API documentation](https://github.com/hapijs/podium/blob/master/API.md).\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/podium.git"
  },
  "scripts": {
    "test": "lab -a code -t 100 -L",
    "test-cov-html": "lab -r html -o coverage.html -a code -L"
  },
  "version": "1.2.5"
}
