{
  "_args": [
    [
      {
        "raw": "tslint@^3.13.0",
        "scope": null,
        "escapedName": "tslint",
        "name": "tslint",
        "rawSpec": "^3.13.0",
        "spec": ">=3.13.0 <4.0.0",
        "type": "range"
      },
      "/home/arch/galileo"
    ]
  ],
  "_from": "tslint@>=3.13.0 <4.0.0",
  "_id": "tslint@3.15.1",
  "_inCache": true,
  "_location": "/tslint",
  "_nodeVersion": "0.10.33",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/tslint-3.15.1.tgz_1471896126190_0.545801114058122"
  },
  "_npmUser": {
    "name": "palantir",
    "email": "pt-vendor-npm@palantir.com"
  },
  "_npmVersion": "2.13.5",
  "_phantomChildren": {
    "inflight": "1.0.6",
    "inherits": "2.0.3",
    "minimatch": "3.0.3",
    "once": "1.4.0",
    "path-is-absolute": "1.0.1"
  },
  "_requested": {
    "raw": "tslint@^3.13.0",
    "scope": null,
    "escapedName": "tslint",
    "name": "tslint",
    "rawSpec": "^3.13.0",
    "spec": ">=3.13.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/tslint/-/tslint-3.15.1.tgz",
  "_shasum": "da165ca93d8fdc2c086b51165ee1bacb48c98ea5",
  "_shrinkwrap": null,
  "_spec": "tslint@^3.13.0",
  "_where": "/home/arch/galileo",
  "bin": {
    "tslint": "./bin/tslint"
  },
  "bugs": {
    "url": "https://github.com/palantir/tslint/issues"
  },
  "dependencies": {
    "colors": "^1.1.2",
    "diff": "^2.2.1",
    "findup-sync": "~0.3.0",
    "glob": "^7.0.3",
    "optimist": "~0.6.0",
    "resolve": "^1.1.7",
    "underscore.string": "^3.3.4"
  },
  "description": "An extensible static analysis linter for the TypeScript language",
  "devDependencies": {
    "chai": "^3.0.0",
    "grunt": "^1.0.1",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-clean": "^1.0.0",
    "grunt-eslint": "^18.1.0",
    "grunt-mocha-test": "^0.12.7",
    "grunt-npm-command": "^0.1.2",
    "grunt-run": "~0.6.0",
    "grunt-ts": "^5.1.0",
    "grunt-tslint": "latest",
    "js-yaml": "^3.4.6",
    "mocha": "^2.2.5",
    "tslint": "latest",
    "tslint-test-config-non-relative": "file:test/external/tslint-test-config-non-relative",
    "typescript": "latest"
  },
  "directories": {},
  "dist": {
    "shasum": "da165ca93d8fdc2c086b51165ee1bacb48c98ea5",
    "tarball": "https://registry.npmjs.org/tslint/-/tslint-3.15.1.tgz"
  },
  "homepage": "https://github.com/palantir/tslint#readme",
  "keywords": [
    "cli",
    "typescript",
    "linter"
  ],
  "license": "Apache-2.0",
  "main": "./lib/tslint",
  "maintainers": [
    {
      "name": "palantir",
      "email": "pt-vendor-npm@palantir.com"
    }
  ],
  "name": "tslint",
  "optionalDependencies": {},
  "peerDependencies": {
    "typescript": ">=1.7.3"
  },
  "readme": "[![NPM version](https://badge.fury.io/js/tslint.svg)](http://badge.fury.io/js/tslint)\n[![Downloads](http://img.shields.io/npm/dm/tslint.svg)](https://npmjs.org/package/tslint)\n[![Circle CI](https://circleci.com/gh/palantir/tslint.svg?style=svg)](https://circleci.com/gh/palantir/tslint)\n[![Join the chat at https://gitter.im/palantir/tslint](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/palantir/tslint?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nTSLint\n======\n\nAn extensible linter for the [TypeScript language](https://github.com/Microsoft/TypeScript).\n\nTSLint supports:\n\n- custom lint rules\n- custom formatters (failure reporters)\n- inline disabling / enabling of rules\n- configuration presets (`tslint:latest`, `tslint-react`, etc.) & composition\n- integration with [msbuild](https://github.com/joshuakgoldberg/tslint.msbuild), [grunt](https://github.com/palantir/grunt-tslint), [gulp](https://github.com/panuhorsmalahti/gulp-tslint), [atom](https://github.com/AtomLinter/linter-tslint), [eclipse](https://github.com/palantir/eclipse-tslint), [emacs](http://flycheck.org), [sublime](https://packagecontrol.io/packages/SublimeLinter-contrib-tslint), [vim](https://github.com/scrooloose/syntastic), [visual studio](https://visualstudiogallery.msdn.microsoft.com/6edc26d4-47d8-4987-82ee-7c820d79be1d), [vscode](https://marketplace.visualstudio.com/items?itemName=eg2.tslint), [webstorm](https://www.jetbrains.com/webstorm/help/tslint.html), and more\n\nTable of Contents\n------------\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Core Rules](#core-rules)\n- [Rule Flags](#rule-flags)\n- [Custom Rules](#custom-rules)\n- [Development](#development)\n- [Creating a new release](#creating-a-new-release)\n\n\nInstallation\n------------\n<sup>[back to ToC &uarr;](#table-of-contents)</sup>\n\n#### CLI\n\n```\nnpm install -g tslint typescript\n```\n\n#### Library\n\n```\nnpm install tslint typescript\n```\n\n#### Peer dependencies\n\n`typescript` is a peer dependency of `tslint`. This allows you to update the compiler independently from the\nlinter. This also means that `tslint` will have to use the same version of `tsc` used to actually compile your sources.\n\nBreaking changes in the latest dev release of `typescript@next` might break something in the linter if we haven't built against that release yet. If this happens to you, you can try:\n\n1. picking up `tslint@next`, which may have some bugfixes not released in `tslint@latest`\n   (see [release notes here](https://github.com/palantir/tslint/releases)).\n2. rolling back `typescript` to a known working version.\n\nUsage\n-----\n<sup>[back to ToC &uarr;](#table-of-contents)</sup>\n\nPlease ensure that the TypeScript source files compile correctly _before_ running the linter.\n\n#### Configuration\n\nTSLint is configured via a file named `tslint.json`. This file is loaded from the current path, or the user's home directory, in that order.\n\nThe configuration file specifies which rules are enabled and their options. These configurations may _extend_ other ones via the `\"extends\"` field in `tslint.json`.\n\n```js\n{\n  /*\n   * Possible values:\n   * - the name of a built-in config\n   * - the name of an NPM module which has a \"main\" file that exports a config object\n   * - a relative path to a JSON file\n   */\n  \"extends\": \"tslint:latest\",\n  \"rules\": {\n    /*\n     * Any rules specified here will override those from the base config we are extending\n     */\n    \"no-constructor-vars\": true\n  },\n  \"rulesDirectory\": [\n    /*\n     * A list of relative or absolute paths to directories that contain custom rules.\n     * See the Custom Rules documentation below for more details.\n     */\n  ]\n}\n```\n\nBuilt-in configs include `tslint:latest` and `tslint:recommended`. You may inspect their source [here](https://github.com/palantir/tslint/tree/master/src/configs).\n\n__`tslint:recommended`__ is a stable, somewhat opinionated set of rules which we encourage for general TypeScript programming. This configuration follows semver, so it will _not_ have breaking changes across minor or patch releases.\n\n__`tslint:latest`__ extends `tslint:recommended` and is continuously updated to include configuration for the latest rules in every TSLint release. Using this config may introduce breaking changes across minor releases as new rules are enabled which cause lint failures in your code. When TSLint reaches a major version bump, `tslint:recommended` will be updated to be identical to `tslint:latest`.\n\nSee the [core rules list](#core-rules) below for descriptions of all the rules.\n\n#### CLI\n\nusage: `tslint [options] file ...`\n\nOptions:\n\n```\n-c, --config          configuration file\n--force               return status code 0 even if there are lint errors\n-h, --help            display detailed help\n-i, --init            generate a tslint.json config file in the current working directory\n-o, --out             output file\n-r, --rules-dir       rules directory\n-s, --formatters-dir  formatters directory\n-e, --exclude         exclude globs from path expansion\n-t, --format          output format (prose, json, verbose, pmd, msbuild, checkstyle)  [default: \"prose\"]\n--test                test that tslint produces the correct output for the specified directory\n--project             path to tsconfig.json file\n--type-check          enable type checking when linting a project\n-v, --version         current version\n```\n\ntslint accepts the following command-line options:\n\n```\n-c, --config:\n    The location of the configuration file that tslint will use to\n    determine which rules are activated and what options to provide\n    to the rules. If no option is specified, the config file named\n    tslint.json is used, so long as it exists in the path.\n    The format of the file is { rules: { /* rules list */ } },\n    where /* rules list */ is a key: value comma-separated list of\n    rulename: rule-options pairs. Rule-options can be either a\n    boolean true/false value denoting whether the rule is used or not,\n    or a list [boolean, ...] where the boolean provides the same role\n    as in the non-list case, and the rest of the list are options passed\n    to the rule that will determine what it checks for (such as number\n    of characters for the max-line-length rule, or what functions to ban\n    for the ban rule).\n\n-e, --exclude:\n    A filename or glob which indicates files to exclude from linting.\n    This option can be supplied multiple times if you need multiple\n    globs to indicate which files to exclude.\n\n--force:\n    Return status code 0 even if there are any lint errors.\n    Useful while running as npm script.\n\n-i, --init:\n    Generates a tslint.json config file in the current working directory.\n\n-o, --out:\n    A filename to output the results to. By default, tslint outputs to\n    stdout, which is usually the console where you're running it from.\n\n-r, --rules-dir:\n    An additional rules directory, for user-created rules.\n    tslint will always check its default rules directory, in\n    node_modules/tslint/lib/rules, before checking the user-provided\n    rules directory, so rules in the user-provided rules directory\n    with the same name as the base rules will not be loaded.\n\n-s, --formatters-dir:\n    An additional formatters directory, for user-created formatters.\n    Formatters are files that will format the tslint output, before\n    writing it to stdout or the file passed in --out. The default\n    directory, node_modules/tslint/build/formatters, will always be\n    checked first, so user-created formatters with the same names\n    as the base formatters will not be loaded.\n\n-t, --format:\n    The formatter to use to format the results of the linter before\n    outputting it to stdout or the file passed in --out. The core\n    formatters are prose (human readable), json (machine readable)\n    and verbose. prose is the default if this option is not used.\n    Other built-in options include pmd, msbuild, checkstyle, and vso.\n    Additional formatters can be added and used if the --formatters-dir\n    option is set.\n\n--test:\n    Runs tslint on the specified directory and checks if tslint's output matches\n    the expected output in .lint files. Automatically loads the tslint.json file in the\n    specified directory as the configuration file for the tests. See the\n    full tslint documentation for more details on how this can be used to test custom rules.\n\n--project:\n    The location of a tsconfig.json file that will be used to determine which\n    files will be linted.\n\n--type-check\n    Enables the type checker when running linting rules. --project must be\n    specified in order to enable type checking.\n\n-v, --version:\n    The current version of tslint.\n\n-h, --help:\n    Prints this help message.\n```\n\n#### Library\n\n```javascript\nconst Linter = require(\"tslint\");\nconst fs = require(\"fs\");\n\nconst fileName = \"Specify file name\";\nconst configuration = {\n    rules: {\n        \"variable-name\": true,\n        \"quotemark\": [true, \"double\"]\n    }\n};\nconst options = {\n    formatter: \"json\",\n    configuration: configuration,\n    rulesDirectory: \"customRules/\",\n    formattersDirectory: \"customFormatters/\"\n};\n\nconst fileContents = fs.readFileSync(fileName, \"utf8\");\nconst linter = new Linter(fileName, fileContents, options);\nconst result = linter.lint();\n```\n\n#### Type Checking\n\nTo enable rules that work with the type checker, a TypeScript program object must be passed to the linter when using the programmatic API. Helper functions are provided to create a program from a `tsconfig.json` file. A project directory can be specified if project files do not lie in the same directory as the `tsconfig.json` file.\n\n```javascript\nconst program = Linter.createProgram(\"tsconfig.json\", \"projectDir/\");\nconst files = Linter.getFileNames(program);\nconst results = files.map(file => {\n    const fileContents = program.getSourceFile(file).getFullText();\n    const linter = new Linter(file, fileContents, options, program);\n    return result.lint();\n});\n```\n\nWhen using the CLI, the `--project` flag will automatically create a program from the specified `tsconfig.json` file. Adding `--type-check` then enables rules that require the type checker.\n\n\nCore Rules\n-----\n<sup>[back to ToC &uarr;](#table-of-contents)</sup>\n\n[See the TSLint website for a list of core rules included in the `tslint` package.]\n(http://palantir.github.io/tslint/rules/)\n\nCore Formatters\n-----\n\nFormatters are used to format the results of the linter before outputting it to stdout or\nthe configured output file. The core formatters are:\n\n- __prose__: human readable (default)\n- __json__: machine readable\n- __verbose__: human readable (includes rule names)\n- __pmd__\n- __msbuild__\n- __checkstyle__\n- __vso__\n\nRule Flags\n-----\n<sup>[back to ToC &uarr;](#table-of-contents)</sup>\n\nYou may enable/disable TSLint or a subset of rules within certain lines of a file with the following comment rule flags:\n\n* `/* tslint:disable */` - Disable all rules for the rest of the file\n* `/* tslint:enable */` - Enable all rules for the rest of the file\n* `/* tslint:disable:rule1 rule2 rule3... */` - Disable the listed rules for the rest of the file\n* `/* tslint:enable:rule1 rule2 rule3... */` - Enable the listed rules for the rest of the file\n* `// tslint:disable-next-line` - Disables all rules for the following line\n* `someCode(); // tslint:disable-line` - Disables all rules for the current line\n* `// tslint:disable-next-line:rule1 rule2 rule3...` - Disables the listed rules for the next line\n* etc.\n\nRules flags enable or disable rules as they are parsed. Disabling an already disabled rule or enabling an already enabled rule has no effect.\n\nFor example, imagine the directive `/* tslint:disable */` on the first line of a file, `/* tslint:enable:ban class-name */` on the 10th line and `/* tslint:enable */` on the 20th. No rules will be checked between the 1st and 10th lines, only the `ban` and `class-name` rules will be checked between the 10th and 20th, and all rules will be checked for the remainder of the file.\n\nCustom Rules\n------------\n<sup>[back to ToC &uarr;](#table-of-contents)</sup>\n\n#### Custom rule sets from Palantir\n\n- [tslint-react](https://github.com/palantir/tslint-react) - Lint rules related to React & JSX.\n\n#### Custom rule sets from the community\n\nIf we don't have all the rules you're looking for, you can either write your own custom rules or use custom rules that others have developed. The repos below are a good source of custom rules:\n\n- [ESLint rules for TSLint](https://github.com/buzinas/tslint-eslint-rules) - Improve your TSLint with the missing ESLint Rules\n- [tslint-microsoft-contrib](https://github.com/Microsoft/tslint-microsoft-contrib) - A set of TSLint rules used on some Microsoft projects\n- [codelyzer](https://github.com/mgechev/codelyzer) - A set of tslint rules for static code analysis of Angular 2 TypeScript projects\n- [vrsource-tslint-rules](https://github.com/vrsource/vrsource-tslint-rules)\n\n#### Writing custom rules\n\nTSLint ships with a set of core rules that can be configured. However, users are also allowed to write their own rules, which allows them to enforce specific behavior not covered by the core of TSLint. TSLint's internal rules are itself written to be pluggable, so adding a new rule is as simple as creating a new rule file named by convention. New rules can be written in either TypeScript or JavaScript; if written in TypeScript, the code must be compiled to JavaScript before invoking TSLint.\n\nRule names are always camel-cased and *must* contain the suffix `Rule`. Let us take the example of how to write a new rule to forbid all import statements (you know, *for science*). Let us name the rule file `noImportsRule.ts`. Rules can be referenced in `tslint.json` in their kebab-case forms, so `\"no-imports\": true` would turn on the rule.\n\nNow, let us first write the rule in TypeScript. A few things to note:\n- We import `tslint/lib/lint` to get the whole `Lint` namespace instead of just the `Linter` class.\n- The exported class must always be named `Rule` and extend from `Lint.Rules.AbstractRule`.\n\n```typescript\nimport * as ts from \"typescript\";\nimport * as Lint from \"tslint/lib/lint\";\n\nexport class Rule extends Lint.Rules.AbstractRule {\n    public static FAILURE_STRING = \"import statement forbidden\";\n\n    public apply(sourceFile: ts.SourceFile): Lint.RuleFailure[] {\n        return this.applyWithWalker(new NoImportsWalker(sourceFile, this.getOptions()));\n    }\n}\n\n// The walker takes care of all the work.\nclass NoImportsWalker extends Lint.RuleWalker {\n    public visitImportDeclaration(node: ts.ImportDeclaration) {\n        // create a failure at the current position\n        this.addFailure(this.createFailure(node.getStart(), node.getWidth(), Rule.FAILURE_STRING));\n\n        // call the base version of this visitor to actually parse this node\n        super.visitImportDeclaration(node);\n    }\n}\n```\n\nGiven a walker, TypeScript's parser visits the AST using the visitor pattern. So the rule walkers only need to override the appropriate visitor methods to enforce its checks. For reference, the base walker can be found in [syntaxWalker.ts](https://github.com/palantir/tslint/blob/master/src/language/walker/syntaxWalker.ts).\n\nWe still need to hook up this new rule to TSLint. First make sure to compile `noImportsRule.ts`:\n\n```bash\ntsc -m commonjs --noImplicitAny noImportsRule.ts node_modules/tslint/lib/tslint.d.ts\n```\n\nThen, if using the CLI, provide the directory that contains this rule as an option to `--rules-dir`. If using TSLint as a library or via `grunt-tslint`, the `options` hash must contain `\"rulesDirectory\": \"...\"`. If you run the linter, you'll see that we have now successfully banned all import statements via TSLint!\n\nFinal notes:\n\n- Core rules cannot be overwritten with a custom implementation.\n- Custom rules can also take in options just like core rules (retrieved via `this.getOptions()`).\n\nCustom Formatters\n-----------------\n<sup>[back to ToC &uarr;](#table-of-contents)</sup>\n\nJust like rules, additional formatters can also be supplied to TSLint via `--formatters-dir` on the CLI or `formattersDirectory` option on the library or `grunt-tslint`. Writing a new formatter is simpler than writing a new rule, as shown in the JSON formatter's code.\n\n```typescript\nimport * as ts from \"typescript\";\nimport * as Lint from \"tslint/lib/lint\";\n\nexport class Formatter extends Lint.Formatters.AbstractFormatter {\n    public format(failures: Lint.RuleFailure[]): string {\n        var failuresJSON = failures.map((failure: Lint.RuleFailure) => failure.toJson());\n        return JSON.stringify(failuresJSON);\n    }\n}\n```\n\nSuch custom formatters can also be written in JavaScript. Formatter files are always named with the suffix `Formatter` and the exported class within the file must be named `Formatter`. A formatter is referenced from TSLint without its suffix.\n\nDevelopment\n-----------\n<sup>[back to ToC &uarr;](#table-of-contents)</sup>\n\n#### Quick Start\n\n```bash\ngit clone git@github.com:palantir/tslint.git\nnpm install\ngrunt\n```\n\n#### `next` branch\n\nThe [`next` branch of this repo](https://github.com/palantir/tslint/tree/next) tracks the latest TypeScript compiler\nnightly release as a `peerDependency`. This allows you to develop the linter and its rules against the latest features of the\nlanguage. Releases from this branch are published to npm with the `next` dist-tag, so you may install the latest dev\nversion of TSLint via `npm install tslint@next`.\n\nCreating a new release\n----------------------\n<sup>[back to ToC &uarr;](#table-of-contents)</sup>\n\n1. Bump the version number in `package.json` and `src/tslint.ts`\n2. Add release notes in `CHANGELOG.md`\n3. Run `grunt` to build the latest sources\n4. Commit with message `Prepare release <version>`\n5. Run `npm publish`\n6. Create a git tag for the new release and push it ([see existing tags here](https://github.com/palantir/tslint/tags))\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/palantir/tslint.git"
  },
  "scripts": {
    "test": "grunt"
  },
  "typescript": {
    "definition": "lib/tslint.d.ts"
  },
  "typings": "./lib/tslint",
  "version": "3.15.1"
}
