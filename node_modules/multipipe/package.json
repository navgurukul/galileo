{
  "_args": [
    [
      {
        "raw": "multipipe@^0.1.2",
        "scope": null,
        "escapedName": "multipipe",
        "name": "multipipe",
        "rawSpec": "^0.1.2",
        "spec": ">=0.1.2 <0.2.0",
        "type": "range"
      },
      "/home/arch/galileo/node_modules/gulp-util"
    ]
  ],
  "_from": "multipipe@>=0.1.2 <0.2.0",
  "_id": "multipipe@0.1.2",
  "_inCache": true,
  "_location": "/multipipe",
  "_nodeVersion": "0.10.32",
  "_npmUser": {
    "name": "juliangruber",
    "email": "julian@juliangruber.com"
  },
  "_npmVersion": "2.1.5",
  "_phantomChildren": {
    "core-util-is": "1.0.2",
    "inherits": "2.0.3"
  },
  "_requested": {
    "raw": "multipipe@^0.1.2",
    "scope": null,
    "escapedName": "multipipe",
    "name": "multipipe",
    "rawSpec": "^0.1.2",
    "spec": ">=0.1.2 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gulp-util"
  ],
  "_resolved": "https://registry.npmjs.org/multipipe/-/multipipe-0.1.2.tgz",
  "_shasum": "2a8f2ddf70eed564dff2d57f1e1a137d9f05078b",
  "_shrinkwrap": null,
  "_spec": "multipipe@^0.1.2",
  "_where": "/home/arch/galileo/node_modules/gulp-util",
  "bugs": {
    "url": "https://github.com/juliangruber/multipipe/issues"
  },
  "dependencies": {
    "duplexer2": "0.0.2"
  },
  "description": "pipe streams with centralized error handling",
  "devDependencies": {
    "mocha": "~1.17.0"
  },
  "directories": {},
  "dist": {
    "shasum": "2a8f2ddf70eed564dff2d57f1e1a137d9f05078b",
    "tarball": "https://registry.npmjs.org/multipipe/-/multipipe-0.1.2.tgz"
  },
  "gitHead": "df434f568b85de914ee7f6ad714343b8736e3315",
  "homepage": "https://github.com/juliangruber/multipipe#readme",
  "license": "MIT",
  "maintainers": [
    {
      "name": "juliangruber",
      "email": "julian@juliangruber.com"
    }
  ],
  "name": "multipipe",
  "optionalDependencies": {},
  "readme": "# multipipe\n\nA better `Stream#pipe` that creates duplex streams and lets you handle errors in one place.\n\n[![build status](https://secure.travis-ci.org/segmentio/multipipe.png)](http://travis-ci.org/segmentio/multipipe)\n\n## Example\n\n```js\nvar pipe = require('multipipe');\n\n// pipe streams\nvar stream = pipe(streamA, streamB, streamC);\n\n// centralized error handling\nstream.on('error', fn);\n\n// creates a new stream\nsource.pipe(stream).pipe(dest);\n\n// optional callback on finish or error\npipe(streamA, streamB, streamC, function(err){\n  // ...\n});\n```\n\n## Duplex streams\n\n  Write to the pipe and you'll really write to the first stream, read from the pipe and you'll read from the last stream.\n\n```js\nvar stream = pipe(a, b, c);\n\nsource\n  .pipe(stream)\n  .pipe(destination);\n```\n\n  In this example the flow of data is:\n\n  * source ->\n  * a ->\n  * b ->\n  * c ->\n  * destination\n\n## Error handling\n\n  Each `pipe` forwards the errors the streams it wraps emit, so you have one central place to handle errors:\n\n```js\nvar stream = pipe(a, b, c);\n\nstream.on('error', function(err){\n  // called three times\n});\n\na.emit('error', new Error);\nb.emit('error', new Error);\nc.emit('error', new Error);\n```\n\n## API\n\n### pipe(stream, ...)\n\nPass a variable number of streams and each will be piped to the next one.\n\nA stream will be returned that wraps passed in streams in a way that errors will be forwarded and you can write to and/or read from it.\n\nPass a function as last argument to be called on `error` or `finish` of the last stream.\n\n## Installation\n\n```bash\n$ npm install multipipe\n```\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Segment.io Inc. &lt;friends@segment.io&gt;\nCopyright (c) 2014 Julian Gruber &lt;julian@juliangruber.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/juliangruber/multipipe.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.1.2"
}
