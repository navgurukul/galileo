// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-sequelize/e12e516e5de4d9b95e5a44be3f16648a1ba74eed/lib/utils/parameter-validator.d.ts
declare module '~sequelize/lib/utils/parameter-validator' {
function check(value: any, expectation: any, options?: {
  deprecated?: boolean;
  index?: any;
  method?: any;
  optional?: boolean;
}): boolean;

export = check;
}
declare module 'sequelize/lib/utils/parameter-validator' {
import main = require('~sequelize/lib/utils/parameter-validator');
export = main;
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-sequelize/e12e516e5de4d9b95e5a44be3f16648a1ba74eed/lib/utils.d.ts
declare module '~sequelize/lib/utils' {

import parameterValidator = require('~sequelize/lib/utils/parameter-validator');

export type Primitive = 'string'|'number'|'boolean';

export function useInflection(inflection: any): void;

export function camelizeIf(string: string, condition?: boolean): string;
export function underscoredIf(string: string, condition?: boolean): string;
export function isPrimitive(val: any): val is Primitive;

/** Same concept as _.merge, but don't overwrite properties that have already been assigned */
export function mergeDefaults(a: any, b: any): any;
export function lowercaseFirst(s: string): string;
export function uppercaseFirst(s: string): string;
export function spliceStr(str: string, index: number, count: number, add: string): string;
export function camelize(str: string): string;
export function format(arr: any[], dialect: string): string;
export function formatNamedParameters(sql: string, parameters: any, dialect: string): string;
export function cloneDeep<T>(obj: T, fn?: Function): T;

/** Expand and normalize finder options */
export function mapFinderOptions(options: any, Model: any): any;

/* Used to map field names in attributes and where conditions */
export function mapOptionFieldNames(options: any, Model: any): any;

export function mapWhereFieldNames(attributes: any, Model: any): any;
/** Used to map field names in values */
export function mapValueFieldNames(dataValues: any, fields: any, Model: any): any;

export function isColString(value: string): boolean;
export function argsArePrimaryKeys(args: any, primaryKeys: any): boolean;
export function canTreatArrayAsAnd(arr: any[]): boolean;
export function combineTableNames(tableName1: string, tableName2: string): string;

export function singularize(s: string): string;
export function pluralize(s: string): string;

export function removeCommentsFromFunctionString(s: string): string;
export function toDefaultValue(value: any): any;


/**
 * Determine if the default value provided exists and can be described
 * in a db schema using the DEFAULT directive.
 *
 * @param  {*} value Any default value.
 * @return {boolean} yes / no.
 */
export function defaultValueSchemable(value: any): boolean;

export function defaultValueSchemable(hash: any, omitNull: any, options: any): any;
export function inherit(SubClass: any, SuperClass: any): any;
export function stack(): string;
export function sliceArgs(args: any, begin: any): any[];
export function now(dialect: string): Date;
export function tick(func: Function): void;

// Note: Use the `quoteIdentifier()` and `escape()` methods on the
// `QueryInterface` instead for more portable code.
export const TICK_CHAR: string;
export function addTicks(s: string, tickChar?: string): string;
export function removeTicks(s: string, tickChar?: string): string;

/*
 * Utility functions for representing SQL functions, and columns that should be escaped.
 * Please do not use these functions directly, use Sequelize.fn and Sequelize.col instead.
 */
export class Fn {
  private _isSequelizeMethod: boolean;
  constructor(fn: any, args: any);
  clone(): this;
}

export class Col {
  col: string;
  private _isSequelizeMethod: boolean;
  constructor(col: string);
}

export class Cast {
  val: any;
  type: string;
  private _isSequelizeMethod: boolean;
  constructor(val: any, type?: string);
}

export class Literal {
  val: any;
  private _isSequelizeMethod: boolean;
  constructor(val: any);
}

export class Json {
  conditions: Object;
  path: string;
  value: string | number | boolean;
  private _isSequelizeMethod: boolean;
  constructor(conditionsOrPath: string | Object, value?: string | number | boolean);
}

export class Where {
  attribute: Object;
  comparator: string;
  logic: string | Object;
  private _isSequelizeMethod: boolean;
  constructor(attr: Object, comparator: string, logic: string | Object);
  constructor(attr: Object, logic: string | Object);
}

export const validateParameter: typeof parameterValidator;
export function formatReferences(obj: any): any;

export {Promise as Promise} from '~sequelize/lib/promise';
}
declare module 'sequelize/lib/utils' {
export * from '~sequelize/lib/utils';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-sequelize/e12e516e5de4d9b95e5a44be3f16648a1ba74eed/lib/transaction.d.ts
declare module '~sequelize/lib/transaction' {

import {Promise} from '~sequelize/lib/promise';
import {Sequelize} from '~sequelize/lib/sequelize';

/**
 * The transaction object is used to identify a running transaction. It is created by calling
 * `Sequelize.transaction()`.
 *
 * To run a query under a transaction, you should pass the transaction in the options object.
 */
export class Transaction {

  constructor(sequelize: Sequelize, options: TransactionOptions);

  /**
   * Commit the transaction
   */
  commit(): Promise<void>;

  /**
   * Rollback (abort) the transaction
   */
  rollback(): Promise<void>;

}

export type TransactionType = 'DEFERRED' | 'IMMEDIATE' | 'EXCLUSIVE';
export const TYPES: {
  DEFERRED: 'DEFERRED',
  IMMEDIATE: 'IMMEDIATE',
  EXCLUSIVE: 'EXCLUSIVE'
}

/**
 * Isolations levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.
 * Default to `REPEATABLE_READ` but you can override the default isolation level by passing `options.isolationLevel` in `new Sequelize`.
 *
 * The possible isolations levels to use when starting a transaction:
 *
 * ```js
 * {
 *   READ_UNCOMMITTED: "READ UNCOMMITTED",
 *   READ_COMMITTED: "READ COMMITTED",
 *   REPEATABLE_READ: "REPEATABLE READ",
 *   SERIALIZABLE: "SERIALIZABLE"
 * }
 * ```
 *
 * Pass in the desired level as the first argument:
 *
 * ```js
 * return sequelize.transaction({isolationLevel: Sequelize.Transaction.SERIALIZABLE}, transaction => {
 *
 *  // your transactions
 *
 * }).then(result => {
 *   // transaction has been committed. Do something after the commit if required.
 * }).catch(err => {
 *   // do something with the err.
 * });
 * ```
 */
export const ISOLATION_LEVELS: {
  READ_UNCOMMITTED: 'READ UNCOMMITTED',
  READ_COMMITTED: 'READ COMMITTED',
  REPEATABLE_READ: 'REPEATABLE READ',
  SERIALIZABLE: 'SERIALIZABLE'
};

/**
 * Possible options for row locking. Used in conjunction with `find` calls:
 *
 * ```js
 * t1 // is a transaction
 * t1.LOCK.UPDATE,
 * t1.LOCK.SHARE,
 * t1.LOCK.KEY_SHARE, // Postgres 9.3+ only
 * t1.LOCK.NO_KEY_UPDATE // Postgres 9.3+ only
 * ```
 *
 * Usage:
 * ```js
 * t1 // is a transaction
 * Model.findAll({
 *   where: ...,
 *   transaction: t1,
 *   lock: t1.LOCK...
 * });
 * ```
 *
 * Postgres also supports specific locks while eager loading by using OF:
 * ```js
 * UserModel.findAll({
 *   where: ...,
 *   include: [TaskModel, ...],
 *   transaction: t1,
 *   lock: {
 *     level: t1.LOCK...,
 *     of: UserModel
 *   }
 * });
 * ```
 * UserModel will be locked but TaskModel won't!
 *
 * @property LOCK
 */
export const LOCK: {
  UPDATE: 'UPDATE',
  SHARE: 'SHARE',
  KEY_SHARE: 'KEY SHARE',
  NO_KEY_UPDATE: 'NO KEY UPDATE'
}
export type TransactionLock = 'UDPATE' | 'SHARE' | 'KEY SHARE' | 'NO KEY UPDATE';

/**
 * Options provided when the transaction is created
 */
export interface TransactionOptions {

  autocommit?: boolean;

  /**
   *  See `Sequelize.Transaction.ISOLATION_LEVELS` for possible options
   */
  isolationLevel?: string;

  /**
   * A function that gets executed while running the query to log the sql.
   */
  logging?: Function;

  type?: TransactionType;
  deferrable?: string;
}

export default Transaction;
}
declare module 'sequelize/lib/transaction' {
export * from '~sequelize/lib/transaction';
export { default } from '~sequelize/lib/transaction';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-sequelize/e12e516e5de4d9b95e5a44be3f16648a1ba74eed/lib/query-interface.d.ts
declare module '~sequelize/lib/query-interface' {

import {Sequelize} from '~sequelize/lib/sequelize';
import {Promise} from '~sequelize/lib/promise';
import {ModelAttributes, ModelAttributeColumnOptions, Model} from '~sequelize/lib/model';
import {Transaction} from '~sequelize/lib/transaction';
import {DataType} from '~sequelize/lib/data-types';

/**
 * Interface for query options
 */
export interface QueryOptions {

  /**
   * If true, sequelize will not try to format the results of the query, or build an instance of a model from
   * the result
   */
  raw?: boolean;

  /**
   * The transaction that the query should be executed under
   */
  transaction?: Transaction;

  /**
   * The type of query you are executing. The query type affects how results are formatted before they are
   * passed back. The type is a string, but `Sequelize.QueryTypes` is provided as convenience shortcuts.
   */
  type?: string;

  /**
   * If true, transforms objects with `.` separated property names into nested objects using
   * [dottie.js](https://github.com/mickhansen/dottie.js). For example { 'user.username': 'john' } becomes
   * { user: { username: 'john' }}. When `nest` is true, the query type is assumed to be `'SELECT'`,
   * unless otherwise specified
   *
   * Defaults to false
   */
  nest?: boolean;

  /**
   * Sets the query type to `SELECT` and return a single row
   */
  plain?: boolean;

  /**
   * Either an object of named parameter replacements in the format `:param` or an array of unnamed
   * replacements to replace `?` in your SQL.
   */
  replacements?: Object | Array<string>;

  /**
   * Force the query to use the write pool, regardless of the query type.
   *
   * Defaults to false
   */
  useMaster?: boolean;

  /**
   * A function that gets executed while running the query to log the sql.
   */
  logging?: Function

  /**
   * A sequelize instance used to build the return instance
   */
  instance?: Model;

  /**
   * A sequelize model used to build the returned model instances (used to be called callee)
   */
  model?: typeof Model;

  // TODO: force, cascade

}

/**
  * Most of the methods accept options and use only the logger property of the options. That's why the most used
  * interface type for options in a method is separated here as another interface.
  */
export interface QueryInterfaceOptions {

  /**
    * A function that gets executed while running the query to log the sql.
    */
  logging?: boolean | Function;

}

export interface QueryInterfaceCreateTableOptions extends QueryInterfaceOptions {
  engine?: string;
  charset?: string;
}

export interface QueryInterfaceDropTableOptions extends QueryInterfaceOptions {
  cascade?: boolean;
  force?: boolean;
}

export interface QueryInterfaceDropAllTablesOptions extends QueryInterfaceOptions {
  skip?: string[];
}

export interface QueryInterfaceIndexOptions extends QueryInterfaceOptions {
  indicesType?: 'UNIQUE'|'FULLTEXT'|'SPATIAL';

  /** The name of the index. Default is __ */
  indexName?: string;

  /** For FULLTEXT columns set your parser */
  parser?: string;

  /** Set a type for the index, e.g. BTREE. See the documentation of the used dialect */
  indexType?: string;
}

/**
 * The interface that Sequelize uses to talk to all databases.
 *
 * This interface is available through sequelize.QueryInterface. It should not be commonly used, but it's
 * referenced anyway, so it can be used.
 */
export class QueryInterface {

  /**
   * Returns the dialect-specific sql generator.
   *
   * We don't have a definition for the QueryGenerator, because I doubt it is commonly in use separately.
   */
  QueryGenerator: any;

  /**
   * Returns the current sequelize instance.
   */
  sequelize: Sequelize;

  constructor(sequelize: Sequelize);

  /**
   * Queries the schema (table list).
   *
   * @param schema The schema to query. Applies only to Postgres.
   */
  createSchema(schema?: string, options?: QueryInterfaceOptions): Promise<void>;

  /**
   * Drops the specified schema (table).
   *
   * @param schema The schema to query. Applies only to Postgres.
   */
  dropSchema(schema?: string, options?: QueryInterfaceOptions): Promise<void>;

  /**
   * Drops all tables.
   */
  dropAllSchemas(options?: QueryInterfaceDropAllTablesOptions): Promise<void>;

  /**
   * Queries all table names in the database.
   *
   * @param options
   */
  showAllSchemas(options?: QueryOptions): Promise<Object>;

  /**
   * Return database version
   */
  databaseVersion(options?: QueryInterfaceOptions): Promise<string>;

  /**
   * Creates a table with specified attributes.
   *
   * @param tableName     Name of table to create
   * @param attributes    Hash of attributes, key is attribute name, value is data type
   * @param options       Table options.
   */
  createTable(tableName: string | { schema?: string, tableName?: string }, attributes: ModelAttributes,
    options?: QueryInterfaceCreateTableOptions): Promise<void>;

  /**
   * Drops the specified table.
   *
   * @param tableName Table name.
   * @param options   Query options, particularly "force".
   */
  dropTable(tableName: string, options?: QueryInterfaceDropTableOptions): Promise<void>;

  /**
   * Drops all tables.
   *
   * @param options
   */
  dropAllTables(options?: QueryInterfaceDropTableOptions): Promise<void>;

  /**
   * Drops all defined enums
   *
   * @param options
   */
  dropAllEnums(options?: QueryOptions): Promise<void>;

  /**
   * Renames a table
   */
  renameTable(before: string, after: string, options?: QueryInterfaceOptions): Promise<void>;

  /**
   * Returns all tables
   */
  showAllTables(options?: QueryOptions): Promise<Array<string>>;

  /**
   * Describe a table
   */
  describeTable(tableName: string | { schema?: string, tableName?: string },
    options?: string | { schema?: string, schemaDelimeter?: string, logging?: boolean | Function }): Promise<Object>;

  /**
   * Adds a new column to a table
   */
  addColumn(table: string, key: string, attribute: ModelAttributeColumnOptions | DataType,
    options?: QueryInterfaceOptions): Promise<void>;

  /**
   * Removes a column from a table
   */
  removeColumn(table: string, attribute: string, options?: QueryInterfaceOptions): Promise<void>;

  /**
   * Changes a column
   */
  changeColumn(tableName: string | { schema?: string, tableName?: string }, attributeName: string,
    dataTypeOrOptions?: DataType | ModelAttributeColumnOptions,
    options?: QueryInterfaceOptions): Promise<void>;

  /**
   * Renames a column
   */
  renameColumn(tableName: string | { schema?: string, tableName?: string }, attrNameBefore: string,
    attrNameAfter: string,
    options?: QueryInterfaceOptions): Promise<void>;

  /**
   * Adds a new index to a table
   */
  addIndex(tableName: string, attributes: string[], options?: QueryInterfaceIndexOptions,
    rawTablename?: string): Promise<void>;
  addIndex(tableName: string, options: QueryInterfaceIndexOptions & { fields: string[] },
    rawTablename?: string): Promise<void>;

  /**
   * Removes an index of a table
   */
  removeIndex(tableName: string, indexName: string,
    options?: QueryInterfaceIndexOptions): Promise<void>;
  removeIndex(tableName: string, attributes: string[],
    options?: QueryInterfaceIndexOptions): Promise<void>;

  /**
   * Shows the index of a table
   */
  showIndex(tableName: string | Object, options?: QueryOptions): Promise<Object>;

  /**
   * Put a name to an index
   */
  nameIndexes(indexes: Array<string>, rawTablename: string): Promise<void>;

  /**
   * Returns all foreign key constraints of a table
   */
  getForeignKeysForTables(tableNames: string, options?: QueryInterfaceOptions): Promise<Object>;

  /**
   * Inserts a new record
   */
  insert(instance: Model, tableName: string, values: Object,
    options?: QueryOptions): Promise<Object>;

  /**
   * Inserts or Updates a record in the database
   */
  upsert(tableName: string, values: Object, updateValues: Object, model: typeof Model,
    options?: QueryOptions): Promise<Object>;

  /**
   * Inserts multiple records at once
   */
  bulkInsert(tableName: string, records: Array<Object>, options?: QueryOptions,
    attributes?: Array<string> | string): Promise<Object>;

  /**
   * Updates a row
   */
  update(instance: Model, tableName: string, values: Object, identifier: Object,
    options?: QueryOptions): Promise<Object>;

  /**
   * Updates multiple rows at once
   */
  bulkUpdate(tableName: string, values: Object, identifier: Object, options?: QueryOptions,
    attributes?: Array<string> | string): Promise<Object>;

  /**
   * Deletes a row
   */
  delete(instance: Model, tableName: string, identifier: Object,
    options?: QueryOptions): Promise<Object>;

  /**
   * Deletes multiple rows at once
   */
  bulkDelete(tableName: string, identifier: Object, options?: QueryOptions,
    model?: typeof Model): Promise<Object>;

  /**
   * Returns selected rows
   */
  select(model: typeof Model, tableName: string, options?: QueryOptions): Promise<Array<Object>>;

  /**
   * Increments a row value
   */
  increment(instance: Model, tableName: string, values: Object, identifier: Object,
    options?: QueryOptions): Promise<Object>;

  /**
   * Selects raw without parsing the string into an object
   */
  rawSelect(tableName: string, options: QueryOptions, attributeSelector: string | Array<string>,
    model?: typeof Model): Promise<Array<string>>;

  /**
   * Postgres only. Creates a trigger on specified table to call the specified function with supplied
   * parameters.
   */
  createTrigger(tableName: string, triggerName: string, timingType: string, fireOnArray: Array<any>,
    functionName: string, functionParams: Array<any>, optionsArray: Array<string>,
    options?: QueryInterfaceOptions): Promise<void>;

  /**
   * Postgres only. Drops the specified trigger.
   */
  dropTrigger(tableName: string, triggerName: string, options?: QueryInterfaceOptions): Promise<void>;

  /**
   * Postgres only. Renames a trigger
   */
  renameTrigger(tableName: string, oldTriggerName: string, newTriggerName: string,
    options?: QueryInterfaceOptions): Promise<void>;

  /**
   * Postgres only. Create a function
   */
  createFunction(functionName: string, params: Array<any>, returnType: string, language: string,
    body: string, options?: QueryOptions): Promise<void>;

  /**
   * Postgres only. Drops a function
   */
  dropFunction(functionName: string, params: Array<any>,
    options?: QueryInterfaceOptions): Promise<void>;

  /**
   * Postgres only. Rename a function
   */
  renameFunction(oldFunctionName: string, params: Array<any>, newFunctionName: string,
    options?: QueryInterfaceOptions): Promise<void>;

  /**
   * Escape an identifier (e.g. a table or attribute name). If force is true, the identifier will be quoted
   * even if the `quoteIdentifiers` option is false.
   */
  quoteIdentifier(identifier: string, force: boolean): string;

  /**
   * Escape a table name
   */
  quoteTable(identifier: string): string;

  /**
   * Split an identifier into .-separated tokens and quote each part. If force is true, the identifier will be
   * quoted even if the `quoteIdentifiers` option is false.
   */
  quoteIdentifiers(identifiers: string, force: boolean): string;

  /**
   * Escape a value (e.g. a string, number or date)
   */
  escape(value?: string | number | Date): string;

  /**
   * Set option for autocommit of a transaction
   */
  setAutocommit(transaction: Transaction, value: boolean, options?: QueryOptions): Promise<void>;

  /**
   * Set the isolation level of a transaction
   */
  setIsolationLevel(transaction: Transaction, value: string, options?: QueryOptions): Promise<void>;

  /**
   * Begin a new transaction
   */
  startTransaction(transaction: Transaction, options?: QueryOptions): Promise<void>;

  /**
   * Defer constraints
   */
  deferConstraints(transaction: Transaction, options?: QueryOptions): Promise<void>;

  /**
   * Commit an already started transaction
   */
  commitTransaction(transaction: Transaction, options?: QueryOptions): Promise<void>;

  /**
   * Rollback ( revert ) a transaction that has'nt been commited
   */
  rollbackTransaction(transaction: Transaction, options?: QueryOptions): Promise<void>;

}
}
declare module 'sequelize/lib/query-interface' {
export * from '~sequelize/lib/query-interface';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-sequelize/e12e516e5de4d9b95e5a44be3f16648a1ba74eed/lib/data-types.d.ts
declare module '~sequelize/lib/data-types' {
/**
 * The datatypes are used when defining a new model using `Sequelize.define`, like this:
 * ```js
 * sequelize.define('model', {
 *   column: DataTypes.INTEGER
 * })
 * ```
 * When defining a model you can just as easily pass a string as type, but often using the types defined here is beneficial. For example, using `DataTypes.BLOB`, mean
 * that that column will be returned as an instance of `Buffer` when being fetched by sequelize.
 *
 * Some data types have special properties that can be accessed in order to change the data type.
 * For example, to get an unsigned integer with zerofill you can do `DataTypes.INTEGER.UNSIGNED.ZEROFILL`.
 * The order you access the properties in do not matter, so `DataTypes.INTEGER.ZEROFILL.UNSIGNED` is fine as well. The available properties are listed under each data type.
 *
 * To provide a length for the data type, you can invoke it like a function: `INTEGER(2)`
 *
 * Three of the values provided here (`NOW`, `UUIDV1` and `UUIDV4`) are special default values, that should not be used to define types. Instead they are used as shorthands for
 * defining default values. For example, to get a uuid field with a default value generated following v1 of the UUID standard:
 * ```js
 * sequelize.define('model', {
 *   uuid: {
 *     type: DataTypes.UUID,
 *     defaultValue: DataTypes.UUIDV1,
 *     primaryKey: true
 *   }
 * })
 * ```
 * There may be times when you want to generate your own UUID conforming to some other algorithm. This is accomplised
 * using the defaultValue property as well, but instead of specifying one of the supplied UUID types, you return a value
 * from a function.
 * ```js
 * sequelize.define('model', {
 *   uuid: {
 *     type: DataTypes.UUID,
 *     defaultValue: function() {
 *       return generateMyId()
 *     },
 *     primaryKey: true
 *   }
 * })
 * ```
 */

/**
 *
 */
export type DataType = string | AbstractDataTypeConstructor | AbstractDataType;

export const ABSTRACT: AbstractDataTypeConstructor;

interface AbstractDataTypeConstructor {
  new (options: Object): AbstractDataType;
  (options: Object): AbstractDataType;
  key: string;
  warn(link: string, text: string): void;
}

export interface AbstractDataType {
  key: string;
  dialectTypes: string;
  toSql(): string;
  stringify(value: any, options?: Object): string;
  toString(options: Object): string;
}

/**
 * A variable length string. Default length 255
 *
 * Available properties: `BINARY`
 *
 * @property STRING
 */
export const STRING: StringDataTypeConstructor;

interface StringDataTypeConstructor extends AbstractDataTypeConstructor {
  new (length?: number, binary?: boolean): StringDataType;
  new (options?: StringDataTypeOptions): StringDataType;
  (length?: number, binary?: boolean): StringDataType;
  (options?: StringDataTypeOptions): StringDataType;
}

export interface StringDataType extends AbstractDataType {
  options: StringDataTypeOptions;
  BINARY: this;
  validate(value: any): boolean;
}

export interface StringDataTypeOptions {
  length?: number;
  binary?: boolean;
}

/**
 * A fixed length string. Default length 255
 *
 * Available properties: `BINARY`
 *
 */
export const CHAR: CharDataTypeConstructor;

interface CharDataTypeConstructor extends StringDataTypeConstructor {
  new (length?: number, binary?: boolean): CharDataType;
  new (options?: CharDataTypeOptions): CharDataType;
  (length?: number, binary?: boolean): CharDataType;
  (options?: CharDataTypeOptions): CharDataType;
}

export interface CharDataType extends StringDataType {
  options: CharDataTypeOptions;
}

export interface CharDataTypeOptions extends StringDataTypeOptions {}

/**
 * An (un)limited length text column. Available lengths: `tiny`, `medium`, `long`
 */
export const TEXT: TextDataTypeConstructor;

interface TextDataTypeConstructor extends AbstractDataTypeConstructor {
  new (length?: number): TextDataType;
  (options?: TextDataTypeOptions): TextDataType;
}

export interface TextDataType extends AbstractDataType {
  options: TextDataTypeOptions;
  validate(value: any): boolean;
}

export interface TextDataTypeOptions {
 length?: number;
}

export const NUMBER: NumberDataTypeConstructor;

interface NumberDataTypeConstructor extends AbstractDataTypeConstructor {
  new (options?: NumberDataTypeOptions): NumberDataType;
  (options?: NumberDataTypeOptions): NumberDataType;
  options: NumberDataTypeOptions;
  validate(value: any): boolean;
  UNSIGNED: this;
  ZEROFILL: this;
}

export interface NumberDataType extends AbstractDataType {
  options: NumberDataTypeOptions;
  validate(value: any): boolean;
  UNSIGNED: this;
  ZEROFILL: this;
}

export interface NumberDataTypeOptions {
  length?: number;
  zerofill?: boolean;
  decimals?: number;
  precision?: number;
  scale?: number;
  unsigned?: boolean;
}

/**
 * A 32 bit integer.
 *
 * Available properties: `UNSIGNED`, `ZEROFILL`
 *
 */
export const INTEGER: IntegerDataTypeConstructor;

interface IntegerDataTypeConstructor extends NumberDataTypeConstructor {
  new (options?: NumberDataTypeOptions): IntegerDataType;
  (options?: NumberDataTypeOptions): IntegerDataType;
}

export interface IntegerDataType extends NumberDataType {
  options: NumberDataTypeOptions;
}

export interface IntegerDataTypeOptions {
  length?: number;
}

/**
 * A 64 bit integer.
 *
 * Available properties: `UNSIGNED`, `ZEROFILL`
 *
 */
export const BIGINT: BigIntDataTypeConstructor;

interface BigIntDataTypeConstructor extends NumberDataTypeConstructor {
  new (options?: BigIntDataTypeOptions): BigIntDataType;
  (options?: BigIntDataTypeOptions): BigIntDataType;
}

export interface BigIntDataType extends NumberDataType {
  options: BigIntDataTypeOptions;
}

export interface BigIntDataTypeOptions {
  length?: number;
}

/**
 * Floating point number (4-byte precision). Accepts one or two arguments for precision
 */
 export const FLOAT: FloatDataTypeConstructor;

 interface FloatDataTypeConstructor extends NumberDataTypeConstructor {
   new (length?: number, decimals?: number): FloatDataType;
   new (options?: FloatDataTypeOptions): FloatDataType;
   (length?: number, decimals?: number): FloatDataType;
   (options?: FloatDataTypeOptions): FloatDataType;
 }

 export interface FloatDataType extends NumberDataType {
   options: FloatDataTypeOptions;
 }

 export interface FloatDataTypeOptions {
   length?: number;
   decimals?: number;
 }


 /**
  * Floating point number (4-byte precision). Accepts one or two arguments for precision
  */
export const REAL: RealDataTypeConstructor;

interface RealDataTypeConstructor extends NumberDataTypeConstructor {
  new (length?: number, decimals?: number): RealDataType;
  new (options?: RealDataTypeOptions): RealDataType;
  (length?: number, decimals?: number): RealDataType;
  (options?: RealDataTypeOptions): RealDataType;
}

export interface RealDataType extends NumberDataType {
  options: RealDataTypeOptions;
}

export interface RealDataTypeOptions {
  length?: number;
  decimals?: number;
}


/**
 * Floating point number (8-byte precision). Accepts one or two arguments for precision
 */
export const DOUBLE: DoubleDataTypeConstructor;

interface DoubleDataTypeConstructor extends NumberDataTypeConstructor {
  new (length?: number, decimals?: number): DoubleDataType;
  new (options?: DoubleDataTypeOptions): DoubleDataType;
  (length?: number, decimals?: number): DoubleDataType;
  (options?: DoubleDataTypeOptions): DoubleDataType;
}

export interface DoubleDataType extends NumberDataType {
  options: DoubleDataTypeOptions;
}

export interface DoubleDataTypeOptions {
  length?: number;
  decimals?: number;
}

/**
 * Decimal number. Accepts one or two arguments for precision
 */
export const DECIMAL: DecimalDataTypeConstructor;

interface DecimalDataTypeConstructor extends NumberDataTypeConstructor {
  new (precision?: number, scale?: number): DecimalDataType;
  new (options?: DecimalDataTypeOptions): DecimalDataType;
  (precision?: number, scale?: number): DecimalDataType;
  (options?: DecimalDataTypeOptions): DecimalDataType;
  PRECISION: this;
  SCALE: this;
}

export interface DecimalDataType extends NumberDataType {
  options: DecimalDataTypeOptions;
}

export interface DecimalDataTypeOptions {
  precision?: number;
  scale?: number;
}

/**
 * A boolean / tinyint column, depending on dialect
 */
export const BOOLEAN: AbstractDataTypeConstructor;

/**
 * A time column
 */
export const TIME: AbstractDataTypeConstructor;

/**
 * A datetime column
 */
export const DATE: DateDataTypeConstructor;

interface DateDataTypeConstructor extends AbstractDataTypeConstructor {
  new (length?: any): DateDataType;
  new (options?: DateDataTypeOptions): DateDataType;
  (length?: any): DateDataType;
  (options?: DateDataTypeOptions): DateDataType;
}

export interface DateDataType extends AbstractDataTypeConstructor {
  options: DateDataTypeOptions;
}

export interface DateDataTypeOptions {
  length?: any;
}

/**
 * A date only column
 */
export const DATEONLY: DateOnlyDataTypeConstructor;

interface DateOnlyDataTypeConstructor extends AbstractDataTypeConstructor {
  new (length: any): DateOnlyDataType;
  new (options: DateOnlyDataTypeOptions): DateOnlyDataType;
  (length: any): DateOnlyDataType;
  (options: DateOnlyDataTypeOptions): DateOnlyDataType;
}

export interface DateOnlyDataType extends AbstractDataType {
  options: DateOnlyDataTypeOptions;
}

export interface DateOnlyDataTypeOptions {
  length?: any;
}

/**
 * A key / value column. Only available in postgres.
 */
export const HSTORE: AbstractDataTypeConstructor;

/**
 * A JSON string column. Only available in postgres.
 */
export const JSON: AbstractDataTypeConstructor;

/**
 * A pre-processed JSON data column. Only available in postgres.
 */
export const JSONB: AbstractDataTypeConstructor;

/**
 * A default value of the current timestamp
 */
export const NOW: AbstractDataTypeConstructor;

/**
 * Binary storage. Available lengths: `tiny`, `medium`, `long`
 */
export const BLOB: BlobDataTypeConstructor;

interface BlobDataTypeConstructor extends AbstractDataTypeConstructor {
  new (length?: number): BlobDataType;
  new (options?: BlobDataTypeOptions): BlobDataType;
  (length?: number): BlobDataType;
  (options?: BlobDataTypeOptions): BlobDataType;
}

export interface BlobDataType extends AbstractDataType {
  options: BlobDataTypeOptions;
  escape: boolean;
}

export interface BlobDataTypeOptions {
  length?: number;
  escape?: boolean;
}

/**
 * Range types are data types representing a range of values of some element type (called the range's subtype).
 * Only available in postgres.
 *
 * See [Postgres documentation](http://www.postgresql.org/docs/9.4/static/rangetypes.html) for more details
 */
export const RANGE: RangeDataTypeConstructor;

export type RangeableDataType = IntegerDataTypeConstructor | IntegerDataType | BigIntDataTypeConstructor | BigIntDataType
  | DecimalDataTypeConstructor | DecimalDataType | DateOnlyDataTypeConstructor | DateOnlyDataType | DateDataTypeConstructor | DateDataType;

interface RangeDataTypeConstructor extends AbstractDataTypeConstructor {
  new <T extends RangeableDataType>(subtype?: T): RangeDataType<T>;
  new <T extends RangeableDataType>(options: RangeDataTypeOptions<T>): RangeDataType<T>;
  <T extends RangeableDataType>(subtype?: T): RangeDataType<T>;
  <T extends RangeableDataType>(options: RangeDataTypeOptions<T>): RangeDataType<T>;
}

export interface RangeDataType<T extends RangeableDataType> extends AbstractDataType {
  options: RangeDataTypeOptions<T>;
}

export interface RangeDataTypeOptions<T extends RangeableDataType> {
  subtype?: T;
}

/**
 * A column storing a unique universal identifier. Use with `UUIDV1` or `UUIDV4` for default values.
 */
export const UUID: AbstractDataTypeConstructor;

/**
 * A default unique universal identifier generated following the UUID v1 standard
 */
export const UUIDV1: AbstractDataTypeConstructor;

/**
 * A default unique universal identifier generated following the UUID v4 standard
 */
export const UUIDV4: AbstractDataTypeConstructor;

/**
 * A virtual value that is not stored in the DB. This could for example be useful if you want to provide a default value in your model that is returned to the user but not stored in the DB.
 *
 * You could also use it to validate a value before permuting and storing it. Checking password length before hashing it for example:
 * ```js
 * sequelize.define('user', {
 *   password_hash: DataTypes.STRING,
 *   password: {
 *     type: DataTypes.VIRTUAL,
 *     set: function (val) {
 *       this.setDataValue('password', val); // Remember to set the data value, otherwise it won't be validated
 *       this.setDataValue('password_hash', this.salt + val);
 *     },
 *     validate: {
 *       isLongEnough: function (val) {
 *         if (val.length < 7) {
 *           throw new Error("Please choose a longer password")
 *         }
 *       }
 *     }
 *   }
 * })
 * ```
 *
 * VIRTUAL also takes a return type and dependency fields as arguments
 * If a virtual attribute is present in `attributes` it will automatically pull in the extra fields as well.
 * Return type is mostly useful for setups that rely on types like GraphQL.
 * ```js
 * {
 *   active: {
 *     type: new DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['createdAt']),
 *     get: function() {
 *       return this.get('createdAt') > Date.now() - (7 * 24 * 60 * 60 * 1000)
 *     }
 *   }
 * }
 * ```
 *
 * In the above code the password is stored plainly in the password field so it can be validated, but is never stored in the DB.
 * @alias NONE
 */
export const VIRTUAL: VirtualDataTypeConstructor;

interface VirtualDataTypeConstructor extends AbstractDataTypeConstructor {
  new <T extends AbstractDataTypeConstructor|AbstractDataType>(ReturnType: T, fields?: string[]): VirtualDataType<T>;
  <T extends AbstractDataTypeConstructor|AbstractDataType>(ReturnType: T, fields?: string[]): VirtualDataType<T>;
}

export interface VirtualDataType<T extends AbstractDataTypeConstructor|AbstractDataType> extends AbstractDataType {
  returnType: T;
  fields: string[];
}

/**
 * An enumeration. `DataTypes.ENUM('value', 'another value')`.
 */
export const ENUM: EnumDataTypeConstructor;

interface EnumDataTypeConstructor extends AbstractDataTypeConstructor {
  new <T extends string>(...values: T[]): EnumDataType<T>;
  new <T extends string>(options: EnumDataTypeOptions<T>): EnumDataType<T>;
  <T extends string>(...values: T[]): EnumDataType<T>;
  <T extends string>(options: EnumDataTypeOptions<T>): EnumDataType<T>;
}

export interface EnumDataType<T extends string> extends AbstractDataType {
  values: T[];
  options: EnumDataTypeOptions<T>;
}

export interface EnumDataTypeOptions<T extends string> {
  values: T[];
}

/**
 * An array of `type`, e.g. `DataTypes.ARRAY(DataTypes.DECIMAL)`. Only available in postgres.
 */
export const ARRAY: ArrayDataTypeConstructor;

interface ArrayDataTypeConstructor extends AbstractDataTypeConstructor {
  new <T extends AbstractDataTypeConstructor|AbstractDataType>(type: T): ArrayDataType<T>;
  new <T extends AbstractDataTypeConstructor|AbstractDataType>(options: ArrayDataTypeOptions<T>): ArrayDataType<T>;
  <T extends AbstractDataTypeConstructor|AbstractDataType>(type: T): ArrayDataType<T>;
  <T extends AbstractDataTypeConstructor|AbstractDataType>(options: ArrayDataTypeOptions<T>): ArrayDataType<T>;
  is<T extends AbstractDataTypeConstructor|AbstractDataType>(obj: any, type: T): obj is ArrayDataType<T>;
}

export interface ArrayDataType<T extends AbstractDataTypeConstructor|AbstractDataType> extends AbstractDataType {
  options: ArrayDataTypeOptions<T>;
}

export interface ArrayDataTypeOptions<T extends AbstractDataTypeConstructor|AbstractDataType> {
  type: T;
}

/**
 * A geometry datatype represents two dimensional spacial objects.
 */
export const GEOMETRY: GeometryDataTypeConstructor;

interface GeometryDataTypeConstructor extends AbstractDataTypeConstructor {
  new (type: string, srid?: number): GeometryDataType;
  new (options: GeometryDataTypeOptions): GeometryDataType;
  (type: string, srid?: number): GeometryDataType;
  (options: GeometryDataTypeOptions): GeometryDataType;
}

export interface GeometryDataType extends AbstractDataType {
  options: GeometryDataTypeOptions;
  type: string;
  srid?: number;
  escape: boolean;
}

export interface GeometryDataTypeOptions {
  type: string;
  srid?: number;
}

/**
 * A geography datatype represents two dimensional spacial objects in an elliptic coord system.
 */
export const GEOGRAPHY: GeographyDataTypeConstructor;

interface GeographyDataTypeConstructor extends AbstractDataTypeConstructor {
  new (type: string, srid?: number): GeographyDataType;
  new (options: GeographyDataTypeOptions): GeographyDataType;
  (type: string, srid?: number): GeographyDataType;
  (options: GeographyDataTypeOptions): GeographyDataType;
}

export interface GeographyDataType extends AbstractDataType {
  options: GeographyDataTypeOptions;
  type: string;
  srid?: number;
  escape: boolean;
}

export interface GeographyDataTypeOptions {
  type: string;
  srid?: number;
}

export const NONE: typeof VIRTUAL;
// export ['DOUBLE PRECISION']: typeof DOUBLE;
}
declare module 'sequelize/lib/data-types' {
export * from '~sequelize/lib/data-types';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-bluebird/c8f9ceb6238ea1a861fed86d82def78ed5b95d7d/bluebird.d.ts
declare module '~sequelize~bluebird/bluebird' {
// Type definitions for Bluebird v3.x.x
// Project: http://bluebirdjs.com

class Bluebird<R> implements Bluebird.Thenable<R>, Bluebird.Inspection<R> {
  /**
   * Create a new promise. The passed in function will receive functions `resolve` and `reject` as its arguments which can be called to seal the fate of the created promise.
   * If promise cancellation is enabled, passed in function will receive one more function argument `onCancel` that allows to register an optional cancellation callback.
   */
  constructor(callback: (resolve: (thenableOrResult?: R | Bluebird.Thenable<R>) => void, reject: (error?: any) => void, onCancel?: (callback: () => void) => void) => void);

  /**
   * Promises/A+ `.then()`. Returns a new promise chained from this promise. The new promise will be rejected or resolved dedefer on the passed `onFulfill`, `onReject` and the state of this promise.
   */
  then<U1, U2>(onFulfill: (value: R) => U1 | Bluebird.Thenable<U1>, onReject: (error: any) => U2 | Bluebird.Thenable<U2>): Bluebird<U1 | U2>;
  then<U>(onFulfill: (value: R) => U | Bluebird.Thenable<U>, onReject: (error: any) => U | Bluebird.Thenable<U>): Bluebird<U>;
  then<U>(onFulfill: (value: R) => U | Bluebird.Thenable<U>): Bluebird<U>;
  then(): Bluebird<R>;

  /**
   * This is a catch-all exception handler, shortcut for calling `.then(null, handler)` on this promise. Any exception happening in a `.then`-chain will propagate to nearest `.catch` handler.
   *
   * Alias `.caught();` for compatibility with earlier ECMAScript version.
   */
  catch(onReject?: (error: any) => R | Bluebird.Thenable<R> | void | Bluebird.Thenable<void>): Bluebird<R>;
  caught(onReject?: (error: any) => R | Bluebird.Thenable<R> | void | Bluebird.Thenable<void>): Bluebird<R>;
  catch<U>(onReject?: (error: any) => U | Bluebird.Thenable<U>): Bluebird<U | R>;
  caught<U>(onReject?: (error: any) => U | Bluebird.Thenable<U>): Bluebird<U | R>;

  /**
   * This extends `.catch` to work more like catch-clauses in languages like Java or C#. Instead of manually checking `instanceof` or `.name === "SomeError"`, you may specify a number of error constructors which are eligible for this catch handler. The catch handler that is first met that has eligible constructors specified, is the one that will be called.
   *
   * This method also supports predicate-based filters. If you pass a predicate function instead of an error constructor, the predicate will receive the error as an argument. The return result of the predicate will be used determine whether the error handler should be called.
   *
   * Alias `.caught();` for compatibility with earlier ECMAScript version.
   */
  catch(predicate: (error: any) => boolean, onReject: (error: any) => R | Bluebird.Thenable<R> | void | Bluebird.Thenable<void>): Bluebird<R>;
  caught(predicate: (error: any) => boolean, onReject: (error: any) => R | Bluebird.Thenable<R> | void | Bluebird.Thenable<void>): Bluebird<R>;
  catch<U>(predicate: (error: any) => boolean, onReject: (error: any) => U | Bluebird.Thenable<U>): Bluebird<U | R>;
  caught<U>(predicate: (error: any) => boolean, onReject: (error: any) => U | Bluebird.Thenable<U>): Bluebird<U | R>;
  catch(ErrorClass: Function, onReject: (error: any) => R | Bluebird.Thenable<R> | void | Bluebird.Thenable<void>): Bluebird<R>;
  caught(ErrorClass: Function, onReject: (error: any) => R | Bluebird.Thenable<R> | void | Bluebird.Thenable<void>): Bluebird<R>;
  catch<U>(ErrorClass: Function, onReject: (error: any) => U | Bluebird.Thenable<U>): Bluebird<U | R>;
  caught<U>(ErrorClass: Function, onReject: (error: any) => U | Bluebird.Thenable<U>): Bluebird<U | R>;
  catch(predicate: Object, onReject: (error: any) => R | Bluebird.Thenable<R> | void | Bluebird.Thenable<void>): Bluebird<R>;
  caught(predicate: Object, onReject: (error: any) => R | Bluebird.Thenable<R> | void | Bluebird.Thenable<void>): Bluebird<R>;
  catch<U>(predicate: Object, onReject: (error: any) => U | Bluebird.Thenable<U>): Bluebird<U | R>;
  caught<U>(predicate: Object, onReject: (error: any) => U | Bluebird.Thenable<U>): Bluebird<U | R>;

  /**
   * Like `.catch` but instead of catching all types of exceptions, it only catches those that don't originate from thrown errors but rather from explicit rejections.
   */
  error<U>(onReject: (reason: any) => U | Bluebird.Thenable<U>): Bluebird<U>;

  /**
   * Pass a handler that will be called regardless of this promise's fate. Returns a new promise chained from this promise. There are special semantics for `.finally()` in that the final value cannot be modified from the handler.
   *
   * Alias `.lastly();` for compatibility with earlier ECMAScript version.
   */
  finally<U>(handler: () => U | Bluebird.Thenable<U>): Bluebird<R>;

  lastly<U>(handler: () => U | Bluebird.Thenable<U>): Bluebird<R>;

  /**
   * Create a promise that follows this promise, but is bound to the given `thisArg` value. A bound promise will call its handlers with the bound value set to `this`. Additionally promises derived from a bound promise will also be bound promises with the same `thisArg` binding as the original promise.
   */
  bind(thisArg: any): Bluebird<R>;

  /**
   * Like `.then()`, but any unhandled rejection that ends up here will be thrown as an error.
   */
  done<U>(onFulfilled?: (value: R) => U | Bluebird.Thenable<U>, onRejected?: (error: any) => U | Bluebird.Thenable<U>): void;

  /**
   * Like `.finally()`, but not called for rejections.
   */
  tap<U>(onFulFill: (value: R) => Bluebird.Thenable<U>): Bluebird<R>;
  tap<U>(onFulfill: (value: R) => U): Bluebird<R>;

  /**
   * Like `.finally`, but is not called for fulfillments.
   */
  tapCatch<U>(onFulFill: (value: R) => Bluebird.Thenable<U>): Bluebird<R>;
  tapCatch<U>(onFulfill: (value: R) => U): Bluebird<R>;

  /**
   * Same as calling `Promise.delay(ms, this)`.
   */
  delay(ms: number): Bluebird<R>;

  /**
   * Returns a promise that will be fulfilled with this promise's fulfillment value or rejection reason.
   *  However, if this promise is not fulfilled or rejected within ms milliseconds, the returned promise
   *  is rejected with a TimeoutError or the error as the reason.
   *
   * You may specify a custom error message with the `message` parameter.
   */
  timeout(ms: number, message?: string | Error): Bluebird<R>;

  /**
   * Register a node-style callback on this promise. When this promise is is either fulfilled or rejected, the node callback will be called back with the node.js convention where error reason is the first argument and success value is the second argument. The error argument will be `null` in case of success.
   * If the `callback` argument is not a function, this method does not do anything.
   */
  nodeify(callback: (err: any, value?: R) => void, options?: Bluebird.SpreadOption): this;
  nodeify(...sink: any[]): this;
  asCallback(callback: (err: any, value?: R) => void, options?: Bluebird.SpreadOption): this;
  asCallback(...sink: any[]): this;

  /**
   * See if this `promise` has been fulfilled.
   */
  isFulfilled(): boolean;

  /**
   * See if this `promise` has been rejected.
   */
  isRejected(): boolean;

  /**
   * See if this `promise` is still defer.
   */
  isPending(): boolean;

  /**
   * See if this `promise` has been cancelled.
   */
  isCancelled(): boolean;

  /**
   * See if this `promise` is resolved -> either fulfilled or rejected.
   */
  isResolved(): boolean;

  /**
   * Get the fulfillment value of the underlying promise. Throws if the promise isn't fulfilled yet.
   *
   * throws `TypeError`
   */
  value(): R;

  /**
   * Get the rejection reason for the underlying promise. Throws if the promise isn't rejected yet.
   *
   * throws `TypeError`
   */
  reason(): any;

  /**
   * Synchronously inspect the state of this `promise`. The `PromiseInspection` will represent the state of
   * the promise as snapshotted at the time of calling `.reflect()`.
   */
  reflect(): Bluebird<Bluebird.Inspection<R>>;
  reflect(): Bluebird<Bluebird.Inspection<any>>;

  /**
   * This is a convenience method for doing:
   *
   * <code>
   * promise.then(function(obj){
   *     return obj[propertyName].call(obj, arg...);
   * });
   * </code>
   */
  call(propertyName: string, ...args: any[]): Bluebird<any>;

  /**
   * This is a convenience method for doing:
   *
   * <code>
   * promise.then(function(obj){
   *     return obj[propertyName];
   * });
   * </code>
   */
  // TODO: Use "type property type" once it's there
  // @see https://github.com/Microsoft/TypeScript/issues/1295
  get<U>(key: string | number): Bluebird<U>;

  /**
   * Convenience method for:
   *
   * <code>
   * .then(function() {
   *    return value;
   * });
   * </code>
   *
   * in the case where `value` doesn't change its value. That means `value` is bound at the time of calling `.return()`
   *
   * Alias `.thenReturn();` for compatibility with earlier ECMAScript version.
   */
  return(): Bluebird<any>;
  thenReturn(): Bluebird<any>;
  return<U>(value: U): Bluebird<U>;
  thenReturn<U>(value: U): Bluebird<U>;

  /**
   * Convenience method for:
   *
   * <code>
   * .then(function() {
   *    throw reason;
   * });
   * </code>
   * Same limitations apply as with `.return()`.
   *
   * Alias `.thenThrow();` for compatibility with earlier ECMAScript version.
   */
  throw(reason: Error): Bluebird<R>;
  thenThrow(reason: Error): Bluebird<R>;

  /**
   * Convert to String.
   */
  toString(): string;

  /**
   * This is implicitly called by `JSON.stringify` when serializing the object. Returns a serialized representation of the `Promise`.
   */
  toJSON(): Object;

  /**
   * Like calling `.then`, but the fulfillment value or rejection reason is assumed to be an array, which is flattened to the formal parameters of the handlers.
   */
  spread<U, W>(fulfilledHandler: (...values: W[]) => U | Bluebird.Thenable<U>): Bluebird<U>;
  spread<U>(fulfilledHandler: Function): Bluebird<U>;

  /**
   * Same as calling `Promise.all(thisPromise)`. With the exception that if this promise is bound to a value, the returned promise is bound to that value too.
   */
  // TODO type inference from array-resolving promise?
  all<U>(): Bluebird<U[]>;

  /**
   * Same as calling `Promise.props(thisPromise)`. With the exception that if this promise is bound to a value, the returned promise is bound to that value too.
   */
  // TODO how to model instance.props()?
  props(): Bluebird<Object>;

  /**
   * Same as calling `Promise.any(thisPromise)`. With the exception that if this promise is bound to a value, the returned promise is bound to that value too.
   */
  // TODO type inference from array-resolving promise?
  any<U>(): Bluebird<U>;

  /**
   * Same as calling `Promise.some(thisPromise)`. With the exception that if this promise is bound to a value, the returned promise is bound to that value too.
   */
  // TODO type inference from array-resolving promise?
  some<U>(count: number): Bluebird<U[]>;

  /**
   * Same as calling `Promise.race(thisPromise, count)`. With the exception that if this promise is bound to a value, the returned promise is bound to that value too.
   */
  // TODO type inference from array-resolving promise?
  race<U>(): Bluebird<U>;

  /**
   * Same as calling `Bluebird.map(thisPromise, mapper)`. With the exception that if this promise is bound to a value, the returned promise is bound to that value too.
   */
  // TODO type inference from array-resolving promise?
  map<Q, U>(mapper: (item: Q, index: number, arrayLength: number) => U | Bluebird.Thenable<U>, options?: Bluebird.ConcurrencyOption): Bluebird<U[]>;

  /**
   * Same as calling `Promise.reduce(thisPromise, Function reducer, initialValue)`. With the exception that if this promise is bound to a value, the returned promise is bound to that value too.
   */
  // TODO type inference from array-resolving promise?
  reduce<Q, U>(reducer: (memo: U, item: Q, index: number, arrayLength: number) => U | Bluebird.Thenable<U>, initialValue?: U): Bluebird<U>;

  /**
   * Same as calling ``Promise.filter(thisPromise, filterer)``. With the exception that if this promise is bound to a value, the returned promise is bound to that value too.
   */
  // TODO type inference from array-resolving promise?
  filter<U>(filterer: (item: U, index: number, arrayLength: number) => boolean | Bluebird.Thenable<boolean>, options?: Bluebird.ConcurrencyOption): Bluebird<U[]>;

  /**
   * Same as calling ``Bluebird.each(thisPromise, iterator)``. With the exception that if this promise is bound to a value, the returned promise is bound to that value too.
   */
  each<R, U>(iterator: (item: R, index: number, arrayLength: number) => U | Bluebird.Thenable<U>): Bluebird<R[]>;

  /**
   * Same as calling ``Bluebird.mapSeries(thisPromise, iterator)``. With the exception that if this promise is bound to a value, the returned promise is bound to that value too.
   */
  mapSeries<R, U>(iterator: (item: R, index: number, arrayLength: number) => U | Bluebird.Thenable<U>): Bluebird<U[]>;

  /**
   * Cancel this `promise`. Will not do anything if this promise is already settled or if the cancellation feature has not been enabled
   */
  cancel(): void;

  /**
   * Start the chain of promises with `Promise.try`. Any synchronous exceptions will be turned into rejections on the returned promise.
   *
   * Note about second argument: if it's specifically a true array, its values become respective arguments for the function call. Otherwise it is passed as is as the first argument for the function call.
   *
   * Alias for `attempt();` for compatibility with earlier ECMAScript version.
   */
  static try<R>(fn: () => R | Bluebird.Thenable<R>): Bluebird<R>;
  static attempt<R>(fn: () => R | Bluebird.Thenable<R>): Bluebird<R>;

  /**
   * Returns a new function that wraps the given function `fn`. The new function will always return a promise that is fulfilled with the original functions return values or rejected with thrown exceptions from the original function.
   * This method is convenient when a function can sometimes return synchronously or throw synchronously.
   */
  static method(fn: Function): Function;

  /**
   * Create a promise that is resolved with the given `value`. If `value` is a thenable or promise, the returned promise will assume its state.
   */
  static resolve(): Bluebird<void>;
  static resolve<R>(value: R | Bluebird.Thenable<R>): Bluebird<R>;

  /**
   * Create a promise that is rejected with the given `reason`.
   */
  static reject(reason: any): Bluebird<any>;
  static reject<R>(reason: any): Bluebird<R>;

  /**
   * Create a promise with undecided fate and return a `PromiseResolver` to control it. See resolution?: Promise(#promise-resolution).
   */
  static defer<R>(): Bluebird.Resolver<R>;

  /**
   * Cast the given `value` to a trusted promise. If `value` is already a trusted `Promise`, it is returned as is. If `value` is not a thenable, a fulfilled is: Promise returned with `value` as its fulfillment value. If `value` is a thenable (Promise-like object, like those returned by jQuery's `$.ajax`), returns a trusted that: Promise assimilates the state of the thenable.
   */
  static cast<R>(value: R | Bluebird.Thenable<R>): Bluebird<R>;

  /**
   * Sugar for `Promise.resolve(undefined).bind(thisArg);`. See `.bind()`.
   */
  static bind(thisArg: any): Bluebird<void>;

  /**
   * See if `value` is a trusted Promise.
   */
  static is(value: any): boolean;

  /**
   * Call this right after the library is loaded to enabled long stack traces. Long stack traces cannot be disabled after being enabled, and cannot be enabled after promises have already been created. Long stack traces imply a substantial performance penalty, around 4-5x for throughput and 0.5x for latency.
   */
  static longStackTraces(): void;

  /**
   * Returns a promise that will be resolved with value (or undefined) after given ms milliseconds.
   * If value is a promise, the delay will start counting down when it is fulfilled and the returned
   *  promise will be fulfilled with the fulfillment value of the value promise.
   */
  static delay<R>(ms: number, value: R | Bluebird.Thenable<R>): Bluebird<R>;
  static delay(ms: number): Bluebird<void>;

  /**
   * Returns a function that will wrap the given `nodeFunction`. Instead of taking a callback, the returned function will return a promise whose fate is decided by the callback behavior of the given node function. The node function should conform to node.js convention of accepting a callback as last argument and calling that callback with error as the first argument and success value on the second argument.
   *
   * If the `nodeFunction` calls its callback with multiple success values, the fulfillment value will be an array of them.
   *
   * If you pass a `receiver`, the `nodeFunction` will be called as a method on the `receiver`.
   */
  static promisify<T>(func: (callback: (err: any, result: T) => void) => void, options?: Bluebird.PromisifyOptions): () => Bluebird<T>;
  static promisify<T, A1>(func: (arg1: A1, callback: (err: any, result: T) => void) => void, options?: Bluebird.PromisifyOptions): (arg1: A1) => Bluebird<T>;
  static promisify<T, A1, A2>(func: (arg1: A1, arg2: A2, callback: (err: any, result: T) => void) => void, options?: Bluebird.PromisifyOptions): (arg1: A1, arg2: A2) => Bluebird<T>;
  static promisify<T, A1, A2, A3>(func: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, result: T) => void) => void, options?: Bluebird.PromisifyOptions): (arg1: A1, arg2: A2, arg3: A3) => Bluebird<T>;
  static promisify<T, A1, A2, A3, A4>(func: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, result: T) => void) => void, options?: Bluebird.PromisifyOptions): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Bluebird<T>;
  static promisify<T, A1, A2, A3, A4, A5>(func: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, result: T) => void) => void, options?: Bluebird.PromisifyOptions): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Bluebird<T>;
  static promisify(nodeFunction: Function, options?: Bluebird.PromisifyOptions): Function;

  /**
   * Promisifies the entire object by going through the object's properties and creating an async equivalent of each function on the object and its prototype chain. The promisified method name will be the original method name postfixed with `Async`. Returns the input object.
   *
   * Note that the original methods on the object are not overwritten but new methods are created with the `Async`-postfix. For example, if you `promisifyAll()` the node.js `fs` object use `fs.statAsync()` to call the promisified `stat` method.
   */
  // TODO how to model promisifyAll?
  static promisifyAll(target: Object, options?: Bluebird.PromisifyAllOptions): Object;

  /**
   * Returns a promise that is resolved by a node style callback function.
   */
  static fromNode(resolver: (callback: (err: any, result?: any) => void) => void, options?: Bluebird.FromNodeOptions): Bluebird<any>;
  static fromNode<T>(resolver: (callback: (err: any, result?: T) => void) => void, options?: Bluebird.FromNodeOptions): Bluebird<T>;
  static fromCallback(resolver: (callback: (err: any, result?: any) => void) => void, options?: Bluebird.FromNodeOptions): Bluebird<any>;
  static fromCallback<T>(resolver: (callback: (err: any, result?: T) => void) => void, options?: Bluebird.FromNodeOptions): Bluebird<T>;

  /**
   * Returns a function that can use `yield` to run asynchronous code synchronously. This feature requires the support of generators which are drafted in the next version of the language. Node version greater than `0.11.2` is required and needs to be executed with the `--harmony-generators` (or `--harmony`) command-line switch.
   */
  // TODO fix coroutine GeneratorFunction
  static coroutine<R>(generatorFunction: Function): Function;

  /**
   * Add `handler` as the handler to call when there is a possibly unhandled rejection. The default handler logs the error stack to stderr or `console.error` in browsers.
   *
   * Passing no value or a non-function will have the effect of removing any kind of handling for possibly unhandled rejections.
   */
  static onPossiblyUnhandledRejection(handler: (reason: any) => any): void;

  /**
   * Given an array, or a promise of an array, which contains promises (or a mix of promises and values) return a promise that is fulfilled when all the items in the array are fulfilled. The promise's fulfillment value is an array with fulfillment values at respective positions to the original array. If any promise in the array rejects, the returned promise is rejected with the rejection reason.
   */
  // TODO enable more overloads
  // array with promises of different types
  static all<T1, T2, T3, T4, T5>(values: [Bluebird.Thenable<T1> | T1, Bluebird.Thenable<T2> | T2, Bluebird.Thenable<T3> | T3, Bluebird.Thenable<T4> | T4, Bluebird.Thenable<T5> | T5]): Bluebird<[T1, T2, T3, T4, T5]>;
  static all<T1, T2, T3, T4>(values: [Bluebird.Thenable<T1> | T1, Bluebird.Thenable<T2> | T2, Bluebird.Thenable<T3> | T3, Bluebird.Thenable<T4> | T4]): Bluebird<[T1, T2, T3, T4]>;
  static all<T1, T2, T3>(values: [Bluebird.Thenable<T1> | T1, Bluebird.Thenable<T2> | T2, Bluebird.Thenable<T3> | T3]): Bluebird<[T1, T2, T3]>;
  static all<T1, T2>(values: [Bluebird.Thenable<T1> | T1, Bluebird.Thenable<T2> | T2]): Bluebird<[T1, T2]>;
  static all<T1>(values: [Bluebird.Thenable<T1> | T1]): Bluebird<[T1]>;
  // array with values
  static all<R>(values: Bluebird.Thenable<(Bluebird.Thenable<R> | R)[]> | (Bluebird.Thenable<R> | R)[]): Bluebird<R[]>;

  /**
   * Like ``Promise.all`` but for object properties instead of array items. Returns a promise that is fulfilled when all the properties of the object are fulfilled. The promise's fulfillment value is an object with fulfillment values at respective keys to the original object. If any promise in the object rejects, the returned promise is rejected with the rejection reason.
   *
   * If `object` is a trusted `Promise`, then it will be treated as a promise for object rather than for its properties. All other objects are treated for their properties as is returned by `Object.keys` - the object's own enumerable properties.
   *
   * *The original object is not modified.*
   */
  // TODO verify this is correct
  // trusted promise for object
  static props(object: Bluebird<Object>): Bluebird<Object>;
  // object
  static props(object: Object): Bluebird<Object>;

  /**
   * Like `Promise.some()`, with 1 as `count`. However, if the promise fulfills, the fulfillment value is not an array of 1 but the value directly.
   */
  static any<R>(values: Bluebird.Thenable<(Bluebird.Thenable<R> | R)[]> | (Bluebird.Thenable<R> | R)[]): Bluebird<R>;

  /**
   * Given an array, or a promise of an array, which contains promises (or a mix of promises and values) return a promise that is fulfilled or rejected as soon as a promise in the array is fulfilled or rejected with the respective rejection reason or fulfillment value.
   *
   * **Note** If you pass empty array or a sparse array with no values, or a promise/thenable for such, it will be forever pending.
   */
  static race<R>(values: Bluebird.Thenable<(Bluebird.Thenable<R> | R)[]> | (Bluebird.Thenable<R> | R)[]): Bluebird<R>;

  /**
   * Initiate a competetive race between multiple promises or values (values will become immediately fulfilled promises). When `count` amount of promises have been fulfilled, the returned promise is fulfilled with an array that contains the fulfillment values of the winners in order of resolution.
   *
   * If too many promises are rejected so that the promise can never become fulfilled, it will be immediately rejected with an array of rejection reasons in the order they were thrown in.
   *
   * *The original array is not modified.*
   */
  // promise of array with promises of value
  static some<R>(values: Bluebird.Thenable<Bluebird.Thenable<R>[]>, count: number): Bluebird<R[]>;
  // promise of array with values
  static some<R>(values: Bluebird.Thenable<R[]>, count: number): Bluebird<R[]>;
  // array with promises of value
  static some<R>(values: Bluebird.Thenable<R>[], count: number): Bluebird<R[]>;
  // array with values
  static some<R>(values: R[], count: number): Bluebird<R[]>;

  /**
   * Promise.join(
   *   Promise<any>|any values...,
   *   function handler
   * ) -> Promise
   * For coordinating multiple concurrent discrete promises.
   *
   * Note: In 1.x and 0.x Promise.join used to be a Promise.all that took the values in as arguments instead in an array. This behavior has been deprecated but is still supported partially - when the last argument is an immediate function value the new semantics will apply
   */
  static join<R, A1>(arg1: A1 | Bluebird.Thenable<A1>, handler: (arg1?: A1) => R | Bluebird.Thenable<R>): Bluebird<R>;
  static join<R, A1, A2>(arg1: A1 | Bluebird.Thenable<A1>, arg2: A2 | Bluebird.Thenable<A2>, handler: (arg1?: A1, arg2?: A2) => R | Bluebird.Thenable<R>): Bluebird<R>;
  static join<R, A1, A2, A3>(arg1: A1 | Bluebird.Thenable<A1>, arg2: A2 | Bluebird.Thenable<A2>, arg3: A3 | Bluebird.Thenable<A3>, handler: (arg1?: A1, arg2?: A2, arg3?: A3) => R | Bluebird.Thenable<R>): Bluebird<R>;
  static join<R, A1, A2, A3, A4>(arg1: A1 | Bluebird.Thenable<A1>, arg2: A2 | Bluebird.Thenable<A2>, arg3: A3 | Bluebird.Thenable<A3>, arg4: A4 | Bluebird.Thenable<A4>, handler: (arg1?: A1, arg2?: A2, arg3?: A3, arg4?: A4) => R | Bluebird.Thenable<R>): Bluebird<R>;
  static join<R, A1, A2, A3, A4, A5>(arg1: A1 | Bluebird.Thenable<A1>, arg2: A2 | Bluebird.Thenable<A2>, arg3: A3 | Bluebird.Thenable<A3>, arg4: A4 | Bluebird.Thenable<A4>, arg5: A5 | Bluebird.Thenable<A5>, handler: (arg1?: A1, arg2?: A2, arg3?: A3, arg4?: A4, arg5?: A5) => R | Bluebird.Thenable<R>): Bluebird<R>;

  // variadic array
  /** @deprecated use .all instead */
  static join<R>(...values: (R | Bluebird.Thenable<R>)[]): Bluebird<R[]>;

  /**
   * Map an array, or a promise of an array, which contains a promises (or a mix of promises and values) with the given `mapper` function with the signature `(item, index, arrayLength)` where `item` is the resolved value of a respective promise in the input array. If any promise in the input array is rejected the returned promise is rejected as well.
   *
   * If the `mapper` function returns promises or thenables, the returned promise will wait for all the mapped results to be resolved as well.
   *
   * *The original array is not modified.*
   */
  // promise of array with promises of value
  static map<R, U>(values: Bluebird.Thenable<Bluebird.Thenable<R>[]>, mapper: (item: R, index: number, arrayLength: number) => U | Bluebird.Thenable<U>, options?: Bluebird.ConcurrencyOption): Bluebird<U[]>;

  // promise of array with values
  static map<R, U>(values: Bluebird.Thenable<R[]>, mapper: (item: R, index: number, arrayLength: number) => U | Bluebird.Thenable<U>, options?: Bluebird.ConcurrencyOption): Bluebird<U[]>;

  // array with promises of value
  static map<R, U>(values: Bluebird.Thenable<R>[], mapper: (item: R, index: number, arrayLength: number) => U | Bluebird.Thenable<U>, options?: Bluebird.ConcurrencyOption): Bluebird<U[]>;

  // array with values
  static map<R, U>(values: R[], mapper: (item: R, index: number, arrayLength: number) => U | Bluebird.Thenable<U>, options?: Bluebird.ConcurrencyOption): Bluebird<U[]>;

  /**
   * Reduce an array, or a promise of an array, which contains a promises (or a mix of promises and values) with the given `reducer` function with the signature `(total, current, index, arrayLength)` where `item` is the resolved value of a respective promise in the input array. If any promise in the input array is rejected the returned promise is rejected as well.
   *
   * If the reducer function returns a promise or a thenable, the result for the promise is awaited for before continuing with next iteration.
   *
   * *The original array is not modified. If no `intialValue` is given and the array doesn't contain at least 2 items, the callback will not be called and `undefined` is returned. If `initialValue` is given and the array doesn't have at least 1 item, `initialValue` is returned.*
   */
  // promise of array with promises of value
  static reduce<R, U>(values: Bluebird.Thenable<Bluebird.Thenable<R>[]>, reducer: (total: U, current: R, index: number, arrayLength: number) => U | Bluebird.Thenable<U>, initialValue?: U): Bluebird<U>;

  // promise of array with values
  static reduce<R, U>(values: Bluebird.Thenable<R[]>, reducer: (total: U, current: R, index: number, arrayLength: number) => U | Bluebird.Thenable<U>, initialValue?: U): Bluebird<U>;

  // array with promises of value
  static reduce<R, U>(values: Bluebird.Thenable<R>[], reducer: (total: U, current: R, index: number, arrayLength: number) => U | Bluebird.Thenable<U>, initialValue?: U): Bluebird<U>;

  // array with values
  static reduce<R, U>(values: R[], reducer: (total: U, current: R, index: number, arrayLength: number) => U | Bluebird.Thenable<U>, initialValue?: U): Bluebird<U>;

  /**
   * Filter an array, or a promise of an array, which contains a promises (or a mix of promises and values) with the given `filterer` function with the signature `(item, index, arrayLength)` where `item` is the resolved value of a respective promise in the input array. If any promise in the input array is rejected the returned promise is rejected as well.
   *
   * The return values from the filtered functions are coerced to booleans, with the exception of promises and thenables which are awaited for their eventual result.
   *
   * *The original array is not modified.
   */
  // promise of array with promises of value
  static filter<R>(values: Bluebird.Thenable<Bluebird.Thenable<R>[]>, filterer: (item: R, index: number, arrayLength: number) => boolean | Bluebird.Thenable<boolean>, option?: Bluebird.ConcurrencyOption): Bluebird<R[]>;

  // promise of array with values
  static filter<R>(values: Bluebird.Thenable<R[]>, filterer: (item: R, index: number, arrayLength: number) => boolean | Bluebird.Thenable<boolean>, option?: Bluebird.ConcurrencyOption): Bluebird<R[]>;

  // array with promises of value
  static filter<R>(values: Bluebird.Thenable<R>[], filterer: (item: R, index: number, arrayLength: number) => boolean | Bluebird.Thenable<boolean>, option?: Bluebird.ConcurrencyOption): Bluebird<R[]>;

  // array with values
  static filter<R>(values: R[], filterer: (item: R, index: number, arrayLength: number) => boolean | Bluebird.Thenable<boolean>, option?: Bluebird.ConcurrencyOption): Bluebird<R[]>;

  /**
   * Iterate over an array, or a promise of an array, which contains promises (or a mix of promises and values) with the given iterator function with the signature (item, index, value) where item is the resolved value of a respective promise in the input array. Iteration happens serially. If any promise in the input array is rejected the returned promise is rejected as well.
   *
   * Resolves to the original array unmodified, this method is meant to be used for side effects. If the iterator function returns a promise or a thenable, the result for the promise is awaited for before continuing with next iteration.
   */
  // promise of array with promises of value
  static each<R, U>(values: Bluebird.Thenable<Bluebird.Thenable<R>[]>, iterator: (item: R, index: number, arrayLength: number) => U | Bluebird.Thenable<U>): Bluebird<R[]>;
  // array with promises of value
  static each<R, U>(values: Bluebird.Thenable<R>[], iterator: (item: R, index: number, arrayLength: number) => U | Bluebird.Thenable<U>): Bluebird<R[]>;
  // array with values OR promise of array with values
  static each<R, U>(values: R[] | Bluebird.Thenable<R[]>, iterator: (item: R, index: number, arrayLength: number) => U | Bluebird.Thenable<U>): Bluebird<R[]>;

  /**
   * Given an Iterable(arrays are Iterable), or a promise of an Iterable, which produces promises (or a mix of promises and values), iterate over all the values in the Iterable into an array and iterate over the array serially, in-order.
   *
   * Returns a promise for an array that contains the values returned by the iterator function in their respective positions. The iterator won't be called for an item until its previous item, and the promise returned by the iterator for that item are fulfilled. This results in a mapSeries kind of utility but it can also be used simply as a side effect iterator similar to Array#forEach.
   *
   * If any promise in the input array is rejected or any promise returned by the iterator function is rejected, the result will be rejected as well.
   */
  static mapSeries<R, U>(values: (R | Bluebird.Thenable<R>)[] | Bluebird.Thenable<(R | Bluebird.Thenable<R>)[]>, iterator: (item: R, index: number, arrayLength: number) => U | Bluebird.Thenable<U>): Bluebird<U[]>;

  /**
   * A meta method used to specify the disposer method that cleans up a resource when using `Promise.using`.
   *
   * Returns a Disposer object which encapsulates both the resource as well as the method to clean it up.
   *  The user can pass this object to `Promise.using` to get access to the resource when it becomes available,
   *  as well as to ensure its automatically cleaned up.
   *
   * The second argument passed to a disposer is the result promise of the using block, which you can
   *  inspect synchronously.
   */
  disposer(disposeFn: (arg: R, promise: Bluebird<R>) => void | Bluebird.Thenable<void>): Bluebird.Disposer<R>;

  /**
   * In conjunction with `.disposer`, using will make sure that no matter what, the specified disposer
   *  will be called when the promise returned by the callback passed to using has settled. The disposer is
   *  necessary because there is no standard interface in node for disposing resources.
   */
  static using<R, T>(disposer: Bluebird.Disposer<R>, executor: (transaction: R) => Bluebird.Thenable<T>): Bluebird<T>;
  static using<R1, R2, T>(disposer: Bluebird.Disposer<R1>, disposer2: Bluebird.Disposer<R2>, executor: (transaction1: R1, transaction2: R2) => Bluebird.Thenable<T>): Bluebird<T>;
  static using<R1, R2, R3, T>(disposer: Bluebird.Disposer<R1>, disposer2: Bluebird.Disposer<R2>, disposer3: Bluebird.Disposer<R3>, executor: (transaction1: R1, transaction2: R2, transaction3: R3) => Bluebird.Thenable<T>): Bluebird<T>;

  /**
   * Add handler as the handler to call when there is a possibly unhandled rejection.
   * The default handler logs the error stack to stderr or console.error in browsers.
   *
   * Passing no value or a non-function will have the effect of removing any kind of handling for possibly unhandled rejections.
   *
   * Note: this hook is specific to the bluebird instance its called on, application developers should use global rejection events.
   */
  static onPossiblyUnhandledRejection(handler?: (error: Error, promise: Bluebird<any>) => void): void;

  /**
   * Configure long stack traces, warnings, monitoring and cancellation.
   * Note that even though false is the default here, a development environment might be detected which automatically
   *  enables long stack traces and warnings.
   */
  static config(options: {
    /** Enable warnings */
    warnings?: boolean | {
      /** Enables all warnings except forgotten return statements. */
      wForgottenReturn: boolean;
    };
    /** Enable long stack traces */
    longStackTraces?: boolean;
    /** Enable cancellation */
    cancellation?: boolean;
    /** Enable monitoring */
    monitoring?: boolean;
  }): void;
}

namespace Bluebird {
  export interface ConcurrencyOption {
    concurrency: number;
  }
  export interface SpreadOption {
    spread: boolean;
  }
  export interface FromNodeOptions {
    multiArgs?: boolean;
  }
  export interface PromisifyOptions {
    context?: any;
    multiArgs?: boolean;
  }
  export interface PromisifyAllOptions extends PromisifyOptions {
    suffix?: string;
    filter?: (name: string, func: Function, target?: any, passesDefaultFilter?: boolean) => boolean;
    // The promisifier gets a reference to the original method and should return a function which returns a promise
    promisifier?: (originalMethod: Function) => () => Thenable<any>;
  }

  /**
   * Represents an error is an explicit promise rejection as opposed to a thrown error.
   *  For example, if an error is errbacked by a callback API promisified through undefined or undefined
   *  and is not a typed error, it will be converted to a `OperationalError` which has the original error in
   *  the `.cause` property.
   *
   * `OperationalError`s are caught in `.error` handlers.
   */
  export class OperationalError extends Error { }

  /**
   * Signals that an operation has timed out. Used as a custom cancellation reason in `.timeout`.
   */
  export class TimeoutError extends Error { }

  /**
   * Signals that an operation has been aborted or cancelled. The default reason used by `.cancel`.
   */
  export class CancellationError extends Error {}

  /**
   * A collection of errors. `AggregateError` is an array-like object, with numeric indices and a `.length` property.
   *  It supports all generic array methods such as `.forEach` directly.
   *
   * `AggregateError`s are caught in `.error` handlers, even if the contained errors are not operational.
   *
   * `Promise.some` and `Promise.any` use `AggregateError` as rejection reason when they fail.
   */
  export class AggregateError extends Error {}

  /**
   * returned by `Bluebird.disposer()`.
   */
  export class Disposer<R> {
  }

  export interface Thenable<R> {
    then<U1, U2>(onFulfill: (value: R) => U1 | Thenable<U1>, onReject: (error: any) => U2 | Thenable<U2>): Thenable<U1 | U2>;
    then<U>(onFulfill: (value: R) => U | Thenable<U>, onReject: (error: any) => U | Thenable<U>): Thenable<U>;
    then<U>(onFulfill: (value: R) => U | Thenable<U>): Thenable<U>;
    then(): Thenable<R>;
  }

  export interface Resolver<R> {
    /**
     * Returns a reference to the controlled promise that can be passed to clients.
     */
    promise: Bluebird<R>;

    /**
     * Resolve the underlying promise with `value` as the resolution value. If `value` is a thenable or a promise, the underlying promise will assume its state.
     */
    resolve(value: R): void;
    resolve(): void;

    /**
     * Reject the underlying promise with `reason` as the rejection reason.
     */
    reject(reason: any): void;

    /**
     * Gives you a callback representation of the `PromiseResolver`. Note that this is not a method but a property. The callback accepts error object in first argument and success values on the 2nd parameter and the rest, I.E. node js conventions.
     *
     * If the the callback is called with multiple success values, the resolver fullfills its promise with an array of the values.
     */
    // TODO specify resolver callback
    callback: (err: any, value: R, ...values: R[]) => void;
  }

  export interface Inspection<R> {
    /**
     * See if the underlying promise was fulfilled at the creation time of this inspection object.
     */
    isFulfilled(): boolean;

    /**
     * See if the underlying promise was rejected at the creation time of this inspection object.
     */
    isRejected(): boolean;

    /**
     * See if the underlying promise was cancelled at the creation time of this inspection object.
     */
    isCancelled(): boolean;

    /**
     * See if the underlying promise was defer at the creation time of this inspection object.
     */
    isPending(): boolean;

    /**
     * Get the fulfillment value of the underlying promise. Throws if the promise wasn't fulfilled at the creation time of this inspection object.
     *
     * throws `TypeError`
     */
    value(): R;

    /**
     * Get the rejection reason for the underlying promise. Throws if the promise wasn't rejected at the creation time of this inspection object.
     *
     * throws `TypeError`
     */
    reason(): any;
  }

  /**
   * Returns a new independent copy of the Bluebird library.
   *
   * This method should be used before you use any of the methods which would otherwise alter the global Bluebird object - to avoid polluting global state.
   */
  export function getNewLibraryCopy(): typeof Bluebird;

  /**
   * This is relevant to browser environments with no module loader.
   *
   * Release control of the Promise namespace to whatever it was before this library was loaded. Returns a reference to the library namespace so you can attach it to something else.
   */
  export function noConflict(): typeof Bluebird;

  /**
   * Changes how bluebird schedules calls a-synchronously.
   *
   * @param scheduler Should be a function that asynchronously schedules
   *                  the calling of the passed in function
   */
  export function setScheduler(scheduler: (callback: (...args: any[]) => void) => void): void;

  /**
   * This property hold the Bluebird version as a string, e.g. "3.4.0".
   */
  export const version: string;
}

export = Bluebird;
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-sequelize/e12e516e5de4d9b95e5a44be3f16648a1ba74eed/lib/promise.d.ts
declare module '~sequelize/lib/promise' {
import * as Bluebird from '~sequelize~bluebird/bluebird';

export const Promise: typeof Bluebird;
export type Promise<T> = Bluebird<T>;
export default Promise;
}
declare module 'sequelize/lib/promise' {
export * from '~sequelize/lib/promise';
export { default } from '~sequelize/lib/promise';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-sequelize/e12e516e5de4d9b95e5a44be3f16648a1ba74eed/lib/model-manager.d.ts
declare module '~sequelize/lib/model-manager' {

import {Model} from '~sequelize/lib/model';
import {Sequelize} from '~sequelize/lib/sequelize';

export class ModelManager {
  sequelize: Sequelize;
  models: Array<typeof Model>;
  all: Array<typeof Model>;
  
  constructor(sequelize: Sequelize);
  addModel<T extends typeof Model>(model: T): T;
  removeModel(model: typeof Model): void;
  getModel(against: any, options?: {attribute?: string}): typeof Model;

  /**
   * Iterate over Models in an order suitable for e.g. creating tables. Will
   * take foreign key constraints into account so that dependencies are visited
   * before dependents.
   */
  forEachModel(iterator: (model: typeof Model, name: string) => any, options?: {reverse?: boolean}): void;
}

export default ModelManager;
}
declare module 'sequelize/lib/model-manager' {
export * from '~sequelize/lib/model-manager';
export { default } from '~sequelize/lib/model-manager';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-sequelize/e12e516e5de4d9b95e5a44be3f16648a1ba74eed/lib/model.d.ts
declare module '~sequelize/lib/model' {

import {Promise} from '~sequelize/lib/promise';
import {Col, Fn, Literal, Where} from '~sequelize/lib/utils';
import {SyncOptions} from '~sequelize/lib/sequelize';
import {QueryOptions} from '~sequelize/lib/query-interface';
import {Transaction} from '~sequelize/lib/transaction';
import {DataType} from '~sequelize/lib/data-types';
import {Sequelize} from '~sequelize/lib/sequelize';
import {AbstractDeferrable} from '~sequelize/lib/deferrable';
import {ModelManager} from '~sequelize/lib/model-manager';
import {
  Association,
  BelongsTo,
  BelongsToOptions,
  HasOne,
  HasOneOptions,
  HasMany,
  HasManyOptions,
  BelongsToMany,
  BelongsToManyOptions
} from '~sequelize/lib/associations/index';

export type GroupOption = string | Fn | Col | (string | Fn | Col)[];

/**
 * Options to pass to Model on drop
 */
export interface DropOptions {

  /**
   * Also drop all objects depending on this table, such as views. Only works in postgres
   */
  cascade?: boolean;

  /**
   * A function that gets executed while running the query to log the sql.
   */
  logging?: boolean | Function;

}

/**
 * Schema Options provided for applying a schema to a model
 */
export interface SchemaOptions {

  /**
   * The character(s) that separates the schema name from the table name
   */
  schemaDelimeter?: string,

  /**
   * A function that gets executed while running the query to log the sql.
   */
  logging?: boolean | Function;

}

/**
 * Scope Options for Model.scope
 */
export interface ScopeOptions {

  /**
   * The scope(s) to apply. Scopes can either be passed as consecutive arguments, or as an array of arguments.
   * To apply simple scopes and scope functions with no arguments, pass them as strings. For scope function,
   * pass an object, with a `method` property. The value can either be a string, if the method does not take
   * any arguments, or an array, where the first element is the name of the method, and consecutive elements
   * are arguments to that method. Pass null to remove all scopes, including the default.
   */
  method: string | Array<any>;

}

/**
 * The type accepted by every `where` option
 *
 * The `Array<string | number>` is to support string with replacements, like `['id > ?', 25]`
 */
export type WhereOptions = WhereAttributeHash | AndOperator | OrOperator | Where | Array<string | number>;

/**
 * Example: `$any: [2,3]` becomes `ANY ARRAY[2, 3]::INTEGER`
 *
 * _PG only_
 */
export interface AnyOperator {
  $any: Array<string | number>;
}

/** Undocumented? */
export interface AllOperator {
  $all: Array<string | number>;
}

/**
 * Operators that can be used in WhereOptions
 *
 * See http://docs.sequelizejs.com/en/v3/docs/querying/#operators
 */
export interface WhereOperators {

  /**
   * Example: `$any: [2,3]` becomes `ANY ARRAY[2, 3]::INTEGER`
   *
   * _PG only_
   */
  $any?: Array<string | number>;

  /** Example: `$gte: 6,` becomes `>= 6` */
  $gte?: number | string | Date;

  /** Example: `$lt: 10,` becomes `< 10` */
  $lt?: number | string | Date;

  /** Example: `$lte: 10,` becomes `<= 10` */
  $lte?: number | string | Date;

  /** Example: `$ne: 20,` becomes `!= 20` */
  $ne?: string | number | WhereOperators;

  /** Example: `$not: true,` becomes `IS NOT TRUE` */
  $not?: boolean | string | number | WhereOperators;

  /** Example: `$between: [6, 10],` becomes `BETWEEN 6 AND 10` */
  $between?: [number, number];

  /** Example: `$in: [1, 2],` becomes `IN [1, 2]` */
  $in?: Array<string | number> | Literal;

  /** Example: `$notIn: [1, 2],` becomes `NOT IN [1, 2]` */
  $notIn?: Array<string | number> | Literal;

  /**
   * Examples:
   *  - `$like: '%hat',` becomes `LIKE '%hat'`
   *  - `$like: { $any: ['cat', 'hat']}` becomes `LIKE ANY ARRAY['cat', 'hat']`
   */
  $like?: string | AnyOperator | AllOperator;

  /**
   * Examples:
   *  - `$notLike: '%hat'` becomes `NOT LIKE '%hat'`
   *  - `$notLike: { $any: ['cat', 'hat']}` becomes `NOT LIKE ANY ARRAY['cat', 'hat']`
   */
  $notLike?: string | AnyOperator | AllOperator;

  /**
   * case insensitive PG only
   *
   * Examples:
   *  - `$iLike: '%hat'` becomes `ILIKE '%hat'`
   *  - `$iLike: { $any: ['cat', 'hat']}` becomes `ILIKE ANY ARRAY['cat', 'hat']`
   */
  $ilike?: string | AnyOperator | AllOperator;

  /**
   * case insensitive PG only
   *
   * Examples:
   *  - `$iLike: '%hat'` becomes `ILIKE '%hat'`
   *  - `$iLike: { $any: ['cat', 'hat']}` becomes `ILIKE ANY ARRAY['cat', 'hat']`
   */
  $iLike?: string | AnyOperator | AllOperator;

  /**
   * PG array overlap operator
   *
   * Example: `$overlap: [1, 2]` becomes `&& [1, 2]`
   */
  $overlap?: [number, number];

  /**
   * PG array contains operator
   *
   * Example: `$contains: [1, 2]` becomes `@> [1, 2]`
   */
  $contains?: any[];

  /**
   * PG array contained by operator
   *
   * Example: `$contained: [1, 2]` becomes `<@ [1, 2]`
   */
  $contained?: any[];

  /** Example: `$gt: 6,` becomes `> 6` */
  $gt?: number | string | Date;

  /**
   * PG only
   *
   * Examples:
   *  - `$notILike: '%hat'` becomes `NOT ILIKE '%hat'`
   *  - `$notLike: ['cat', 'hat']` becomes `LIKE ANY ARRAY['cat', 'hat']`
   */
  $notILike?: string | AnyOperator | AllOperator;

  /** Example: `$notBetween: [11, 15],` becomes `NOT BETWEEN 11 AND 15` */
  $notBetween?: [number, number];
}

/** Example: `$or: [{a: 5}, {a: 6}]` becomes `(a = 5 OR a = 6)` */
export interface OrOperator {
  $or: WhereOperators | WhereAttributeHash | Array<WhereOperators | WhereAttributeHash>;
}

/** Example: `$and: {a: 5}` becomes `AND (a = 5)` */
export interface AndOperator {
  $and: WhereOperators | WhereAttributeHash | Array<WhereOperators | WhereAttributeHash>;
}

/**
 * Where Geometry Options
 */
export interface WhereGeometryOptions {
  type: string;
  coordinates: Array<Array<number> | number>;
}

/**
 * Used for the right hand side of WhereAttributeHash.
 * WhereAttributeHash is in there for JSON columns.
 */
export type WhereValue =
  string // literal value
  | number // literal value
  | WhereOperators
  | WhereAttributeHash // for JSON columns
  | Col // reference another column
  | OrOperator
  | AndOperator
  | WhereGeometryOptions
  | Array<string | number>; // implicit $or

/**
 * A hash of attributes to describe your search.
 */
export interface WhereAttributeHash {
  /**
   * Possible key values:
   * - A simple attribute name
   * - A nested key for JSON columns
   *
   *       {
   *         "meta.audio.length": {
   *           $gt: 20
   *         }
   *       }
   */
  [field: string]: WhereValue;
}
/**
 * Through options for Include Options
 */
export interface IncludeThroughOptions {

  /**
   * Filter on the join model for belongsToMany relations
   */
  where?: WhereOptions;

  /**
   * A list of attributes to select from the join model for belongsToMany relations
   */
  attributes?: FindAttributeOptions;

}

export type Includeable = Model | Association | IncludeOptions;

/**
 * Complex include options
 */
export interface IncludeOptions {

  /**
   * The model you want to eagerly load
   */
  model?: typeof Model;

  /**
   * The alias of the relation, in case the model you want to eagerly load is aliassed. For `hasOne` /
   * `belongsTo`, this should be the singular name, and for `hasMany`, it should be the plural
   */
  as?: string;

  /**
   * The association you want to eagerly load. (This can be used instead of providing a model/as pair)
   */
  association?: Association;

  /**
   * Where clauses to apply to the child models. Note that this converts the eager load to an inner join,
   * unless you explicitly set `required: false`
   */
  where?: WhereOptions;

  /**
   * A list of attributes to select from the child model
   */
  attributes?: FindAttributeOptions;

  /**
   * If true, converts to an inner join, which means that the parent model will only be loaded if it has any
   * matching children. True if `include.where` is set, false otherwise.
   */
  required?: boolean;

  /**
   * Limit include. Only available when setting `separate` to true.
   */
  limit?: number;

  /**
   * Run include in separate queries.
   */
  separate?: boolean;

  /**
   * Through Options
   */
  through?: IncludeThroughOptions;

  /**
   * Load further nested related models
   */
  include?: Includeable[];

  /**
   * Order include. Only available when setting `separate` to true.
   */
  order?: Order;

  /**
   * Use sub queries. This should only be used if you know for sure the query does not result in a cartesian product.
   */
  subQuery?: boolean;
}

export type OrderItem =
  string | Fn | Col | Literal |
  [string | Col | Fn | Literal, string] |
  [typeof Model | { model: typeof Model, as: string }, string, string] |
  [typeof Model, typeof Model, string, string];
export type Order = string | Fn | Col | Literal | OrderItem[];

export type FindAttributeOptions =
  Array<string | [string | Literal | Fn, string]> |
  {
    exclude: Array<string>;
    include?: Array<string | [string | Literal | Fn, string]>;
  } | {
    exclude?: Array<string>;
    include: Array<string | [string | Literal | Fn, string]>;
  };

/**
 * Options that are passed to any model creating a SELECT query
 *
 * A hash of options to describe the scope of the search
 */
export interface FindOptions {
  /**
   * A hash of attributes to describe your search. See above for examples.
   */
  where?: WhereOptions;

  /**
   * A list of the attributes that you want to select. To rename an attribute, you can pass an array, with
   * two elements - the first is the name of the attribute in the DB (or some kind of expression such as
   * `Sequelize.literal`, `Sequelize.fn` and so on), and the second is the name you want the attribute to
   * have in the returned instance
   */
  attributes?: FindAttributeOptions;

  /**
   * If true, only non-deleted records will be returned. If false, both deleted and non-deleted records will
   * be returned. Only applies if `options.paranoid` is true for the model.
   */
  paranoid?: boolean;

  /**
   * A list of associations to eagerly load using a left join. Supported is either
   * `{ include: [ Model1, Model2, ...]}` or `{ include: [{ model: Model1, as: 'Alias' }]}`.
   * If your association are set up with an `as` (eg. `X.hasMany(Y, { as: 'Z }`, you need to specify Z in
   * the as attribute when eager loading Y).
   */
  include?: Includeable[];

  /**
   * Specifies an ordering. If a string is provided, it will be escaped. Using an array, you can provide
   * several columns / functions to order by. Each element can be further wrapped in a two-element array. The
   * first element is the column / function to order by, the second is the direction. For example:
   * `order: [['name', 'DESC']]`. In this way the column will be escaped, but the direction will not.
   */
  order?: Order;

  /**
   * GROUP BY in sql
   */
  group?: GroupOption;

  /**
   * Limit the results
   */
  limit?: number;

  /**
   * Skip the results;
   */
  offset?: number;

  /**
   * Transaction to run query under
   */
  transaction?: Transaction;

  /**
   * Lock the selected rows. Possible options are transaction.LOCK.UPDATE and transaction.LOCK.SHARE.
   * Postgres also supports transaction.LOCK.KEY_SHARE, transaction.LOCK.NO_KEY_UPDATE and specific model
   * locks with joins. See [transaction.LOCK for an example](transaction#lock)
   */
  lock?: string | { level: string, of: typeof Model };

  /**
   * Return raw result. See sequelize.query for more information.
   */
  raw?: boolean;

  /**
   * A function that gets executed while running the query to log the sql.
   */
  logging?: boolean | Function;

  /**
   * having ?!?
   */
  having?: WhereAttributeHash;

  /**
   * Use sub queries (internal)
   */
  subQuery?: boolean;

}

/**
 * Options for Model.count method
 */
export interface CountOptions {

  /**
   * A hash of search attributes.
   */
  where?: WhereOptions;

  /**
   * Include options. See `find` for details
   */
  include?: Includeable[];

  /**
   * Apply COUNT(DISTINCT(col))
   */
  distinct?: boolean;

  /**
   * Used in conjustion with `group`
   */
  attributes?: FindAttributeOptions;

  /**
   * GROUP BY in sql
   */
  group?: GroupOption;

  /**
   * A function that gets executed while running the query to log the sql.
   */
  logging?: boolean | Function;

  transaction?: Transaction;
}

export interface FindAndCountOptions extends CountOptions, FindOptions { }

/**
 * Options for Model.build method
 */
export interface BuildOptions {

  /**
   * If set to true, values will ignore field and virtual setters.
   */
  raw?: boolean;

  /**
   * Is this record new
   */
  isNewRecord?: boolean;

  /**
   * an array of include options - Used to build prefetched/included model instances. See `set`
   *
   * TODO: See set
   */
  include?: Includeable[];

}

/**
 * Options for Model.create method
 */
export interface CreateOptions extends BuildOptions {

  /**
   * If set, only columns matching those in fields will be saved
   */
  fields?: Array<string>;

  /**
   * On Duplicate
   */
  onDuplicate?: string;

  /**
   * Transaction to run query under
   */
  transaction?: Transaction;

  /**
   * A function that gets executed while running the query to log the sql.
   */
  logging?: boolean | Function;

  silent?: boolean;

  returning?: boolean;
}

/**
 * Options for Model.findOrInitialize method
 */
export interface FindOrInitializeOptions {

  /**
   * A hash of search attributes.
   */
  where: WhereOptions;

  /**
   * Default values to use if building a new instance
   */
  defaults?: Object;

  /**
   * Transaction to run query under
   */
  transaction?: Transaction;

  /**
   * A function that gets executed while running the query to log the sql.
   */
  logging?: boolean | Function;

}

/**
 * Options for Model.upsert method
 */
export interface UpsertOptions {
  /**
   * Run validations before the row is inserted
   */
  validate?: boolean;

  /**
   * The fields to insert / update. Defaults to all fields
   */
  fields?: Array<string>;

  /**
   * Transaction to run query under
   */
  transaction?: Transaction;

  /**
   * A function that gets executed while running the query to log the sql.
   */
  logging?: boolean | Function;

  /**
   * An optional parameter to specify the schema search_path (Postgres only)
   */
  searchPath?: string;

  /**
   * Print query execution time in milliseconds when logging SQL.
   */
  benchmark?: boolean;
}

/**
 * Options for Model.bulkCreate method
 */
export interface BulkCreateOptions {

  /**
   * Fields to insert (defaults to all fields)
   */
  fields?: Array<string>;

  /**
   * Should each row be subject to validation before it is inserted. The whole insert will fail if one row
   * fails validation
   */
  validate?: boolean;

  /**
   * Run before / after bulk create hooks?
   */
  hooks?: boolean;

  /**
   * Run before / after create hooks for each individual Instance? BulkCreate hooks will still be run if
   * options.hooks is true.
   */
  individualHooks?: boolean;

  /**
   * Ignore duplicate values for primary keys? (not supported by postgres)
   *
   * Defaults to false
   */
  ignoreDuplicates?: boolean;

  /**
   * Fields to update if row key already exists (on duplicate key update)? (only supported by mysql &
   * mariadb). By default, all fields are updated.
   */
  updateOnDuplicate?: Array<string>;

  /**
   * Transaction to run query under
   */
  transaction?: Transaction;

  /**
   * A function that gets executed while running the query to log the sql.
   */
  logging?: boolean | Function;

}

/**
 * The options passed to Model.destroy in addition to truncate
 */
export interface TruncateOptions {

  /**
   * Transaction to run query under
   */
  transaction?: Transaction;

  /**
   * Only used in conjuction with TRUNCATE. Truncates  all tables that have foreign-key references to the
   * named table, or to any tables added to the group due to CASCADE.
   *
   * Defaults to false;
   */
  cascade?: boolean;

  /**
   * A function that gets executed while running the query to log the sql.
   */
  logging?: boolean | Function;

  /**
   * Filter the destroy
   */
  where?: WhereOptions;

  /**
   * Run before / after bulk destroy hooks?
   */
  hooks?: boolean;

  /**
   * If set to true, destroy will SELECT all records matching the where parameter and will execute before /
   * after destroy hooks on each row
   */
  individualHooks?: boolean;

  /**
   * How many rows to delete
   */
  limit?: number;

  /**
   * Delete instead of setting deletedAt to current timestamp (only applicable if `paranoid` is enabled)
   */
  force?: boolean;

  /**
   * Only used in conjunction with `truncate`.
   * Automatically restart sequences owned by columns of the truncated table
   */
  restartIdentity?: boolean;
}

/**
 * Options used for Model.destroy
 */
export interface DestroyOptions extends TruncateOptions {

  /**
   * If set to true, dialects that support it will use TRUNCATE instead of DELETE FROM. If a table is
   * truncated the where and limit options are ignored
   */
  truncate?: boolean;

}

/**
 * Options for Model.restore
 */
export interface RestoreOptions {

  /**
   * Filter the restore
   */
  where?: WhereOptions;

  /**
   * Run before / after bulk restore hooks?
   */
  hooks?: boolean;

  /**
   * If set to true, restore will find all records within the where parameter and will execute before / after
   * bulkRestore hooks on each row
   */
  individualHooks?: boolean;

  /**
   * How many rows to undelete
   */
  limit?: number;

  /**
   * A function that gets executed while running the query to log the sql.
   */
  logging?: boolean | Function;

  /**
   * Transaction to run query under
   */
  transaction?: Transaction;

}

/**
 * Options used for Model.update
 */
export interface UpdateOptions {

  /**
   * Options to describe the scope of the search.
   */
  where: WhereOptions;

  /**
   * Fields to update (defaults to all fields)
   */
  fields?: Array<string>;

  /**
   * Should each row be subject to validation before it is inserted. The whole insert will fail if one row
   * fails validation.
   *
   * Defaults to true
   */
  validate?: boolean;

  /**
   * Run before / after bulk update hooks?
   *
   * Defaults to true
   */
  hooks?: boolean;

  /**
   * Whether or not to update the side effects of any virtual setters.
   *
   * Defaults to true
   */
  sideEffects?: boolean;

  /**
   * Run before / after update hooks?. If true, this will execute a SELECT followed by individual UPDATEs.
   * A select is needed, because the row data needs to be passed to the hooks
   *
   * Defaults to false
   */
  individualHooks?: boolean;

  /**
   * Return the affected rows (only for postgres)
   */
  returning?: boolean;

  /**
   * How many rows to update (only for mysql and mariadb)
   */
  limit?: number;

  /**
   * A function that gets executed while running the query to log the sql.
   */
  logging?: boolean | Function;

  /**
   * Transaction to run query under
   */
  transaction?: Transaction;

}

/**
 * Options used for Model.aggregate
 */
export interface AggregateOptions extends QueryOptions {
  /** A hash of search attributes. */
  where?: WhereOptions;

  /**
   * The type of the result. If `field` is a field in this Model, the default will be the type of that field,
   * otherwise defaults to float.
   */
  dataType?: DataType;

  /** Applies DISTINCT to the field being aggregated over */
  distinct?: boolean;
}

// instance


/**
 * Options used for Instance.increment method
 */
export interface IncrementDecrementOptions {

  /**
   * The number to increment by
   *
   * Defaults to 1
   */
  by?: number;

  /**
   * A function that gets executed while running the query to log the sql.
   */
  logging?: boolean | Function;

  /**
   * Transaction to run query under
   */
  transaction?: Transaction;

  /**
   * A hash of attributes to describe your search. See above for examples.
   */
  where?: WhereOptions;

}

/**
 * Options used for Instance.restore method
 */
export interface InstanceRestoreOptions {

  /**
   * A function that gets executed while running the query to log the sql.
   */
  logging?: boolean | Function;

  /**
   * Transaction to run query under
   */
  transaction?: Transaction;

}

/**
 * Options used for Instance.destroy method
 */
export interface InstanceDestroyOptions {

  /**
   * If set to true, paranoid models will actually be deleted
   */
  force?: boolean;

  /**
   * A function that gets executed while running the query to log the sql.
   */
  logging?: boolean | Function;

  /**
   * Transaction to run the query in
   */
  transaction?: Transaction;

}

/**
 * Options used for Instance.update method
 */
export interface InstanceUpdateOptions extends SaveOptions, SetOptions {

  /**
   * A hash of attributes to describe your search. See above for examples.
   */
  where?: WhereOptions;

}

/**
 * Options used for Instance.set method
 */
export interface SetOptions {

  /**
   * If set to true, field and virtual setters will be ignored
   */
  raw?: boolean;

  /**
   * Clear all previously set data values
   */
  reset?: boolean;

}

/**
 * Options used for Instance.save method
 */
export interface SaveOptions {

  /**
   * An optional array of strings, representing database columns. If fields is provided, only those columns
   * will be validated and saved.
   */
  fields?: Array<string>;

  /**
   * If true, the updatedAt timestamp will not be updated.
   *
   * Defaults to false
   */
  silent?: boolean;

  /**
   * If false, validations won't be run.
   *
   * Defaults to true
   */
  validate?: boolean;

  /**
   * A function that gets executed while running the query to log the sql.
   */
  logging?: boolean | Function;

  /**
   * Transaction to run the query in
   */
  transaction?: Transaction;
}


/**
 * Model validations, allow you to specify format/content/inheritance validations for each attribute of the
 * model.
 *
 * Validations are automatically run on create, update and save. You can also call validate() to manually
 * validate an instance.
 *
 * The validations are implemented by validator.js.
 */
export interface ModelValidateOptions {

  /**
   * is: ["^[a-z]+$",'i'] // will only allow letters
   * is: /^[a-z]+$/i      // same as the previous example using real RegExp
   */
  is?: string | Array<string | RegExp> | RegExp | { msg: string, args: string | Array<string | RegExp> | RegExp };

  /**
   * not: ["[a-z]",'i']  // will not allow letters
   */
  not?: string | Array<string | RegExp> | RegExp | { msg: string, args: string | Array<string | RegExp> | RegExp };

  /**
   * checks for email format (foo@bar.com)
   */
  isEmail?: boolean | { msg: string };

  /**
   * checks for url format (http://foo.com)
   */
  isUrl?: boolean | { msg: string };

  /**
   * checks for IPv4 (129.89.23.1) or IPv6 format
   */
  isIP?: boolean | { msg: string };

  /**
   * checks for IPv4 (129.89.23.1)
   */
  isIPv4?: boolean | { msg: string };

  /**
   * checks for IPv6 format
   */
  isIPv6?: boolean | { msg: string };

  /**
   * will only allow letters
   */
  isAlpha?: boolean | { msg: string };

  /**
   * will only allow alphanumeric characters, so "_abc" will fail
   */
  isAlphanumeric?: boolean | { msg: string };

  /**
   * will only allow numbers
   */
  isNumeric?: boolean | { msg: string };

  /**
   * checks for valid integers
   */
  isInt?: boolean | { msg: string };

  /**
   * checks for valid floating point numbers
   */
  isFloat?: boolean | { msg: string };

  /**
   * checks for any numbers
   */
  isDecimal?: boolean | { msg: string };

  /**
   * checks for lowercase
   */
  isLowercase?: boolean | { msg: string };

  /**
   * checks for uppercase
   */
  isUppercase?: boolean | { msg: string };

  /**
   * won't allow null
   */
  notNull?: boolean | { msg: string };

  /**
   * only allows null
   */
  isNull?: boolean | { msg: string };

  /**
   * don't allow empty strings
   */
  notEmpty?: boolean | { msg: string };

  /**
   * only allow a specific value
   */
  equals?: string | { msg: string };

  /**
   * force specific substrings
   */
  contains?: string | { msg: string };

  /**
   * check the value is not one of these
   */
  notIn?: Array<Array<string>> | { msg: string, args: Array<Array<string>> };

  /**
   * check the value is one of these
   */
  isIn?: Array<Array<string>> | { msg: string, args: Array<Array<string>> };

  /**
   * don't allow specific substrings
   */
  notContains?: Array<string> | string | { msg: string, args: Array<string> | string };

  /**
   * only allow values with length between 2 and 10
   */
  len?: [number, number] | { msg: string, args: [number, number] };

  /**
   * only allow uuids
   */
  isUUID?: number | { msg: string, args: number };

  /**
   * only allow date strings
   */
  isDate?: boolean | { msg: string, args: boolean };

  /**
   * only allow date strings after a specific date
   */
  isAfter?: string | { msg: string, args: string };

  /**
   * only allow date strings before a specific date
   */
  isBefore?: string | { msg: string, args: string };

  /**
   * only allow values
   */
  max?: number | { msg: string, args: number };

  /**
   * only allow values >= 23
   */
  min?: number | { msg: string, args: number };

  /**
   * only allow arrays
   */
  isArray?: boolean | { msg: string, args: boolean };

  /**
   * check for valid credit card numbers
   */
  isCreditCard?: boolean | { msg: string, args: boolean };

  /**
   * custom validations are also possible
   *
   * Implementation notes :
   *
   * We can't enforce any other method to be a function, so :
   *
   * ```typescript
   * [name: string] : ( value : any ) => boolean;
   * ```
   *
   * doesn't work in combination with the properties above
   *
   * @see https://github.com/Microsoft/TypeScript/issues/1889
   */
  [name: string]: any;

}

/**
 * Interface for indexes property in DefineOptions
 */
export interface ModelIndexesOptions {

  /**
   * The name of the index. Defaults to model name + _ + fields concatenated
   */
  name?: string,

  /**
   * Index type. Only used by mysql. One of `UNIQUE`, `FULLTEXT` and `SPATIAL`
   */
  index?: string,

  /**
   * The method to create the index by (`USING` statement in SQL). BTREE and HASH are supported by mysql and
   * postgres, and postgres additionally supports GIST and GIN.
   */
  method?: string,

  /**
   * Should the index by unique? Can also be triggered by setting type to `UNIQUE`
   *
   * Defaults to false
   */
  unique?: boolean,

  /**
   * PostgreSQL will build the index without taking any write locks. Postgres only
   *
   * Defaults to false
   */
  concurrently?: boolean,

  /**
   * An array of the fields to index. Each field can either be a string containing the name of the field,
   * a sequelize object (e.g `sequelize.fn`), or an object with the following attributes: `attribute`
   * (field name), `length` (create a prefix index of length chars), `order` (the direction the column
   * should be sorted in), `collate` (the collation (sort order) for the column)
   */
  fields?: Array<string | { attribute: string, length: number, order: string, collate: string }>

}

/**
 * Interface for name property in DefineOptions
 */
export interface ModelNameOptions {

  /**
   * Singular model name
   */
  singular?: string,

  /**
   * Plural model name
   */
  plural?: string,

}

/**
 * Interface for getterMethods in DefineOptions
 */
export interface ModelGetterOptions {
  [name: string]: () => any;
}

/**
 * Interface for setterMethods in DefineOptions
 */
export interface ModelSetterOptions {
  [name: string]: (val: any) => void;
}

/**
 * Interface for Define Scope Options
 */
export interface ModelScopeOptions {

  /**
   * Name of the scope and it's query
   */
  [scopeName: string]: FindOptions | Function;

}

/**
 * General column options
 */
export interface ColumnOptions {

  /**
   * If false, the column will have a NOT NULL constraint, and a not null validation will be run before an
   * instance is saved.
   */
  allowNull?: boolean;

  /**
   *  If set, sequelize will map the attribute name to a different name in the database
   */
  field?: string;

  /**
   * A literal default value, a JavaScript function, or an SQL function (see `sequelize.fn`)
   */
  defaultValue?: any;

}

/**
 * References options for the column's attributes
 */
export interface ModelAttributeColumnReferencesOptions {

  /**
   * If this column references another table, provide it here as a Model, or a string
   */
  model?: string | typeof Model;

  /**
   * The column of the foreign table that this column references
   */
  key?: string;

  /**
   * When to check for the foreign key constraing
   *
   * PostgreSQL only
   */
  deferrable?: AbstractDeferrable;

}

/**
 * Column options for the model schema attributes
 */
export interface ModelAttributeColumnOptions extends ColumnOptions {

  /**
   * A string or a data type
   */
  type: DataType;

  /**
   * If true, the column will get a unique constraint. If a string is provided, the column will be part of a
   * composite unique index. If multiple columns have the same string, they will be part of the same unique
   * index
   */
  unique?: boolean | string | { name: string, msg: string };

  /**
   * Primary key flag
   */
  primaryKey?: boolean;

  /**
   * Is this field an auto increment field
   */
  autoIncrement?: boolean;

  /**
   * Comment for the database
   */
  comment?: string;

  /**
   * An object with reference configurations
   */
  references?: ModelAttributeColumnReferencesOptions;

  /**
   * What should happen when the referenced key is updated. One of CASCADE, RESTRICT, SET DEFAULT, SET NULL or
   * NO ACTION
   */
  onUpdate?: string;

  /**
   * What should happen when the referenced key is deleted. One of CASCADE, RESTRICT, SET DEFAULT, SET NULL or
   * NO ACTION
   */
  onDelete?: string;

  /**
   * Provide a custom getter for this column. Use `this.getDataValue(String)` to manipulate the underlying
   * values.
   */
  get?: () => any;

  /**
   * Provide a custom setter for this column. Use `this.setDataValue(String, Value)` to manipulate the
   * underlying values.
   */
  set?: (val: any) => void;

  /**
   * An object of validations to execute for this column every time the model is saved. Can be either the
   * name of a validation provided by validator.js, a validation function provided by extending validator.js
   * (see the
   * `DAOValidator` property for more details), or a custom validation function. Custom validation functions
   * are called with the value of the field, and can possibly take a second callback argument, to signal that
   * they are asynchronous. If the validator is sync, it should throw in the case of a failed validation, it
   * it is async, the callback should be called with the error text.
   */
  validate?: ModelValidateOptions;

  /**
   * Usage in object notation
   *
   * ```js
   * sequelize.define('model', {
   *     states: {
   *       type:   Sequelize.ENUM,
   *       values: ['active', 'pending', 'deleted']
   *     }
   *   })
   * ```
   */
  values?: Array<string>;

}

/**
 * Interface for Attributes provided for a column
 */
export interface ModelAttributes {

  /**
   * The description of a database column
   */
  [name: string]: DataType | ModelAttributeColumnOptions;
}


/**
 * Options for Model.init. We mostly duplicate the Hooks here, since there is no way to combine the two
 * interfaces.
 *
 * beforeValidate, afterValidate, beforeBulkCreate, beforeBulkDestroy, beforeBulkUpdate, beforeCreate,
 * beforeDestroy, beforeUpdate, afterCreate, afterDestroy, afterUpdate, afterBulkCreate, afterBulkDestroy and
 * afterBulkUpdate.
 */
export interface HooksOptions {

  beforeValidate?: (instance: Model, options: Object) => any;
  afterValidate?: (instance: Model, options: Object) => any;
  beforeCreate?: (attributes: Model, options: CreateOptions) => any;
  afterCreate?: (attributes: Model, options: CreateOptions) => any;
  beforeDestroy?: (instance: Model, options: InstanceDestroyOptions) => any;
  beforeDelete?: (instance: Model, options: InstanceDestroyOptions) => any;
  afterDestroy?: (instance: Model, options: InstanceDestroyOptions) => any;
  afterDelete?: (instance: Model, options: InstanceDestroyOptions) => any;
  beforeUpdate?: (instance: Model, options: InstanceUpdateOptions) => any;
  afterUpdate?: (instance: Model, options: InstanceUpdateOptions) => any;
  beforeBulkCreate?: (instances: Array<Model>, options: BulkCreateOptions) => any;
  afterBulkCreate?: (instances: Array<Model>, options: BulkCreateOptions) => any;
  beforeBulkDestroy?: (options: DestroyOptions) => any;
  beforeBulkDelete?: (options: DestroyOptions) => any;
  afterBulkDestroy?: (options: DestroyOptions) => any;
  afterBulkDelete?: (options: DestroyOptions) => any;
  beforeBulkUpdate?: (options: UpdateOptions) => any;
  afterBulkUpdate?: (options: UpdateOptions) => any;
  beforeFind?: (options: FindOptions) => any;
  beforeCount?: (options: CountOptions) => any;
  beforeFindAfterExpandIncludeAll?: (options: FindOptions) => any;
  beforeFindAfterOptions?: (options: FindOptions) => any;
  afterFind?: (instancesOrInstance: Array<Model> | Model, options: FindOptions) => any;
  beforeSync?: (options: SyncOptions) => any;
  afterSync?: (options: SyncOptions) => any;
  beforeBulkSync?: (options: SyncOptions) => any;
  afterBulkSync?: (options: SyncOptions) => any;
}

/**
 * Options for model definition
 */
export interface ModelOptions {

  /**
   * Define the default search scope to use for this model. Scopes have the same form as the options passed to
   * find / findAll.
   */
  defaultScope?: FindOptions;

  /**
   * More scopes, defined in the same way as defaultScope above. See `Model.scope` for more information about
   * how scopes are defined, and what you can do with them
   */
  scopes?: ModelScopeOptions;

  /**
   * Don't persits null values. This means that all columns with null values will not be saved.
   */
  omitNull?: boolean;

  /**
   * Adds createdAt and updatedAt timestamps to the model. Default true.
   */
  timestamps?: boolean;

  /**
   * Calling destroy will not delete the model, but instead set a deletedAt timestamp if this is true. Needs
   * timestamps=true to work. Default false.
   */
  paranoid?: boolean;

  /**
   * Converts all camelCased columns to underscored if true. Default false.
   */
  underscored?: boolean;

  /**
   * Converts camelCased model names to underscored tablenames if true. Default false.
   */
  underscoredAll?: boolean;

  /**
   * Indicates if the model's table has a trigger associated with it. Default false.
   */
  hasTrigger?: boolean;

  /**
   * If freezeTableName is true, sequelize will not try to alter the DAO name to get the table name.
   * Otherwise, the dao name will be pluralized. Default false.
   */
  freezeTableName?: boolean;

  /**
   * An object with two attributes, `singular` and `plural`, which are used when this model is associated to
   * others.
   */
  name?: ModelNameOptions;

  /**
   * Indexes for the provided database table
   */
  indexes?: Array<ModelIndexesOptions>;

  /**
   * Override the name of the createdAt column if a string is provided, or disable it if false. Timestamps
   * must be true. Not affected by underscored setting.
   */
  createdAt?: string | boolean;

  /**
   * Override the name of the deletedAt column if a string is provided, or disable it if false. Timestamps
   * must be true. Not affected by underscored setting.
   */
  deletedAt?: string | boolean;

  /**
   * Override the name of the updatedAt column if a string is provided, or disable it if false. Timestamps
   * must be true. Not affected by underscored setting.
   */
  updatedAt?: string | boolean;

  /**
   * Defaults to pluralized model name, unless freezeTableName is true, in which case it uses model name
   * verbatim
   */
  tableName?: string;

  schema?: string;

  /**
   * You can also change the database engine, e.g. to MyISAM. InnoDB is the default.
   */
  engine?: string;

  charset?: string;

  /**
   * Finaly you can specify a comment for the table in MySQL and PG
   */
  comment?: string;

  collate?: string;

  /**
   * Set the initial AUTO_INCREMENT value for the table in MySQL.
   */
  initialAutoIncrement?: string;

  /**
   * An object of hook function that are called before and after certain lifecycle events.
   * The possible hooks are: beforeValidate, afterValidate, beforeBulkCreate, beforeBulkDestroy,
   * beforeBulkUpdate, beforeCreate, beforeDestroy, beforeUpdate, afterCreate, afterDestroy, afterUpdate,
   * afterBulkCreate, afterBulkDestory and afterBulkUpdate. See Hooks for more information about hook
   * functions and their signatures. Each property can either be a function, or an array of functions.
   */
  hooks?: HooksOptions;

  /**
   * An object of model wide validations. Validations have access to all model values via `this`. If the
   * validator function takes an argument, it is asumed to be async, and is called with a callback that
   * accepts an optional error.
   */
  validate?: ModelValidateOptions;

}

/**
 * Options passed to [[Model.init]]
 */
export interface InitOptions extends ModelOptions {
  /**
   * The sequelize connection. Required ATM.
   */
  sequelize: Sequelize;
}

export abstract class Model {

  /** The name of the database table */
  static tableName: string;

  /**
   * The name of the primary key attribute
   */
  static primaryKeyAttribute: string;

  /**
   * An object hash from alias to association object
   */
  static associations: any;

  /**
   * The options that the model was initialized with
   */
  static options: InitOptions;

  /**
   * The attributes of the model
   */
  static rawAttributes: { [attribute: string]: ModelAttributeColumnOptions };

  /**
   * The attributes of the model
   */
  static attributes: { [attribute: string]: ModelAttributeColumnOptions };

  /**
   * Returns true if this instance has not yet been persisted to the database
   */
  isNewRecord: boolean;

  /**
   * A reference to the sequelize instance
   */
  sequelize: Sequelize;

  /**
   * Initialize a model, representing a table in the DB, with attributes and options.
   *
   * The table columns are define by the hash that is given as the second argument. Each attribute of the hash represents a column. A short table definition might look like this:
   *
   * ```js
   * Project.init({
   *   columnA: {
   *     type: Sequelize.BOOLEAN,
   *     validate: {
   *       is: ['[a-z]','i'],        // will only allow letters
   *       max: 23,                  // only allow values <= 23
   *       isIn: {
   *         args: [['en', 'zh']],
   *         msg: "Must be English or Chinese"
   *       }
   *     },
   *     field: 'column_a'
   *     // Other attributes here
   *   },
   *   columnB: Sequelize.STRING,
   *   columnC: 'MY VERY OWN COLUMN TYPE'
   * }, {sequelize})
   *
   * sequelize.models.modelName // The model will now be available in models under the class name
   * ```
   *
   * As shown above, column definitions can be either strings, a reference to one of the datatypes that are predefined on the Sequelize constructor, or an object that allows you to specify both the type of the column, and other attributes such as default values, foreign key constraints and custom setters and getters.
   *
   * For a list of possible data types, see http://docs.sequelizejs.com/en/latest/docs/models-definition/#data-types
   *
   * For more about getters and setters, see http://docs.sequelizejs.com/en/latest/docs/models-definition/#getters-setters
   *
   * For more about instance and class methods, see http://docs.sequelizejs.com/en/latest/docs/models-definition/#expansion-of-models
   *
   * For more about validation, see http://docs.sequelizejs.com/en/latest/docs/models-definition/#validations
   *
   * @param attributes
   *  An object, where each attribute is a column of the table. Each column can be either a DataType, a
   *  string or a type-description object, with the properties described below:
   * @param options These options are merged with the default define options provided to the Sequelize constructor
   */
  static init(attributes: ModelAttributes, options: InitOptions): void;

  /**
   * Remove attribute from model definition
   *
   * @param attribute
   */
  static removeAttribute(attribute: string): void;

  /**
   * Sync this Model to the DB, that is create the table. Upon success, the callback will be called with the
   * model instance (this)
   */
  static sync(options?: SyncOptions): Promise<Model>;

  /**
   * Drop the table represented by this Model
   *
   * @param options
   */
  static drop(options?: DropOptions): Promise<void>;

  /**
   * Apply a schema to this model. For postgres, this will actually place the schema in front of the table
   * name
   * - `"schema"."tableName"`, while the schema will be prepended to the table name for mysql and
   * sqlite - `'schema.tablename'`.
   *
   * @param schema The name of the schema
   * @param options
   */
  static schema(schema: string, options?: SchemaOptions): Model; // I would like to use `this` as return type here, but https://github.com/Microsoft/TypeScript/issues/5863

  /**
   * Get the tablename of the model, taking schema into account. The method will return The name as a string
   * if the model has no schema, or an object with `tableName`, `schema` and `delimiter` properties.
   *
   * @param options The hash of options from any query. You can use one model to access tables with matching
   *     schemas by overriding `getTableName` and using custom key/values to alter the name of the table.
   *     (eg.
   *     subscribers_1, subscribers_2)
   * @param options.logging=false A function that gets executed while running the query to log the sql.
   */
  static getTableName(options?: { logging: Function }): string | Object;

  /**
   * Apply a scope created in `define` to the model. First let's look at how to create scopes:
   * ```js
   * var Model = sequelize.define('model', attributes, {
   *   defaultScope: {
   *     where: {
   *       username: 'dan'
   *     },
   *     limit: 12
   *   },
   *   scopes: {
   *     isALie: {
   *       where: {
   *         stuff: 'cake'
   *       }
   *     },
   *     complexFunction: function(email, accessLevel) {
   *       return {
   *         where: {
   *           email: {
   *             $like: email
   *           },
   *           accesss_level {
   *             $gte: accessLevel
   *           }
   *         }
   *       }
   *     }
   *   }
   * })
   * ```
   * Now, since you defined a default scope, every time you do Model.find, the default scope is appended to
   * your query. Here's a couple of examples:
   * ```js
   * Model.findAll() // WHERE username = 'dan'
   * Model.findAll({ where: { age: { gt: 12 } } }) // WHERE age > 12 AND username = 'dan'
   * ```
   *
   * To invoke scope functions you can do:
   * ```js
   * Model.scope({ method: ['complexFunction' 'dan@sequelize.com', 42]}).findAll()
   * // WHERE email like 'dan@sequelize.com%' AND access_level >= 42
   * ```
   *
   * @return Model A reference to the model, with the scope(s) applied. Calling scope again on the returned
   *     model will clear the previous scope.
   */
  static scope(options?: string | Array<string> | ScopeOptions | WhereAttributeHash): typeof Model;

  /**
   * Search for multiple instances.
   *
   * __Simple search using AND and =__
   * ```js
   * Model.findAll({
   *   where: {
   *     attr1: 42,
   *     attr2: 'cake'
   *   }
   * })
   * ```
   * ```sql
   * WHERE attr1 = 42 AND attr2 = 'cake'
   * ```
   *
   * __Using greater than, less than etc.__
   * ```js
   *
   * Model.findAll({
   *   where: {
   *     attr1: {
   *       gt: 50
   *     },
   *     attr2: {
   *       lte: 45
   *     },
   *     attr3: {
   *       in: [1,2,3]
   *     },
   *     attr4: {
   *       ne: 5
   *     }
   *   }
   * })
   * ```
   * ```sql
   * WHERE attr1 > 50 AND attr2 <= 45 AND attr3 IN (1,2,3) AND attr4 != 5
   * ```
   * Possible options are: `$ne, $in, $not, $notIn, $gte, $gt, $lte, $lt, $like, $ilike/$iLike, $notLike,
   * $notILike, '..'/$between, '!..'/$notBetween, '&&'/$overlap, '@>'/$contains, '<@'/$contained`
   *
   * __Queries using OR__
   * ```js
   * Model.findAll({
   *   where: Sequelize.and(
   *     { name: 'a project' },
   *     Sequelize.or(
   *       { id: [1,2,3] },
   *       { id: { gt: 10 } }
   *     )
   *   )
   * })
   * ```
   * ```sql
   * WHERE name = 'a project' AND (id` IN (1,2,3) OR id > 10)
   * ```
   *
   * The success listener is called with an array of instances if the query succeeds.
   *
   * @see    {Sequelize#query}
   */
  static findAll<M extends Model>(this: {new (): M} & typeof Model, options?: FindOptions): Promise<M[]>;
  static all<M extends Model>(this: {new (): M} & typeof Model, options?: FindOptions): Promise<M[]>;

  /**
   * Search for a single instance by its primary key. This applies LIMIT 1, so the listener will
   * always be called with a single instance.
   */
  static findById<M extends Model>(this: {new (): M} & typeof Model, identifier?: number | string, options?: FindOptions): Promise<M | null>;
  static findByPrimary<M extends Model>(this: {new (): M} & typeof Model, identifier?: number | string, options?: FindOptions): Promise<M | null>;

  /**
   * Search for a single instance. This applies LIMIT 1, so the listener will always be called with a single
   * instance.
   */
  static findOne<M extends Model>(this: {new (): M} & typeof Model, options?: FindOptions): Promise<M | null>;
  static find<M extends Model>(this: {new (): M} & typeof Model, options?: FindOptions): Promise<M | null>;

  /**
   * Run an aggregation method on the specified field
   *
   * @param field The field to aggregate over. Can be a field name or *
   * @param aggregateFunction The function to use for aggregation, e.g. sum, max etc.
   * @param options Query options. See sequelize.query for full options
   * @return Returns the aggregate result cast to `options.dataType`, unless `options.plain` is false, in
   *     which case the complete data result is returned.
   */
  aggregate(field: keyof this, aggregateFunction: string, options?: AggregateOptions): Promise<any>;
  static aggregate<M extends Model>(this: {new (): M} & typeof Model, field: keyof M, aggregateFunction: string, options?: AggregateOptions): Promise<any>;

  /**
   * Count the number of records matching the provided where clause.
   *
   * If you provide an `include` option, the number of matching associations will be counted instead.
   */
  static count(options?: CountOptions): Promise<number>;

  /**
   * Find all the rows matching your query, within a specified offset / limit, and get the total number of
   * rows matching your query. This is very usefull for paging
   *
   * ```js
   * Model.findAndCountAll({
   *   where: ...,
   *   limit: 12,
   *   offset: 12
   * }).then(function (result) {
   *   ...
   * })
   * ```
   * In the above example, `result.rows` will contain rows 13 through 24, while `result.count` will return
   * the
   * total number of rows that matched your query.
   *
   * When you add includes, only those which are required (either because they have a where clause, or
   * because
   * `required` is explicitly set to true on the include) will be added to the count part.
   *
   * Suppose you want to find all users who have a profile attached:
   * ```js
   * User.findAndCountAll({
   *   include: [
   *      { model: Profile, required: true}
   *   ],
   *   limit 3
   * });
   * ```
   * Because the include for `Profile` has `required` set it will result in an inner join, and only the users
   * who have a profile will be counted. If we remove `required` from the include, both users with and
   * without
   * profiles will be counted
   */
  static findAndCount<M extends Model>(this: {new (): M} & typeof Model, options?: FindAndCountOptions): Promise<{ rows: M[], count: number }>;
  static findAndCountAll<M extends Model>(this: {new (): M} & typeof Model, options?: FindAndCountOptions): Promise<{ rows: M[], count: number }>;

  /**
   * Find the maximum value of field
   */
  static max<M extends Model>(this: {new (): M} & typeof Model, field: keyof M, options?: AggregateOptions): Promise<any>;

  /**
   * Find the minimum value of field
   */
  static min<M extends Model>(this: {new (): M} & typeof Model, field: keyof M, options?: AggregateOptions): Promise<any>;

  /**
   * Find the sum of field
   */
  static sum<M extends Model>(this: {new (): M} & typeof Model, field: keyof M, options?: AggregateOptions): Promise<number>;

  /**
   * Builds a new model instance. Values is an object of key value pairs, must be defined but can be empty.
   */
  static build<M extends Model>(this: {new (): M} & typeof Model, record?: Partial<M>, options?: BuildOptions): M;

  /**
   * Undocumented bulkBuild
   */
  static bulkBuild<M extends Model>(this: {new (): M} & typeof Model, records: Partial<M>[], options?: BuildOptions): M[];

  /**
   * Builds a new model instance and calls save on it.
   */
  static create<M extends Model>(this: {new (): M} & typeof Model, values?: Partial<M>, options?: CreateOptions): Promise<M>;

  /**
   * Find a row that matches the query, or build (but don't save) the row if none is found.
   * The successfull result of the promise will be (instance, initialized) - Make sure to use .spread()
   */
  static findOrInitialize<M extends Model>(this: {new (): M} & typeof Model, options: FindOrInitializeOptions): Promise<[M, boolean]>;
  static findOrBuild<M extends Model>(this: {new (): M} & typeof Model, options: FindOrInitializeOptions): Promise<[M, boolean]>;

  /**
   * Find a row that matches the query, or build and save the row if none is found
   * The successful result of the promise will be (instance, created) - Make sure to use .spread()
   *
   * If no transaction is passed in the `options` object, a new transaction will be created internally, to
   * prevent the race condition where a matching row is created by another connection after the find but
   * before the insert call. However, it is not always possible to handle this case in SQLite, specifically
   * if one transaction inserts and another tries to select before the first one has comitted. In this case,
   * an instance of sequelize.TimeoutError will be thrown instead. If a transaction is created, a savepoint
   * will be created instead, and any unique constraint violation will be handled internally.
   */
  static findOrCreate<M extends Model>(this: {new (): M} & typeof Model, options: FindOrInitializeOptions): Promise<[M, boolean]>;

  /**
   * Insert or update a single row. An update will be executed if a row which matches the supplied values on
   * either the primary key or a unique key is found. Note that the unique index must be defined in your
   * sequelize model and not just in the table. Otherwise you may experience a unique constraint violation,
   * because sequelize fails to identify the row that should be updated.
   *
   * **Implementation details:**
   *
   * * MySQL - Implemented as a single query `INSERT values ON DUPLICATE KEY UPDATE values`
   * * PostgreSQL - Implemented as a temporary function with exception handling: INSERT EXCEPTION WHEN
   *   unique_constraint UPDATE
   * * SQLite - Implemented as two queries `INSERT; UPDATE`. This means that the update is executed
   * regardless
   *   of whether the row already existed or not
   *
   * **Note** that SQLite returns undefined for created, no matter if the row was created or updated. This is
   * because SQLite always runs INSERT OR IGNORE + UPDATE, in a single query, so there is no way to know
   * whether the row was inserted or not.
   */
  static upsert<M extends Model>(this: {new (): M} & typeof Model, values: Partial<M>, options?: UpsertOptions): Promise<boolean>;
  static insertOrUpdate<M extends Model>(this: {new (): M} & typeof Model, values: Partial<M>, options?: UpsertOptions): Promise<boolean>;

  /**
   * Create and insert multiple instances in bulk.
   *
   * The success handler is passed an array of instances, but please notice that these may not completely
   * represent the state of the rows in the DB. This is because MySQL and SQLite do not make it easy to
   * obtain
   * back automatically generated IDs and other default values in a way that can be mapped to multiple
   * records. To obtain Instances for the newly created values, you will need to query for them again.
   *
   * @param records List of objects (key/value pairs) to create instances from
   */
  static bulkCreate<M extends Model>(this: {new (): M} & typeof Model, records: Partial<M>[], options?: BulkCreateOptions): Promise<M[]>;

  /**
   * Truncate all instances of the model. This is a convenient method for Model.destroy({ truncate: true }).
   */
  static truncate(options?: TruncateOptions): Promise<void>;

  /**
   * Delete multiple instances, or set their deletedAt timestamp to the current time if `paranoid` is enabled.
   *
   * @return Promise<number> The number of destroyed rows
   */
  static destroy(options?: DestroyOptions): Promise<number>;

  /**
   * Restore multiple instances if `paranoid` is enabled.
   */
  static restore(options?: RestoreOptions): Promise<void>;

  /**
   * Update multiple instances that match the where options. The promise returns an array with one or two
   * elements. The first element is always the number of affected rows, while the second element is the actual
   * affected rows (only supported in postgres with `options.returning` true.)
   */
  static update<M extends Model>(this: {new (): M} & typeof Model, values: Partial<M>, options: UpdateOptions): Promise<[number, M[]]>;

  /**
   * Run a describe query on the table. The result will be return to the listener as a hash of attributes and
   * their types.
   */
  static describe(): Promise<object>;

  /**
   * Unscope the model
   */
  static unscoped<M extends typeof Model>(this: M): M;

  /**
   * Add a hook to the model
   *
   * @param hookType
   * @param name Provide a name for the hook function. It can be used to remove the hook later or to order
   *     hooks based on some sort of priority system in the future.
   * @param fn The hook function
   *
   * @alias hook
   */
  static addHook<C extends typeof Model>(this: C, hookType: string, name: string, fn: Function): C;
  static addHook<C extends typeof Model>(this: C, hookType: string, fn: Function): C;
  static hook<C extends typeof Model>(this: C, hookType: string, name: string, fn: Function): C;
  static hook<C extends typeof Model>(this: C, hookType: string, fn: Function): C;

  /**
   * Remove hook from the model
   *
   * @param hookType
   * @param name
   */
  static removeHook<C extends typeof Model>(this: C, hookType: string, name: string): C;

  /**
   * Check whether the mode has any hooks of this type
   *
   * @param hookType
   *
   * @alias hasHooks
   */
  static hasHook(hookType: string): boolean;
  static hasHooks(hookType: string): boolean;

  /**
   * A hook that is run before validation
   *
   * @param name
   * @param fn A callback function that is called with instance, options
   */
  static beforeValidate(name: string, fn: (instance: Model, options: object) => void): void;
  static beforeValidate(fn: (instance: Model, options: object) => void): void;

  /**
   * A hook that is run after validation
   *
   * @param name
   * @param fn A callback function that is called with instance, options
   */
  static afterValidate(name: string, fn: (instance: Model, options: Object) => void): void;
  static afterValidate(fn: (instance: Model, options: Object) => void): void;

  /**
   * A hook that is run before creating a single instance
   *
   * @param name
   * @param fn A callback function that is called with attributes, options
   */
  static beforeCreate(name: string, fn: (attributes: Model, options: CreateOptions) => void): void;
  static beforeCreate(fn: (attributes: Model, options: CreateOptions) => void): void;

  /**
   * A hook that is run after creating a single instance
   *
   * @param name
   * @param fn A callback function that is called with attributes, options
   */
  static afterCreate(name: string, fn: (attributes: Model, options: CreateOptions) => void): void;
  static afterCreate(fn: (attributes: Model, options: CreateOptions) => void): void;

  /**
   * A hook that is run before destroying a single instance
   *
   * @param name
   * @param fn A callback function that is called with instance, options
   * @alias beforeDelete
   */
  static beforeDestroy(name: string, fn: (instance: Model, options: InstanceDestroyOptions) => void): void;
  static beforeDestroy(fn: (instance: Model, options: InstanceDestroyOptions) => void): void;
  static beforeDelete(name: string, fn: (instance: Model, options: InstanceDestroyOptions) => void): void;
  static beforeDelete(fn: (instance: Model, options: InstanceDestroyOptions) => void): void;

  /**
   * A hook that is run after destroying a single instance
   *
   * @param name
   * @param fn A callback function that is called with instance, options
   * @alias afterDelete
   */
  static afterDestroy(name: string, fn: (instance: Model, options: InstanceDestroyOptions) => void): void;
  static afterDestroy(fn: (instance: Model, options: InstanceDestroyOptions) => void): void;
  static afterDelete(name: string, fn: (instance: Model, options: InstanceDestroyOptions) => void): void;
  static afterDelete(fn: (instance: Model, options: InstanceDestroyOptions) => void): void;

  /**
   * A hook that is run before updating a single instance
   *
   * @param name
   * @param fn A callback function that is called with instance, options
   */
  static beforeUpdate(name: string,
    fn: (instance: Model, options: UpdateOptions) => void): void;
  static beforeUpdate(fn: (instance: Model, options: UpdateOptions) => void): void;

  /**
   * A hook that is run after updating a single instance
   *
   * @param name
   * @param fn A callback function that is called with instance, options
   */
  static afterUpdate(name: string, fn: (instance: Model, options: UpdateOptions) => void): void;
  static afterUpdate(fn: (instance: Model, options: UpdateOptions) => void): void;

  /**
   * A hook that is run before creating instances in bulk
   *
   * @param name
   * @param fn A callback function that is called with instances, options
   */
  static beforeBulkCreate(name: string, fn: (instances: Model[], options: BulkCreateOptions) => void): void;
  static beforeBulkCreate(fn: (instances: Model[], options: BulkCreateOptions) => void): void;

  /**
   * A hook that is run after creating instances in bulk
   *
   * @param name
   * @param fn A callback function that is called with instances, options
   * @name afterBulkCreate
   */
  static afterBulkCreate(name: string, fn: (instances: Model[], options: BulkCreateOptions) => void): void;
  static afterBulkCreate(fn: (instances: Model[], options: BulkCreateOptions) => void): void;

  /**
   * A hook that is run before destroying instances in bulk
   *
   * @param name
   * @param fn   A callback function that is called with options
   *
   * @alias beforeBulkDelete
   */
  static beforeBulkDestroy(name: string, fn: (options: BulkCreateOptions) => void): void;
  static beforeBulkDestroy(fn: (options: BulkCreateOptions) => void): void;
  static beforeBulkDelete(name: string, fn: (options: BulkCreateOptions) => void): void;
  static beforeBulkDelete(fn: (options: BulkCreateOptions) => void): void;

  /**
   * A hook that is run after destroying instances in bulk
   *
   * @param name
   * @param fn   A callback function that is called with options
   *
   * @alias afterBulkDelete
   */
  static afterBulkDestroy(name: string, fn: (options: DestroyOptions) => void): void;
  static afterBulkDestroy(fn: (options: DestroyOptions) => void): void;
  static afterBulkDelete(name: string, fn: (options: DestroyOptions) => void): void;
  static afterBulkDelete(fn: (options: DestroyOptions) => void): void;

  /**
   * A hook that is run after updating instances in bulk
   *
   * @param name
   * @param fn   A callback function that is called with options
   */
  static beforeBulkUpdate(name: string, fn: (options: UpdateOptions) => void): void;
  static beforeBulkUpdate(fn: (options: UpdateOptions) => void): void;

  /**
   * A hook that is run after updating instances in bulk
   *
   * @param name
   * @param fn   A callback function that is called with options
   */
  static afterBulkUpdate(name: string, fn: (options: UpdateOptions) => void): void;
  static afterBulkUpdate(fn: (options: UpdateOptions) => void): void;

  /**
   * A hook that is run before a find (select) query
   *
   * @param name
   * @param fn   A callback function that is called with options
   */
  static beforeFind(name: string, fn: (options: FindOptions) => void): void;
  static beforeFind(fn: (options: FindOptions) => void): void;

  /**
   * A hook that is run before a count query
   *
   * @param name
   * @param fn   A callback function that is called with options
   */
  static beforeCount(name: string, fn: (options: CountOptions) => void): void;
  static beforeCount(fn: (options: CountOptions) => void): void;

  /**
   * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded
   *
   * @param name
   * @param fn   A callback function that is called with options
   */
  static beforeFindAfterExpandIncludeAll(name: string, fn: (options: FindOptions) => void): void;
  static beforeFindAfterExpandIncludeAll(fn: (options: FindOptions) => void): void;

  /**
   * A hook that is run before a find (select) query, after all option parsing is complete
   *
   * @param name
   * @param fn   A callback function that is called with options
   */
  static beforeFindAfterOptions(name: string, fn: (options: FindOptions) => void): void;
  static beforeFindAfterOptions(fn: (options: FindOptions) => void): void;

  /**
   * A hook that is run after a find (select) query
   *
   * @param name
   * @param fn   A callback function that is called with instance(s), options
   */
  static afterFind(name: string, fn: (instancesOrInstance: Model[] | Model, options: FindOptions,
    fn?: Function) => void): void;
  static afterFind(fn: (instancesOrInstance: Model[] | Model, options: FindOptions,
    fn?: Function) => void): void;

  /**
   * A hook that is run before a define call
   *
   * @param name
   * @param fn   A callback function that is called with attributes, options
   */
  static beforeDefine(name: string, fn: (attributes: ModelAttributes, options: ModelOptions) => void): void;
  static beforeDefine(fn: (attributes: ModelAttributes, options: ModelOptions) => void): void;

  /**
   * A hook that is run after a define call
   *
   * @param name
   * @param fn   A callback function that is called with factory
   */
  static afterDefine(name: string, fn: (model: typeof Model) => void): void;
  static afterDefine(fn: (model: typeof Model) => void): void;

  /**
   * A hook that is run before Sequelize() call
   *
   * @param name
   * @param fn   A callback function that is called with config, options
   */
  static beforeInit(name: string, fn: (config: Object, options: Object) => void): void;
  static beforeInit(fn: (config: Object, options: Object) => void): void;

  /**
   * A hook that is run after Sequelize() call
   *
   * @param name
   * @param fn   A callback function that is called with sequelize
   */
  static afterInit(name: string, fn: (sequelize: Sequelize) => void): void;
  static afterInit(fn: (sequelize: Sequelize) => void): void;

  /**
   * A hook that is run before sequelize.sync call
   * @param {String}   name
   * @param {Function} fn   A callback function that is called with options passed to sequelize.sync
   * @name beforeBulkSync
   */
  static beforeBulkSync(name: string, fn: (options: SyncOptions) => any): void;
  static beforeBulkSync(fn: (options: SyncOptions) => any): void;

  /**
   * A hook that is run after sequelize.sync call
   * @param {String}   name
   * @param {Function} fn   A callback function that is called with options passed to sequelize.sync
   * @name afterBulkSync
   */
  static afterBulkSync(name: string, fn: (options: SyncOptions) => any): void;
  static afterBulkSync(fn: (options: SyncOptions) => any): void;

  /**
   * A hook that is run before Model.sync call
   * @param {String}   name
   * @param {Function} fn   A callback function that is called with options passed to Model.sync
   * @name beforeSync
   */
  static beforeSync(name: string, fn: (options: SyncOptions) => any): void;
  static beforeSync(fn: (options: SyncOptions) => any): void;

  /**
   * A hook that is run after Model.sync call
   * @param {String}   name
   * @param {Function} fn   A callback function that is called with options passed to Model.sync
   * @name afterSync
   */
  static afterSync(name: string, fn: (options: SyncOptions) => any): void;
  static afterSync(fn: (options: SyncOptions) => any): void;

  /**
   * Creates an association between this (the source) and the provided target. The foreign key is added
   * on the target.
   *
   * Example: `User.hasOne(Profile)`. This will add userId to the profile table.
   *
   * @param target The model that will be associated with hasOne relationship
   * @param options Options for the association
   */
  static hasOne(target: typeof Model, options?: HasOneOptions): HasOne;

  /**
   * Creates an association between this (the source) and the provided target. The foreign key is added on the
   * source.
   *
   * Example: `Profile.belongsTo(User)`. This will add userId to the profile table.
   *
   * @param target The model that will be associated with hasOne relationship
   * @param options Options for the association
   */
  static belongsTo(target: typeof Model, options?: BelongsToOptions): BelongsTo;

  /**
   * Create an association that is either 1:m or n:m.
   *
   * ```js
   * // Create a 1:m association between user and project
   * User.hasMany(Project)
   * ```
   * ```js
   * // Create a n:m association between user and project
   * User.hasMany(Project)
   * Project.hasMany(User)
   * ```
   * By default, the name of the join table will be source+target, so in this case projectsusers. This can be
   * overridden by providing either a string or a Model as `through` in the options. If you use a through
   * model with custom attributes, these attributes can be set when adding / setting new associations in two
   * ways. Consider users and projects from before with a join table that stores whether the project has been
   * started yet:
   * ```js
   * var UserProjects = sequelize.define('userprojects', {
   *   started: Sequelize.BOOLEAN
   * })
   * User.hasMany(Project, { through: UserProjects })
   * Project.hasMany(User, { through: UserProjects })
   * ```
   * ```js
   * jan.addProject(homework, { started: false }) // The homework project is not started yet
   * jan.setProjects([makedinner, doshopping], { started: true}) // Both shopping and dinner have been
   * started
   * ```
   *
   * If you want to set several target instances, but with different attributes you have to set the
   * attributes on the instance, using a property with the name of the through model:
   *
   * ```js
   * p1.userprojects {
   *   started: true
   * }
   * user.setProjects([p1, p2], {started: false}) // The default value is false, but p1 overrides that.
   * ```
   *
   * Similarily, when fetching through a join table with custom attributes, these attributes will be
   * available as an object with the name of the through model.
   * ```js
   * user.getProjects().then(function (projects) {
   *   var p1 = projects[0]
   *   p1.userprojects.started // Is this project started yet?
   * })
   * ```
   *
   * @param target The model that will be associated with hasOne relationship
   * @param options Options for the association
   */
  static hasMany(target: typeof Model, options?: HasManyOptions): HasMany;

  /**
   * Create an N:M association with a join table
   *
   * ```js
   * User.belongsToMany(Project)
   * Project.belongsToMany(User)
   * ```
   * By default, the name of the join table will be source+target, so in this case projectsusers. This can be
   * overridden by providing either a string or a Model as `through` in the options.
   *
   * If you use a through model with custom attributes, these attributes can be set when adding / setting new
   * associations in two ways. Consider users and projects from before with a join table that stores whether
   * the project has been started yet:
   * ```js
   * var UserProjects = sequelize.define('userprojects', {
   *   started: Sequelize.BOOLEAN
   * })
   * User.belongsToMany(Project, { through: UserProjects })
   * Project.belongsToMany(User, { through: UserProjects })
   * ```
   * ```js
   * jan.addProject(homework, { started: false }) // The homework project is not started yet
   * jan.setProjects([makedinner, doshopping], { started: true}) // Both shopping and dinner has been started
   * ```
   *
   * If you want to set several target instances, but with different attributes you have to set the
   * attributes on the instance, using a property with the name of the through model:
   *
   * ```js
   * p1.userprojects {
   *   started: true
   * }
   * user.setProjects([p1, p2], {started: false}) // The default value is false, but p1 overrides that.
   * ```
   *
   * Similarily, when fetching through a join table with custom attributes, these attributes will be
   * available as an object with the name of the through model.
   * ```js
   * user.getProjects().then(function (projects) {
   *   var p1 = projects[0]
   *   p1.userprojects.started // Is this project started yet?
   * })
   * ```
   *
   * @param target The model that will be associated with hasOne relationship
   * @param options Options for the association
   *
   */
  static belongsToMany(target: typeof Model, options: BelongsToManyOptions): BelongsToMany;

  /**
   * Builds a new model instance.
   * @param values an object of key value pairs
   */
  constructor(values?: object, options?: BuildOptions);

  /**
   * Get an object representing the query for this instance, use with `options.where`
   */
  where(): Object;

  /**
   * Get the value of the underlying data value
   */
  getDataValue<K extends keyof this>(key: K): this[K];

  /**
   * Update the underlying data value
   */
  setDataValue<K extends keyof this>(key: K, value: this[K]): void;

  /**
   * If no key is given, returns all values of the instance, also invoking virtual getters.
   *
   * If key is given and a field or virtual getter is present for the key it will call that getter - else it
   * will return the value for key.
   *
   * @param options.plain If set to true, included instances will be returned as plain objects
   */
  get(options?: { plain?: boolean, clone?: boolean }): object;
  get<K extends keyof this>(key: K, options?: { plain?: boolean, clone?: boolean }): this[K];

  /**
   * Set is used to update values on the instance (the sequelize representation of the instance that is,
   * remember that nothing will be persisted before you actually call `save`). In its most basic form `set`
   * will update a value stored in the underlying `dataValues` object. However, if a custom setter function
   * is defined for the key, that function will be called instead. To bypass the setter, you can pass `raw:
   * true` in the options object.
   *
   * If set is called with an object, it will loop over the object, and call set recursively for each key,
   * value pair. If you set raw to true, the underlying dataValues will either be set directly to the object
   * passed, or used to extend dataValues, if dataValues already contain values.
   *
   * When set is called, the previous value of the field is stored and sets a changed flag(see `changed`).
   *
   * Set can also be used to build instances for associations, if you have values for those.
   * When using set with associations you need to make sure the property key matches the alias of the
   * association while also making sure that the proper include options have been set (from .build() or
   * .find())
   *
   * If called with a dot.seperated key on a JSON/JSONB attribute it will set the value nested and flag the
   * entire object as changed.
   *
   * @param options.raw If set to true, field and virtual setters will be ignored
   * @param options.reset Clear all previously set data values
   */
  set<K extends keyof this>(key: K, value: this[K], options?: SetOptions): this;
  set(keys: Partial<this>, options?: SetOptions): this;
  setAttributes<K extends keyof this>(key: K, value: this[K], options?: SetOptions): this;
  setAttributes(keys: Partial<this>, options?: SetOptions): this;

  /**
   * If changed is called with a string it will return a boolean indicating whether the value of that key in
   * `dataValues` is different from the value in `_previousDataValues`.
   *
   * If changed is called without an argument, it will return an array of keys that have changed.
   *
   * If changed is called with two arguments, it will set the property to `dirty`.
   *
   * If changed is called without an argument and no keys have changed, it will return `false`.
   */
  changed(key: keyof this): boolean;
  changed(key: keyof this, dirty: boolean): void;
  changed(): false | string[];

  /**
   * Returns the previous value for key from `_previousDataValues`.
   */
  previous<K extends keyof this>(key: K): this[K];

  /**
   * Validate this instance, and if the validation passes, persist it to the database.
   *
   * On success, the callback will be called with this instance. On validation error, the callback will be
   * called with an instance of `Sequelize.ValidationError`. This error will have a property for each of the
   * fields for which validation failed, with the error message for that field.
   */
  save(options?: SaveOptions): Promise<this>;

  /**
   * Refresh the current instance in-place, i.e. update the object with current data from the DB and return
   * the same object. This is different from doing a `find(Instance.id)`, because that would create and
   * return a new instance. With this method, all references to the Instance are updated with the new data
   * and no new objects are created.
   */
  reload(options?: FindOptions): Promise<this>;

  /**
   * Validate the attribute of this instance according to validation rules set in the model definition.
   *
   * Emits null if and only if validation successful; otherwise an Error instance containing
   * { field name : [error msgs] } entries.
   *
   * @param options.skip An array of strings. All properties that are in this array will not be validated
   */
  validate(options?: { skip?: string[] }): Promise<void>;

  /**
   * This is the same as calling `set` and then calling `save`.
   */
  update<K extends keyof this>(key: K, value: this[K], options?: InstanceUpdateOptions): Promise<this>;
  update(keys: Partial<this>, options?: InstanceUpdateOptions): Promise<this>;
  updateAttributes<K extends keyof this>(key: K, value: this[K], options?: InstanceUpdateOptions): Promise<this>;
  updateAttributes(keys: Partial<this>, options?: InstanceUpdateOptions): Promise<this>;

  /**
   * Destroy the row corresponding to this instance. Depending on your setting for paranoid, the row will
   * either be completely deleted, or have its deletedAt timestamp set to the current time.
   */
  destroy(options?: InstanceDestroyOptions): Promise<void>;

  /**
   * Restore the row corresponding to this instance. Only available for paranoid models.
   */
  restore(options?: InstanceRestoreOptions): Promise<void>;

  /**
   * Increment the value of one or more columns. This is done in the database, which means it does not use
   * the values currently stored on the Instance. The increment is done using a
   * ```sql
   * SET column = column + X
   * ```
   * query. To get the correct value after an increment into the Instance you should do a reload.
   *
   * ```js
   * instance.increment('number') // increment number by 1
   * instance.increment(['number', 'count'], { by: 2 }) // increment number and count by 2
   * instance.increment({ answer: 42, tries: 1}, { by: 2 }) // increment answer by 42, and tries by 1.
   *                                                        // `by` is ignored, since each column has its own
   *                                                        // value
   * ```
   *
   * @param fields If a string is provided, that column is incremented by the value of `by` given in options.
   *               If an array is provided, the same is true for each column.
   *               If and object is provided, each column is incremented by the value given.
   */
  increment(fields: keyof this | (keyof this)[] | Partial<this>, options?: IncrementDecrementOptions): Promise<this>;

  /**
   * Decrement the value of one or more columns. This is done in the database, which means it does not use
   * the values currently stored on the Instance. The decrement is done using a
   * ```sql
   * SET column = column - X
   * ```
   * query. To get the correct value after an decrement into the Instance you should do a reload.
   *
   * ```js
   * instance.decrement('number') // decrement number by 1
   * instance.decrement(['number', 'count'], { by: 2 }) // decrement number and count by 2
   * instance.decrement({ answer: 42, tries: 1}, { by: 2 }) // decrement answer by 42, and tries by 1.
   *                                                        // `by` is ignored, since each column has its own
   *                                                        // value
   * ```
   *
   * @param fields If a string is provided, that column is decremented by the value of `by` given in options.
   *               If an array is provided, the same is true for each column.
   *               If and object is provided, each column is decremented by the value given
   */
  decrement(fields: keyof this | (keyof this)[] | Partial<this>, options?: IncrementDecrementOptions): Promise<this>;

  /**
   * Check whether all values of this and `other` Instance are the same
   */
  equals(other: this): boolean;

  /**
   * Check if this is eqaul to one of `others` by calling equals
   */
  equalsOneOf(others: this[]): boolean;

  /**
   * Convert the instance to a JSON representation. Proxies to calling `get` with no keys. This means get all
   * values gotten from the DB, and apply all custom getters.
   */
  toJSON(): object;
}

export default Model;
}
declare module 'sequelize/lib/model' {
export * from '~sequelize/lib/model';
export { default } from '~sequelize/lib/model';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-sequelize/e12e516e5de4d9b95e5a44be3f16648a1ba74eed/lib/associations/base.d.ts
declare module '~sequelize/lib/associations/base' {

import {Model} from '~sequelize/lib/model';
import {ColumnOptions} from '~sequelize/lib/model';

export abstract class Association {
  associationType: string;
  source: typeof Model;
  target: typeof Model;
  isSelfAssociation: boolean;
  isSingleAssociation: boolean;
  isMultiAssociation: boolean;
  as: string;
  isAliased: boolean;
  foreignKey: string;
  identifier: string;
  toInstanceArray(objs: any): Model[];
  inspect(): string;
}

export interface SingleAssociationAccessors {
  get: string;
  set: string;
  create: string;
}

export interface MultiAssociationAccessors {
  get: string;
  set: string;
  addMultiple: string;
  add: string;
  create: string;
  remove: string;
  removeMultiple: string;
  hasSingle: string;
  hasAll: string;
  count: string;
}

/** Foreign Key Options */
export interface ForeignKeyOptions extends ColumnOptions {

  /** Attribute name for the relation */
  name?: string;
}


/**
 * Options provided when associating models
 */
export interface AssociationOptions {

  /**
   * Set to true to run before-/afterDestroy hooks when an associated model is deleted because of a cascade.
   * For example if `User.hasOne(Profile, {onDelete: 'cascade', hooks:true})`, the before-/afterDestroy hooks
   * for profile will be called when a user is deleted. Otherwise the profile will be deleted without invoking
   * any hooks.
   *
   * Defaults to false
   */
  hooks?: boolean;

  /**
   * The alias of this model, in singular form. See also the `name` option passed to `sequelize.define`. If
   * you create multiple associations between the same tables, you should provide an alias to be able to
   * distinguish between them. If you provide an alias when creating the assocition, you should provide the
   * same alias when eager loading and when getting assocated models. Defaults to the singularized name of
   * target
   */
  as?: string | { singular: string, plural: string };

  /**
   * The name of the foreign key in the target table or an object representing the type definition for the
   * foreign column (see `Sequelize.define` for syntax). When using an object, you can add a `name` property
   * to set the name of the column. Defaults to the name of source + primary key of source
   */
  foreignKey?: string | ForeignKeyOptions;

  /**
   * What happens when delete occurs.
   *
   * Cascade if this is a n:m, and set null if it is a 1:m
   *
   * Defaults to 'SET NULL' or 'CASCADE'
   */
  onDelete?: string;

  /**
   * What happens when update occurs
   *
   * Defaults to 'CASCADE'
   */
  onUpdate?: string;

  /**
   * Should on update and on delete constraints be enabled on the foreign key.
   */
  constraints?: boolean;
  foreignKeyConstraint?: boolean;

}


/**
 * Options for Association Scope
 */
export interface AssociationScope {

  /**
   * The name of the column that will be used for the associated scope and it's value
   */
  [scopeName: string]: any;
}

/**
 * Options provided for many-to-many relationships
 */
export interface ManyToManyOptions extends AssociationOptions {

  /**
   * A key/value set that will be used for association create and find defaults on the target.
   * (sqlite not supported for N:M)
   */
  scope?: AssociationScope;
}
}
declare module 'sequelize/lib/associations/base' {
export * from '~sequelize/lib/associations/base';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-sequelize/e12e516e5de4d9b95e5a44be3f16648a1ba74eed/lib/associations/belongs-to.d.ts
declare module '~sequelize/lib/associations/belongs-to' {

import {Association, SingleAssociationAccessors} from '~sequelize/lib/associations/base';
import {Model, SaveOptions, CreateOptions} from '~sequelize/lib/model';
import {DataType} from '~sequelize/lib/data-types';
import {AssociationOptions} from '~sequelize/lib/associations/base';
import {Promise} from '~sequelize/lib/promise';

/**
 * Options provided when associating models with belongsTo relationship
 *
 * @see Association class belongsTo method
 */
export interface BelongsToOptions extends AssociationOptions {

  /**
   * The name of the field to use as the key for the association in the target table. Defaults to the primary
   * key of the target table
   */
  targetKey?: string;

  /**
   * A string or a data type to represent the identifier in the table
   */
  keyType?: DataType;

}

export class BelongsTo extends Association {
  accessors: SingleAssociationAccessors;
  constructor(source: typeof Model, target: typeof Model, options: BelongsToOptions);
}


/**
 * The options for the getAssociation mixin of the belongsTo association.
 * @see BelongsToGetAssociationMixin
 */
export interface BelongsToGetAssociationMixinOptions {
  /**
   * Apply a scope on the related model, or remove its default scope by passing false.
   */
  scope?: string | boolean;
}

/**
 * The getAssociation mixin applied to models with belongsTo.
 * An example of usage is as follows:
 *
 * ```js
 *
 * User.belongsTo(Role);
 *
 * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttrib>, UserAttrib {
 *    getRole: Sequelize.BelongsToGetAssociationMixin<RoleInstance>;
 *    // setRole...
 *    // createRole...
 * }
 * ```
 *
 * @see http://docs.sequelizejs.com/en/latest/api/associations/belongs-to/
 * @see Instance
 */
export interface BelongsToGetAssociationMixin<TModel> {
  /**
   * Get the associated instance.
   * @param options The options to use when getting the association.
   */
  (options?: BelongsToGetAssociationMixinOptions): Promise<TModel>
}

/**
 * The options for the setAssociation mixin of the belongsTo association.
 * @see BelongsToSetAssociationMixin
 */
export interface BelongsToSetAssociationMixinOptions extends SaveOptions {
  /**
   * Skip saving this after setting the foreign key if false.
   */
  save?: boolean;
}

/**
 * The setAssociation mixin applied to models with belongsTo.
 * An example of usage is as follows:
 *
 * ```js
 *
 * User.belongsTo(Role);
 *
 * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
 *    // getRole...
 *    setRole: Sequelize.BelongsToSetAssociationMixin<RoleInstance, RoleId>;
 *    // createRole...
 * }
 * ```
 *
 * @see http://docs.sequelizejs.com/en/latest/api/associations/belongs-to/
 * @see Instance
 */
export interface BelongsToSetAssociationMixin<TModel, TPrimaryKey> {
  /**
   * Set the associated instance.
   * @param newAssociation An instance or the primary key of an instance to associate with this. Pass null or undefined to remove the association.
   * @param options the options passed to `this.save`.
   */
  (newAssociation?: TModel | TPrimaryKey, options?: BelongsToSetAssociationMixinOptions): Promise<void>
}

/**
 * The options for the createAssociation mixin of the belongsTo association.
 * @see BelongsToCreateAssociationMixin
 */
export interface BelongsToCreateAssociationMixinOptions extends CreateOptions, BelongsToSetAssociationMixinOptions { }

/**
 * The createAssociation mixin applied to models with belongsTo.
 * An example of usage is as follows:
 *
 * ```js
 *
 * User.belongsTo(Role);
 *
 * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
 *    // getRole...
 *    // setRole...
 *    createRole: Sequelize.BelongsToCreateAssociationMixin<RoleAttributes>;
 * }
 * ```
 *
 * @see http://docs.sequelizejs.com/en/latest/api/associations/belongs-to/
 * @see Instance
 */
export interface BelongsToCreateAssociationMixin<TModel> {
  /**
   * Create a new instance of the associated model and associate it with this.
   * @param values The values used to create the association.
   * @param options The options passed to `target.create` and `setAssociation`.
   */
  (
    values?: { [attribute: string]: any },
    options?: BelongsToCreateAssociationMixinOptions
  ): Promise<TModel>
}

export default BelongsTo;
}
declare module 'sequelize/lib/associations/belongs-to' {
export * from '~sequelize/lib/associations/belongs-to';
export { default } from '~sequelize/lib/associations/belongs-to';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-sequelize/e12e516e5de4d9b95e5a44be3f16648a1ba74eed/lib/associations/has-one.d.ts
declare module '~sequelize/lib/associations/has-one' {

import {Association, AssociationOptions, SingleAssociationAccessors} from '~sequelize/lib/associations/base';
import {Model, SaveOptions, CreateOptions} from '~sequelize/lib/model';
import {DataType} from '~sequelize/lib/data-types';
import {Promise} from '~sequelize/lib/promise';

/**
 * Options provided when associating models with hasOne relationship
 */
export interface HasOneOptions extends AssociationOptions {

  /**
   * A string or a data type to represent the identifier in the table
   */
  keyType?: DataType;
}

export class HasOne extends Association {
  accessors: SingleAssociationAccessors;
  constructor(source: typeof Model, target: typeof Model, options: HasOneOptions);
}


/**
 * The options for the getAssociation mixin of the hasOne association.
 * @see HasOneGetAssociationMixin
 */
export interface HasOneGetAssociationMixinOptions {
  /**
   * Apply a scope on the related model, or remove its default scope by passing false.
   */
  scope?: string | boolean;
}

/**
 * The getAssociation mixin applied to models with hasOne.
 * An example of usage is as follows:
 *
 * ```js
 *
 * User.hasOne(Role);
 *
 * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttrib>, UserAttrib {
 *    getRole: Sequelize.HasOneGetAssociationMixin<RoleInstance>;
 *    // setRole...
 *    // createRole...
 * }
 * ```
 *
 * @see http://docs.sequelizejs.com/en/latest/api/associations/has-one/
 * @see Instance
 */
export interface HasOneGetAssociationMixin<TModel> {
  /**
   * Get the associated instance.
   * @param options The options to use when getting the association.
   */
  (options?: HasOneGetAssociationMixinOptions): Promise<TModel>
}

/**
 * The options for the setAssociation mixin of the hasOne association.
 * @see HasOneSetAssociationMixin
 */
export interface HasOneSetAssociationMixinOptions extends HasOneGetAssociationMixinOptions, SaveOptions {
  /**
   * Skip saving this after setting the foreign key if false.
   */
  save?: boolean;
}

/**
 * The setAssociation mixin applied to models with hasOne.
 * An example of usage is as follows:
 *
 * ```js
 *
 * User.hasOne(Role);
 *
 * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
 *    // getRole...
 *    setRole: Sequelize.HasOneSetAssociationMixin<RoleInstance, RoleId>;
 *    // createRole...
 * }
 * ```
 *
 * @see http://docs.sequelizejs.com/en/latest/api/associations/has-one/
 * @see Instance
 */
export interface HasOneSetAssociationMixin<TModel, TModelPrimaryKey> {
  /**
   * Set the associated instance.
   * @param newAssociation An instance or the primary key of an instance to associate with this. Pass null or undefined to remove the association.
   * @param options The options passed to `getAssocation` and `target.save`.
   */
  (
    newAssociation?: TModel | TModelPrimaryKey,
    options?: HasOneSetAssociationMixinOptions
  ): Promise<void>
}

/**
 * The options for the createAssociation mixin of the hasOne association.
 * @see HasOneCreateAssociationMixin
 */
export interface HasOneCreateAssociationMixinOptions extends HasOneSetAssociationMixinOptions, CreateOptions { }


/**
 * The createAssociation mixin applied to models with hasOne.
 * An example of usage is as follows:
 *
 * ```js
 *
 * User.hasOne(Role);
 *
 * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
 *    // getRole...
 *    // setRole...
 *    createRole: Sequelize.HasOneCreateAssociationMixin<RoleAttributes>;
 * }
 * ```
 *
 * @see http://docs.sequelizejs.com/en/latest/api/associations/has-one/
 * @see Instance
 */
export interface HasOneCreateAssociationMixin<TModel> {
  /**
   * Create a new instance of the associated model and associate it with this.
   * @param values The values used to create the association.
   * @param options The options passed to `target.create` and `setAssociation`.
   */
  (
    values?: { [attribute: string]: any },
    options?: HasOneCreateAssociationMixinOptions
  ): Promise<TModel>
}
}
declare module 'sequelize/lib/associations/has-one' {
export * from '~sequelize/lib/associations/has-one';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-sequelize/e12e516e5de4d9b95e5a44be3f16648a1ba74eed/lib/associations/has-many.d.ts
declare module '~sequelize/lib/associations/has-many' {

import {Association, ManyToManyOptions, MultiAssociationAccessors} from '~sequelize/lib/associations/base';
import {Model, WhereOptions, FindOptions, InstanceUpdateOptions, CreateOptions} from '~sequelize/lib/model';
import {DataType} from '~sequelize/lib/data-types';
import {Transaction} from '~sequelize/lib/transaction';
import {Promise} from '~sequelize/lib/promise';

/**
 * Options provided when associating models with hasMany relationship
 */
export interface HasManyOptions extends ManyToManyOptions {

  /**
   * A string or a data type to represent the identifier in the table
   */
  keyType?: DataType;
}

export class HasMany extends Association {
  accessors: MultiAssociationAccessors;
  constructor(source: typeof Model, target: typeof Model, options: HasManyOptions);
}


  /**
   * The options for the getAssociations mixin of the hasMany association.
   * @see HasManyGetAssociationsMixin
   */
  export interface HasManyGetAssociationsMixinOptions {

    /**
     * An optional where clause to limit the associated models.
     */
    where?: WhereOptions;

    /**
     * Apply a scope on the related model, or remove its default scope by passing false.
     */
    scope?: string | boolean;

    /**
     * Transaction to run query under
     */
    transaction?: Transaction;
  }

  /**
   * The getAssociations mixin applied to models with hasMany.
   * An example of usage is as follows:
   *
   * ```js
   *
   * User.hasMany(Role);
   *
   * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
   *    getRoles: Sequelize.HasManyGetAssociationsMixin<RoleInstance>;
   *    // setRoles...
   *    // addRoles...
   *    // addRole...
   *    // createRole...
   *    // removeRole...
   *    // removeRoles...
   *    // hasRole...
   *    // hasRoles...
   *    // countRoles...
   * }
   * ```
   *
   * @see http://docs.sequelizejs.com/en/latest/api/associations/has-many/
   * @see Instance
   */
  export interface HasManyGetAssociationsMixin<TModel> {
    /**
     * Get everything currently associated with this, using an optional where clause.
     * @param options The options to use when getting the associations.
     */
    (options?: HasManyGetAssociationsMixinOptions): Promise<TModel[]>
  }

  /**
   * The options for the setAssociations mixin of the hasMany association.
   * @see HasManySetAssociationsMixin
   */
  export interface HasManySetAssociationsMixinOptions extends FindOptions, InstanceUpdateOptions { }

  /**
   * The setAssociations mixin applied to models with hasMany.
   * An example of usage is as follows:
   *
   * ```js
   *
   * User.hasMany(Role);
   *
   * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
   *    // getRoles...
   *    setRoles: Sequelize.HasManySetAssociationsMixin<RoleInstance, RoleId>;
   *    // addRoles...
   *    // addRole...
   *    // createRole...
   *    // removeRole...
   *    // removeRoles...
   *    // hasRole...
   *    // hasRoles...
   *    // countRoles...
   * }
   * ```
   *
   * @see http://docs.sequelizejs.com/en/latest/api/associations/has-many/
   * @see Instance
   */
  export interface HasManySetAssociationsMixin<TModel, TModelPrimaryKey> {
    /**
     * Set the associated models by passing an array of instances or their primary keys.
     * Everything that it not in the passed array will be un-associated.
     * @param newAssociations An array of instances or primary key of instances to associate with this. Pass null or undefined to remove all associations.
     * @param options The options passed to `target.findAll` and `update`.
     */
    (
      newAssociations?: Array<TModel | TModelPrimaryKey>,
      options?: HasManySetAssociationsMixinOptions
    ): Promise<void>
  }

  /**
   * The options for the addAssociations mixin of the hasMany association.
   * @see HasManyAddAssociationsMixin
   */
  export interface HasManyAddAssociationsMixinOptions extends InstanceUpdateOptions { }

  /**
   * The addAssociations mixin applied to models with hasMany.
   * An example of usage is as follows:
   *
   * ```js
   *
   * User.hasMany(Role);
   *
   * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
   *    // getRoles...
   *    // setRoles...
   *    addRoles: Sequelize.HasManyAddAssociationsMixin<RoleInstance, RoleId>;
   *    // addRole...
   *    // createRole...
   *    // removeRole...
   *    // removeRoles...
   *    // hasRole...
   *    // hasRoles...
   *    // countRoles...
   * }
   * ```
   *
   * @see http://docs.sequelizejs.com/en/latest/api/associations/has-many/
   * @see Instance
   */
  export interface HasManyAddAssociationsMixin<TModel, TModelPrimaryKey> {
    /**
     * Associate several instances with this.
     * @param newAssociations An array of instances or primary key of instances to associate with this.
     * @param options The options passed to `target.update`.
     */
    (
      newAssociations?: Array<TModel | TModelPrimaryKey>,
      options?: HasManyAddAssociationsMixinOptions
    ): Promise<void>
  }

  /**
   * The options for the addAssociation mixin of the hasMany association.
   * @see HasManyAddAssociationMixin
   */
  export interface HasManyAddAssociationMixinOptions extends InstanceUpdateOptions { }

  /**
   * The addAssociation mixin applied to models with hasMany.
   * An example of usage is as follows:
   *
   * ```js
   *
   * User.hasMany(Role);
   *
   * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
   *    // getRoles...
   *    // setRoles...
   *    // addRoles...
   *    addRole: Sequelize.HasManyAddAssociationMixin<RoleInstance, RoleId>;
   *    // createRole...
   *    // removeRole...
   *    // removeRoles...
   *    // hasRole...
   *    // hasRoles...
   *    // countRoles...
   * }
   * ```
   *
   * @see http://docs.sequelizejs.com/en/latest/api/associations/has-many/
   * @see Instance
   */
  export interface HasManyAddAssociationMixin<TModel, TModelPrimaryKey> {
    /**
     * Associate an instance with this.
     * @param newAssociation An instance or the primary key of an instance to associate with this.
     * @param options The options passed to `target.update`.
     */
    (
      newAssociation?: TModel | TModelPrimaryKey,
      options?: HasManyAddAssociationMixinOptions
    ): Promise<void>
  }

  /**
   * The options for the createAssociation mixin of the hasMany association.
   * @see HasManyCreateAssociationMixin
   */
  export interface HasManyCreateAssociationMixinOptions extends CreateOptions { }

  /**
   * The createAssociation mixin applied to models with hasMany.
   * An example of usage is as follows:
   *
   * ```js
   *
   * User.hasMany(Role);
   *
   * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
   *    // getRoles...
   *    // setRoles...
   *    // addRoles...
   *    // addRole...
   *    createRole: Sequelize.HasManyCreateAssociationMixin<RoleAttributes>;
   *    // removeRole...
   *    // removeRoles...
   *    // hasRole...
   *    // hasRoles...
   *    // countRoles...
   * }
   * ```
   *
   * @see http://docs.sequelizejs.com/en/latest/api/associations/has-many/
   * @see Instance
   */
  export interface HasManyCreateAssociationMixin<TModel> {
    /**
     * Create a new instance of the associated model and associate it with this.
     * @param values The values used to create the association.
     * @param options The options to use when creating the association.
     */
    (
      values?: { [attribute: string]: any },
      options?: HasManyCreateAssociationMixinOptions
    ): Promise<TModel>
  }

  /**
   * The options for the removeAssociation mixin of the hasMany association.
   * @see HasManyRemoveAssociationMixin
   */
  export interface HasManyRemoveAssociationMixinOptions extends InstanceUpdateOptions { }

  /**
   * The removeAssociation mixin applied to models with hasMany.
   * An example of usage is as follows:
   *
   * ```js
   *
   * User.hasMany(Role);
   *
   * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
   *    // getRoles...
   *    // setRoles...
   *    // addRoles...
   *    // addRole...
   *    // createRole...
   *    removeRole: Sequelize.HasManyRemoveAssociationMixin<RoleInstance, RoleId>;
   *    // removeRoles...
   *    // hasRole...
   *    // hasRoles...
   *    // countRoles...
   * }
   * ```
   *
   * @see http://docs.sequelizejs.com/en/latest/api/associations/has-many/
   * @see Instance
   */
  export interface HasManyRemoveAssociationMixin<TModel, TModelPrimaryKey> {
    /**
     * Un-associate the instance.
     * @param oldAssociated The instance or the primary key of the instance to un-associate.
     * @param options The options passed to `target.update`.
     */
    (
      oldAssociated?: TModel | TModelPrimaryKey,
      options?: HasManyRemoveAssociationMixinOptions
    ): Promise<void>
  }

  /**
   * The options for the removeAssociations mixin of the hasMany association.
   * @see HasManyRemoveAssociationsMixin
   */
  export interface HasManyRemoveAssociationsMixinOptions extends InstanceUpdateOptions { }

  /**
   * The removeAssociations mixin applied to models with hasMany.
   * An example of usage is as follows:
   *
   * ```js
   *
   * User.hasMany(Role);
   *
   * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
   *    // getRoles...
   *    // setRoles...
   *    // addRoles...
   *    // addRole...
   *    // createRole...
   *    // removeRole...
   *    removeRoles: Sequelize.HasManyRemoveAssociationsMixin<RoleInstance, RoleId>;
   *    // hasRole...
   *    // hasRoles...
   *    // countRoles...
   * }
   * ```
   *
   * @see http://docs.sequelizejs.com/en/latest/api/associations/has-many/
   * @see Instance
   */
  export interface HasManyRemoveAssociationsMixin<TModel, TModelPrimaryKey> {
    /**
     * Un-associate several instances.
     * @param oldAssociated An array of instances or primary key of instances to un-associate.
     * @param options The options passed to `target.update`.
     */
    (
      oldAssociateds?: Array<TModel | TModelPrimaryKey>,
      options?: HasManyRemoveAssociationsMixinOptions
    ): Promise<void>
  }

  /**
   * The options for the hasAssociation mixin of the hasMany association.
   * @see HasManyHasAssociationMixin
   */
  export interface HasManyHasAssociationMixinOptions extends HasManyGetAssociationsMixinOptions { }

  /**
   * The hasAssociation mixin applied to models with hasMany.
   * An example of usage is as follows:
   *
   * ```js
   *
   * User.hasMany(Role);
   *
   * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
   *    // getRoles...
   *    // setRoles...
   *    // addRoles...
   *    // addRole...
   *    // createRole...
   *    // removeRole...
   *    // removeRoles...
   *    hasRole: Sequelize.HasManyHasAssociationMixin<RoleInstance, RoleId>;
   *    // hasRoles...
   *    // countRoles...
   * }
   * ```
   *
   * @see http://docs.sequelizejs.com/en/latest/api/associations/has-many/
   * @see Instance
   */
  export interface HasManyHasAssociationMixin<TModel, TModelPrimaryKey> {
    /**
     * Check if an instance is associated with this.
     * @param target The instance or the primary key of the instance to check.
     * @param options The options passed to `getAssociations`.
     */
    (
      target: TModel | TModelPrimaryKey,
      options?: HasManyHasAssociationMixinOptions
    ): Promise<boolean>
  }

  /**
   * The options for the hasAssociations mixin of the hasMany association.
   * @see HasManyHasAssociationsMixin
   */
  export interface HasManyHasAssociationsMixinOptions extends HasManyGetAssociationsMixinOptions { }

  /**
   * The removeAssociations mixin applied to models with hasMany.
   * An example of usage is as follows:
   *
   * ```js
   *
   * User.hasMany(Role);
   *
   * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
   *    // getRoles...
   *    // setRoles...
   *    // addRoles...
   *    // addRole...
   *    // createRole...
   *    // removeRole...
   *    // removeRoles
   *    // hasRole...
   *    hasRoles: Sequelize.HasManyHasAssociationsMixin<RoleInstance, RoleId>;
   *    // countRoles...
   * }
   * ```
   *
   * @see http://docs.sequelizejs.com/en/latest/api/associations/has-many/
   * @see Instance
   */
  export interface HasManyHasAssociationsMixin<TModel, TModelPrimaryKey> {
    /**
     * Check if all instances are associated with this.
     * @param targets An array of instances or primary key of instances to check.
     * @param options The options passed to `getAssociations`.
     */
    (
      targets: Array<TModel | TModelPrimaryKey>,
      options?: HasManyHasAssociationsMixinOptions
    ): Promise<boolean>
  }

  /**
   * The options for the countAssociations mixin of the hasMany association.
   * @see HasManyCountAssociationsMixin
   */
  export interface HasManyCountAssociationsMixinOptions {

    /**
     * An optional where clause to limit the associated models.
     */
    where?: WhereOptions;

    /**
     * Apply a scope on the related model, or remove its default scope by passing false.
     */
    scope?: string | boolean;

    /**
     * Transaction to run query under
     */
    transaction?: Transaction;
  }

  /**
   * The countAssociations mixin applied to models with hasMany.
   * An example of usage is as follows:
   *
   * ```js
   *
   * User.hasMany(Role);
   *
   * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
   *    // getRoles...
   *    // setRoles...
   *    // addRoles...
   *    // addRole...
   *    // createRole...
   *    // removeRole...
   *    // removeRoles...
   *    // hasRole...
   *    // hasRoles...
   *    countRoles: Sequelize.HasManyCountAssociationsMixin;
   * }
   * ```
   *
   * @see http://docs.sequelizejs.com/en/latest/api/associations/has-many/
   * @see Instance
   */
  export interface HasManyCountAssociationsMixin {
    /**
     * Count everything currently associated with this, using an optional where clause.
     * @param options The options to use when counting the associations.
     */
    (options?: HasManyCountAssociationsMixinOptions): Promise<number>
  }
}
declare module 'sequelize/lib/associations/has-many' {
export * from '~sequelize/lib/associations/has-many';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-sequelize/e12e516e5de4d9b95e5a44be3f16648a1ba74eed/lib/associations/belongs-to-many.d.ts
declare module '~sequelize/lib/associations/belongs-to-many' {

import {
  Association,
  ManyToManyOptions,
  AssociationScope,
  ForeignKeyOptions,
  MultiAssociationAccessors
} from '~sequelize/lib/associations/base';
import {Transaction} from '~sequelize/lib/transaction';
import {Promise} from '~sequelize/lib/promise';
import {
  Model,
  WhereOptions,
  FindOptions,
  BulkCreateOptions,
  InstanceUpdateOptions,
  InstanceDestroyOptions,
  CreateOptions
} from '~sequelize/lib/model';

/**
 * Used for a association table in n:m associations.
 */
export interface ThroughOptions {

  /**
   * The model used to join both sides of the N:M association.
   */
  model: typeof Model;

  /**
   * A key/value set that will be used for association create and find defaults on the through model.
   * (Remember to add the attributes to the through model)
   */
  scope?: AssociationScope;

  /**
   * If true a unique key will be generated from the foreign keys used (might want to turn this off and create
   * specific unique keys when using scopes)
   *
   * Defaults to true
   */
  unique?: boolean;
}

/**
 * Attributes for the join table
 */
export interface JoinTableAttributes {
  [attribute: string]: any;
}

/**
 * Options provided when associating models with belongsToMany relationship
 */
export interface BelongsToManyOptions extends ManyToManyOptions {

  /**
   * The name of the table that is used to join source and target in n:m associations. Can also be a
   * sequelize model if you want to define the junction table yourself and add extra attributes to it.
   */
  through: typeof Model | string | ThroughOptions;

  /**
   * The name of the foreign key in the join table (representing the target model) or an object representing
   * the type definition for the other column (see `Sequelize.define` for syntax). When using an object, you
   * can add a `name` property to set the name of the colum. Defaults to the name of target + primary key of
   * target
   */
  otherKey?: string | ForeignKeyOptions;

  /**
   * Should the join model have timestamps
   */
  timestamps?: boolean;
}

export class BelongsToMany extends Association {
  otherKey: string;
  accessors: MultiAssociationAccessors;
  constructor(source: typeof Model, target: typeof Model, options: BelongsToManyOptions);
}


/**
 * The options for the getAssociations mixin of the belongsToMany association.
 * @see BelongsToManyGetAssociationsMixin
 */
export interface BelongsToManyGetAssociationsMixinOptions {

  /**
   * An optional where clause to limit the associated models.
   */
  where?: WhereOptions;

  /**
   * Apply a scope on the related model, or remove its default scope by passing false.
   */
  scope?: string | boolean;

  /**
   * Transaction to run query under
   */
  transaction?: Transaction;
}

/**
 * The getAssociations mixin applied to models with belongsToMany.
 * An example of usage is as follows:
 *
 * ```js
 *
 * User.belongsToMany(Role, { through: UserRole });
 *
 * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
 *    getRoles: Sequelize.BelongsToManyGetAssociationsMixin<RoleInstance>;
 *    // setRoles...
 *    // addRoles...
 *    // addRole...
 *    // createRole...
 *    // removeRole...
 *    // removeRoles...
 *    // hasRole...
 *    // hasRoles...
 *    // countRoles...
 * }
 * ```
 *
 * @see http://docs.sequelizejs.com/en/latest/api/associations/belongs-to-many/
 * @see Instance
 */
export interface BelongsToManyGetAssociationsMixin<TModel> {
  /**
   * Get everything currently associated with this, using an optional where clause.
   * @param options The options to use when getting the associations.
   */
  (options?: BelongsToManyGetAssociationsMixinOptions): Promise<TModel[]>
}

/**
 * The options for the setAssociations mixin of the belongsToMany association.
 * @see BelongsToManySetAssociationsMixin
 */
export interface BelongsToManySetAssociationsMixinOptions extends FindOptions, BulkCreateOptions, InstanceUpdateOptions, InstanceDestroyOptions {
  through: JoinTableAttributes;
}

/**
 * The setAssociations mixin applied to models with belongsToMany.
 * An example of usage is as follows:
 *
 * ```js
 *
 * User.belongsToMany(Role, { through: UserRole });
 *
 * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
 *    // getRoles...
 *    setRoles: Sequelize.BelongsToManySetAssociationsMixin<RoleInstance, RoleId, UserRoleAttributes>;
 *    // addRoles...
 *    // addRole...
 *    // createRole...
 *    // removeRole...
 *    // removeRoles...
 *    // hasRole...
 *    // hasRoles...
 *    // countRoles...
 * }
 * ```
 *
 * @see http://docs.sequelizejs.com/en/latest/api/associations/belongs-to-many/
 * @see Instance
 */
export interface BelongsToManySetAssociationsMixin<TModel, TModelPrimaryKey> {
  /**
   * Set the associated models by passing an array of instances or their primary keys.
   * Everything that it not in the passed array will be un-associated.
   * @param newAssociations An array of instances or primary key of instances to associate with this. Pass null or undefined to remove all associations.
   * @param options The options passed to `through.findAll`, `bulkCreate`, `update` and `destroy`. Can also hold additional attributes for the join table.
   */
  (
    newAssociations?: Array<TModel | TModelPrimaryKey>,
    options?: BelongsToManySetAssociationsMixinOptions
  ): Promise<void>
}

/**
 * The options for the addAssociations mixin of the belongsToMany association.
 * @see BelongsToManyAddAssociationsMixin
 */
export interface BelongsToManyAddAssociationsMixinOptions extends FindOptions, BulkCreateOptions, InstanceUpdateOptions, InstanceDestroyOptions {
  through: JoinTableAttributes;
}

/**
 * The addAssociations mixin applied to models with belongsToMany.
 * An example of usage is as follows:
 *
 * ```js
 *
 * User.belongsToMany(Role, { through: UserRole });
 *
 * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
 *    // getRoles...
 *    // setRoles...
 *    addRoles: Sequelize.BelongsToManyAddAssociationsMixin<RoleInstance, RoleId, UserRoleAttributes>;
 *    // addRole...
 *    // createRole...
 *    // removeRole...
 *    // removeRoles...
 *    // hasRole...
 *    // hasRoles...
 *    // countRoles...
 * }
 * ```
 *
 * @see http://docs.sequelizejs.com/en/latest/api/associations/belongs-to-many/
 * @see Instance
 */
export interface BelongsToManyAddAssociationsMixin<TModel, TModelPrimaryKey> {
  /**
   * Associate several instances with this.
   * @param newAssociations An array of instances or primary key of instances to associate with this.
   * @param options The options passed to `through.findAll`, `bulkCreate`, `update` and `destroy`. Can also hold additional attributes for the join table.
   */
  (
    newAssociations?: Array<TModel | TModelPrimaryKey>,
    options?: BelongsToManyAddAssociationsMixinOptions
  ): Promise<void>
}

/**
 * The options for the addAssociation mixin of the belongsToMany association.
 * @see BelongsToManyAddAssociationMixin
 */
export interface BelongsToManyAddAssociationMixinOptions extends FindOptions, BulkCreateOptions, InstanceUpdateOptions, InstanceDestroyOptions {
  through: JoinTableAttributes;
}

/**
 * The addAssociation mixin applied to models with belongsToMany.
 * An example of usage is as follows:
 *
 * ```js
 *
 * User.belongsToMany(Role, { through: UserRole });
 *
 * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
 *    // getRoles...
 *    // setRoles...
 *    // addRoles...
 *    addRole: Sequelize.BelongsToManyAddAssociationMixin<RoleInstance, RoleId, UserRoleAttributes>;
 *    // createRole...
 *    // removeRole...
 *    // removeRoles...
 *    // hasRole...
 *    // hasRoles...
 *    // countRoles...
 * }
 * ```
 *
 * @see http://docs.sequelizejs.com/en/latest/api/associations/belongs-to-many/
 * @see Instance
 */
export interface BelongsToManyAddAssociationMixin<TModel, TModelPrimaryKey> {
  /**
   * Associate an instance with this.
   * @param newAssociation An instance or the primary key of an instance to associate with this.
   * @param options The options passed to `through.findAll`, `bulkCreate`, `update` and `destroy`. Can also hold additional attributes for the join table.
   */
  (
    newAssociation?: TModel | TModelPrimaryKey,
    options?: BelongsToManyAddAssociationMixinOptions
  ): Promise<void>
}

/**
 * The options for the createAssociation mixin of the belongsToMany association.
 * @see BelongsToManyCreateAssociationMixin
 */
export interface BelongsToManyCreateAssociationMixinOptions extends CreateOptions {
  through: JoinTableAttributes;
}
/**
 * The createAssociation mixin applied to models with belongsToMany.
 * An example of usage is as follows:
 *
 * ```js
 *
 * User.belongsToMany(Role, { through: UserRole });
 *
 * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
 *    // getRoles...
 *    // setRoles...
 *    // addRoles...
 *    // addRole...
 *    createRole: Sequelize.BelongsToManyCreateAssociationMixin<RoleAttributes, UserRoleAttributes>;
 *    // removeRole...
 *    // removeRoles...
 *    // hasRole...
 *    // hasRoles...
 *    // countRoles...
 * }
 * ```
 *
 * @see http://docs.sequelizejs.com/en/latest/api/associations/belongs-to-many/
 * @see Instance
 */
export interface BelongsToManyCreateAssociationMixin<TModel> {
  /**
   * Create a new instance of the associated model and associate it with this.
   * @param values The values used to create the association.
   * @param options Options passed to `create` and `add`. Can also hold additional attributes for the join table.
   */
  (
    values?: { [attribute: string]: any },
    options?: BelongsToManyCreateAssociationMixinOptions
  ): Promise<TModel>
}

/**
 * The options for the removeAssociation mixin of the belongsToMany association.
 * @see BelongsToManyRemoveAssociationMixin
 */
export interface BelongsToManyRemoveAssociationMixinOptions extends InstanceDestroyOptions { }

/**
 * The removeAssociation mixin applied to models with belongsToMany.
 * An example of usage is as follows:
 *
 * ```js
 *
 * User.belongsToMany(Role, { through: UserRole });
 *
 * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
 *    // getRoles...
 *    // setRoles...
 *    // addRoles...
 *    // addRole...
 *    // createRole...
 *    removeRole: Sequelize.BelongsToManyRemoveAssociationMixin<RoleInstance, RoleId>;
 *    // removeRoles...
 *    // hasRole...
 *    // hasRoles...
 *    // countRoles...
 * }
 * ```
 *
 * @see http://docs.sequelizejs.com/en/latest/api/associations/belongs-to-many/
 * @see Instance
 */
export interface BelongsToManyRemoveAssociationMixin<TModel, TModelPrimaryKey> {
  /**
   * Un-associate the instance.
   * @param oldAssociated The instance or the primary key of the instance to un-associate.
   * @param options The options passed to `through.destroy`.
   */
  (
    oldAssociated?: TModel | TModelPrimaryKey,
    options?: BelongsToManyRemoveAssociationMixinOptions
  ): Promise<void>
}

/**
 * The options for the removeAssociations mixin of the belongsToMany association.
 * @see BelongsToManyRemoveAssociationsMixin
 */
export interface BelongsToManyRemoveAssociationsMixinOptions extends InstanceDestroyOptions, InstanceDestroyOptions { }

/**
 * The removeAssociations mixin applied to models with belongsToMany.
 * An example of usage is as follows:
 *
 * ```js
 *
 * User.belongsToMany(Role, { through: UserRole });
 *
 * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
 *    // getRoles...
 *    // setRoles...
 *    // addRoles...
 *    // addRole...
 *    // createRole...
 *    // removeRole...
 *    removeRoles: Sequelize.BelongsToManyRemoveAssociationsMixin<RoleInstance, RoleId>;
 *    // hasRole...
 *    // hasRoles...
 *    // countRoles...
 * }
 * ```
 *
 * @see http://docs.sequelizejs.com/en/latest/api/associations/belongs-to-many/
 * @see Instance
 */
export interface BelongsToManyRemoveAssociationsMixin<TModel, TModelPrimaryKey> {
  /**
   * Un-associate several instances.
   * @param oldAssociated An array of instances or primary key of instances to un-associate.
   * @param options The options passed to `through.destroy`.
   */
  (
    oldAssociateds?: Array<TModel | TModelPrimaryKey>,
    options?: BelongsToManyRemoveAssociationsMixinOptions
  ): Promise<void>
}

/**
 * The options for the hasAssociation mixin of the belongsToMany association.
 * @see BelongsToManyHasAssociationMixin
 */
export interface BelongsToManyHasAssociationMixinOptions extends BelongsToManyGetAssociationsMixinOptions { }

/**
 * The hasAssociation mixin applied to models with belongsToMany.
 * An example of usage is as follows:
 *
 * ```js
 *
 * User.belongsToMany(Role, { through: UserRole });
 *
 * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
 *    // getRoles...
 *    // setRoles...
 *    // addRoles...
 *    // addRole...
 *    // createRole...
 *    // removeRole...
 *    // removeRoles...
 *    hasRole: Sequelize.BelongsToManyHasAssociationMixin<RoleInstance, RoleId>;
 *    // hasRoles...
 *    // countRoles...
 * }
 * ```
 *
 * @see http://docs.sequelizejs.com/en/latest/api/associations/belongs-to-many/
 * @see Instance
 */
export interface BelongsToManyHasAssociationMixin<TModel, TModelPrimaryKey> {
  /**
   * Check if an instance is associated with this.
   * @param target The instance or the primary key of the instance to check.
   * @param options The options passed to `getAssociations`.
   */
  (
    target: TModel | TModelPrimaryKey,
    options?: BelongsToManyHasAssociationMixinOptions
  ): Promise<boolean>
}

/**
 * The options for the hasAssociations mixin of the belongsToMany association.
 * @see BelongsToManyHasAssociationsMixin
 */
export interface BelongsToManyHasAssociationsMixinOptions extends BelongsToManyGetAssociationsMixinOptions { }

/**
 * The removeAssociations mixin applied to models with belongsToMany.
 * An example of usage is as follows:
 *
 * ```js
 *
 * User.belongsToMany(Role, { through: UserRole });
 *
 * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
 *    // getRoles...
 *    // setRoles...
 *    // addRoles...
 *    // addRole...
 *    // createRole...
 *    // removeRole...
 *    // removeRoles
 *    // hasRole...
 *    hasRoles: Sequelize.BelongsToManyHasAssociationsMixin<RoleInstance, RoleId>;
 *    // countRoles...
 * }
 * ```
 *
 * @see http://docs.sequelizejs.com/en/latest/api/associations/belongs-to-many/
 * @see Instance
 */
export interface BelongsToManyHasAssociationsMixin<TModel, TModelPrimaryKey> {
  /**
   * Check if all instances are associated with this.
   * @param targets An array of instances or primary key of instances to check.
   * @param options The options passed to `getAssociations`.
   */
  (
    targets: Array<TModel | TModelPrimaryKey>,
    options?: BelongsToManyHasAssociationsMixinOptions
  ): Promise<boolean>
}

/**
 * The options for the countAssociations mixin of the belongsToMany association.
 * @see BelongsToManyCountAssociationsMixin
 */
export interface BelongsToManyCountAssociationsMixinOptions {

  /**
   * An optional where clause to limit the associated models.
   */
  where?: WhereOptions;

  /**
   * Apply a scope on the related model, or remove its default scope by passing false.
   */
  scope?: string | boolean;

  /**
   * Transaction to run query under
   */
  transaction?: Transaction;
}

/**
 * The countAssociations mixin applied to models with belongsToMany.
 * An example of usage is as follows:
 *
 * ```js
 *
 * User.belongsToMany(Role, { through: UserRole });
 *
 * interface UserInstance extends Sequelize.Instance<UserInstance, UserAttributes>, UserAttributes {
 *    // getRoles...
 *    // setRoles...
 *    // addRoles...
 *    // addRole...
 *    // createRole...
 *    // removeRole...
 *    // removeRoles...
 *    // hasRole...
 *    // hasRoles...
 *    countRoles: Sequelize.BelongsToManyCountAssociationsMixin;
 * }
 * ```
 *
 * @see http://docs.sequelizejs.com/en/latest/api/associations/belongs-to-many/
 * @see Instance
 */
export interface BelongsToManyCountAssociationsMixin {
  /**
   * Count everything currently associated with this, using an optional where clause.
   * @param options The options to use when counting the associations.
   */
  (options?: BelongsToManyCountAssociationsMixinOptions): Promise<number>
}
}
declare module 'sequelize/lib/associations/belongs-to-many' {
export * from '~sequelize/lib/associations/belongs-to-many';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-sequelize/e12e516e5de4d9b95e5a44be3f16648a1ba74eed/lib/associations/index.d.ts
declare module '~sequelize/lib/associations/index' {

export * from '~sequelize/lib/associations/base';
export * from '~sequelize/lib/associations/belongs-to';
export * from '~sequelize/lib/associations/has-one';
export * from '~sequelize/lib/associations/has-many';
export * from '~sequelize/lib/associations/belongs-to-many';
}
declare module 'sequelize/lib/associations/index' {
export * from '~sequelize/lib/associations/index';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-sequelize/e12e516e5de4d9b95e5a44be3f16648a1ba74eed/lib/errors.d.ts
declare module '~sequelize/lib/errors' {

/**
 * The Base Error all Sequelize Errors inherit from.
 */
export class BaseError extends Error {
  name: string;
}

/**
 * Scope Error. Thrown when the sequelize cannot query the specified scope.
 */
export class SequelizeScopeError extends BaseError { }

export class ValidationError extends BaseError {

  /** Array of ValidationErrorItem objects describing the validation errors */
  errors: ValidationErrorItem[];

  /**
   * Validation Error. Thrown when the sequelize validation has failed. The error contains an `errors`
   * property, which is an array with 1 or more ValidationErrorItems, one for each validation that failed.
   *
   * @param message Error message
   * @param errors  Array of ValidationErrorItem objects describing the validation errors
   */
  constructor(message: string, errors?: ValidationErrorItem[]);

  /**
   * Gets all validation error items for the path / field specified.
   *
   * @param path The path to be checked for error items
   */
  get(path: string): ValidationErrorItem[];

}

export class ValidationErrorItem {

  /** An error message */
  message: string;

  /** The type of the validation error */
  type: string;

  /** The field that triggered the validation error */
  path: string;

  /** The value that generated the error */
  value: string;

  /**
   * Validation Error Item
   * Instances of this class are included in the `ValidationError.errors` property.
   *
   * @param message An error message
   * @param type The type of the validation error
   * @param path The field that triggered the validation error
   * @param value The value that generated the error
   */
  constructor(message?: string, type?: string, path?: string, value?: string);

}

export class DatabaseError extends BaseError {

  /** The database specific error which triggered this one */
  parent: Error;

  /** The database specific error which triggered this one */
  original: Error;

  /** The SQL that triggered the error */
  sql: string;

  /**
   * A base class for all database related errors.
   * @param parent The database specific error which triggered this one
   */
  constructor(parent: Error);
}

/** Thrown when a database query times out because of a deadlock */
export class TimeoutError extends DatabaseError { }

/**
 * Thrown when a unique constraint is violated in the database
 */
export class UniqueConstraintError extends DatabaseError {
  errors: ValidationErrorItem[];
  fields: { [field: string]: string };
  constructor(options?: { parent?: Error, message?: string, errors?: ValidationErrorItem[] });
}

/**
 * Thrown when a foreign key constraint is violated in the database
 */
export class ForeignKeyConstraintError extends DatabaseError {
  table: string;
  fields: { [field: string]: string };
  value: any;
  index: string;
  constructor(options: { parent?: Error, message?: string, index?: string, fields?: string[], table?: string });
}

/**
 * Thrown when an exclusion constraint is violated in the database
 */
export class ExclusionConstraintError extends DatabaseError {
  constraint: string;
  fields: { [field: string]: string };
  table: string;
  constructor(options: { parent?: Error, message?: string, constraint?: string, fields?: string[], table?: string });
}

/**
 * A base class for all connection related errors.
 */
export class ConnectionError extends BaseError {
  parent: Error;
  original: Error;
  constructor(parent: Error);
}

/**
 * Thrown when a connection to a database is refused
 */
export class ConnectionRefusedError extends ConnectionError { }

/**
 * Thrown when a connection to a database is refused due to insufficient privileges
 */
export class AccessDeniedError extends ConnectionError { }

/**
 * Thrown when a connection to a database has a hostname that was not found
 */
export class HostNotFoundError extends ConnectionError { }

/**
 * Thrown when a connection to a database has a hostname that was not reachable
 */
export class HostNotReachableError extends ConnectionError { }


/**
 * Thrown when a connection to a database has invalid values for any of the connection parameters
 */
export class InvalidConnectionError extends ConnectionError { }

/**
 * Thrown when a connection to a database times out
 */
export class ConnectionTimedOutError extends ConnectionError { }
}
declare module 'sequelize/lib/errors' {
export * from '~sequelize/lib/errors';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-sequelize/e12e516e5de4d9b95e5a44be3f16648a1ba74eed/lib/deferrable.d.ts
declare module '~sequelize/lib/deferrable' {

/**
 * Can be used to
 * make foreign key constraints deferrable and to set the constaints within a
 * transaction. This is only supported in PostgreSQL.
 *
 * The foreign keys can be configured like this. It will create a foreign key
 * that will check the constraints immediately when the data was inserted.
 *
 * ```js
 * sequelize.define('Model', {
 *   foreign_id: {
 *     type: Sequelize.INTEGER,
 *     references: {
 *       model: OtherModel,
 *       key: 'id',
 *       deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE
 *     }
 *   }
 * });
 * ```
 *
 * The constraints can be configured in a transaction like this. It will
 * trigger a query once the transaction has been started and set the constraints
 * to be checked at the very end of the transaction.
 *
 * ```js
 * sequelize.transaction({
 *   deferrable: Sequelize.Deferrable.SET_DEFERRED
 * });
 * ```
 */

/**
 *
 */
export interface AbstractDeferrableStatic {
  new (): AbstractDeferrable;
  (): AbstractDeferrable;
}
export interface AbstractDeferrable {
  toString(): string;
  toSql(): string;
}

export interface InitiallyDeferredDeferrableStatic extends AbstractDeferrableStatic {
  new (): InitiallyDeferredDeferrable;
  (): InitiallyDeferredDeferrable;
}
export interface InitiallyDeferredDeferrable extends AbstractDeferrable {}
export const INITIALLY_DEFERRED: InitiallyDeferredDeferrableStatic;

export interface InitiallyImmediateDeferrableStatic extends AbstractDeferrableStatic {
  new (): InitiallyImmediateDeferrable;
  (): InitiallyImmediateDeferrable;
}
export interface InitiallyImmediateDeferrable extends AbstractDeferrable {}
export const INITIALLY_IMMEDIATE: InitiallyImmediateDeferrableStatic;


export interface NotDeferrableStatic extends AbstractDeferrableStatic {
  new (): NotDeferrable;
  (): NotDeferrable;
}
export interface NotDeferrable {}
/**
 * Will set the constraints to not deferred. This is the default in PostgreSQL and it make
 * it impossible to dynamically defer the constraints within a transaction.
 */
export const NOT: NotDeferrableStatic;


export interface SetDeferredDeferrableStatic extends AbstractDeferrableStatic {
  /**
   * @param constraints An array of constraint names. Will defer all constraints by default.
   */
  new (constraints: string[]): SetDeferredDeferrable;
  /**
   * @param constraints An array of constraint names. Will defer all constraints by default.
   */
  (constraints: string[]): SetDeferredDeferrable;
}
export interface SetDeferredDeferrable {}
/**
 * Will trigger an additional query at the beginning of a
 * transaction which sets the constraints to deferred.
 */
export const SET_DEFERRED: SetDeferredDeferrableStatic;


export interface SetImmediateDeferrableStatic extends AbstractDeferrableStatic {
  /**
   * @param constraints An array of constraint names. Will defer all constraints by default.
   */
  new (constraints: string[]): SetImmediateDeferrable;
  /**
   * @param constraints An array of constraint names. Will defer all constraints by default.
   */
  (constraints: string[]): SetImmediateDeferrable;
}
export interface SetImmediateDeferrable {}
/**
 * Will trigger an additional query at the beginning of a
 * transaction which sets the constraints to immediately.
 *
 * @param constraints An array of constraint names. Will defer all constraints by default.
 */
export const SET_IMMEDIATE: SetImmediateDeferrableStatic;
}
declare module 'sequelize/lib/deferrable' {
export * from '~sequelize/lib/deferrable';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-validator/2ff2362c9341b41b781e83bc7c0759c0359be6e2/index.d.ts
declare module '~sequelize~validator/index' {
// Type definitions for validator.js v4.5.1
// Project: https://github.com/chriso/validator.js
// Definitions by: tgfjt <https://github.com/tgfjt>, Ilya Mochalov <https://github.com/chrootsu>

namespace validator {
  interface ValidatorStatic {

    /**************
     * Validators *
     **************/

    // check if the string contains the seed.
    contains(str: string, elem: any): boolean;

    // check if the string matches the comparison.
    equals(str: string, comparison: any): boolean;

    // check if the string is a date that's after the specified date (defaults to now).
    isAfter(str: string, date?: string): boolean;

    // check if the string contains only letters (a-zA-Z).
    isAlpha(str: string): boolean;

    // check if the string contains only letters and numbers.
    isAlphanumeric(str: string): boolean;

    // check if the string contains ASCII chars only.
    isAscii(str: string): boolean;

    // check if a string is base64 encoded.
    isBase64(str: string): boolean;

    // check if the string is a date that's before the specified date.
    isBefore(str: string, date?: string): boolean;

    // check if a string is a boolean.
    isBoolean(str: string): boolean;

    // check if the string's length (in bytes) falls in a range.
    isByteLength(str: string, options: IsByteLengthOptions): boolean;
    isByteLength(str: string, min: number, max?: number): boolean;

    // check if the string is a credit card.
    isCreditCard(str: string): boolean;

    // check if the string is a valid currency amount.
    isCurrency(str: string, options?: IsCurrencyOptions): boolean;

    // check if the string is a data uri format (https://developer.mozilla.org/en-US/docs/Web/HTTP/data_URIs)
    isDataURI(str: string): boolean;

    // check if the string is a date.
    isDate(str: string): boolean;

    // check if the string represents a decimal number, such as 0.1, .3, 1.1, 1.00003, 4.0, etc.
    isDecimal(str: string): boolean;

    // check if the string is a number that's divisible by another.
    isDivisibleBy(str: string, number: number): boolean;

    // check if the string is an email.
    isEmail(str: string, options?: IsEmailOptions): boolean;

    // check if the string is a fully qualified domain name (e.g. domain.com).
    isFQDN(str: string, options?: IsFQDNOptions): boolean;

    // check if the string is a float.
    isFloat(str: string, options?: IsFloatOptions): boolean;

    // check if the string contains any full-width chars.
    isFullWidth(str: string): boolean;

    // check if the string contains any half-width chars.
    isHalfWidth(str: string): boolean;

    // check if the string is a hexadecimal color.
    isHexColor(str: string): boolean;

    // check if the string is a hexadecimal number.
    isHexadecimal(str: string): boolean;

    // check if the string is an IP (version 4 or 6).
    isIP(str: string, version?: number): boolean;

    // check if the string is an ISBN (version 10 or 13).
    isISBN(str: string, version?: number): boolean;

    // check if the string is an ISIN (https://en.wikipedia.org/wiki/International_Securities_Identification_Number)
    // (stock/security identifier).
    isISIN(str: string): boolean;

    // check if the string is a valid ISO 8601 (https://en.wikipedia.org/wiki/ISO_8601) date.
    isISO8601(str: string): boolean;

    // check if the string is in a array of allowed values.
    isIn(str: string, values: any[]): boolean;

    // check if the string is an integer.
    isInt(str: string, options?: IsIntOptions): boolean;

    // check if the string is valid JSON (note: uses JSON.parse).
    isJSON(str: string): boolean;

    // check if the string's length falls in a range.
    // Note: this function takes into account surrogate pairs.
    isLength(str: string, options: IsLengthOptions): boolean;
    isLength(str: string, min: number, max?: number): boolean;

    // check if the string is lowercase.
    isLowercase(str: string): boolean;

    // check if the string is a MAC address.
    isMACAddress(str: string): boolean;

    // check if the string is a MD5 hash.
    isMD5(str: string): boolean;

    // check if the string is a mobile phone number, (locale is one of
    // ['ar-DZ', 'ar-SA', 'ar-SY', 'cs-CZ', 'de-DE', 'da-DK', 'el-GR', 'en-AU', 'en-GB', 'en-HK',
    // 'en-IN', 'en-NZ', 'en-US', 'en-CA', 'en-ZA', 'en-ZM', 'es-ES', 'fi-FI', 'fr-FR', 'hu-HU',
    // 'it-IT', 'ja-JP', 'ms-MY', 'nb-NO', 'nn-NO', 'pl-PL', 'pt-PT', 'ru-RU', 'sr-RS', 'tr-TR',
    // 'vi-VN', 'zh-CN', 'zh-TW']).
    isMobilePhone(str: string, locale: string): boolean;

    // check if the string is a valid hex-encoded representation of a MongoDB ObjectId
    // (http://docs.mongodb.org/manual/reference/object-id/).
    isMongoId(str: string): boolean;

    // check if the string contains one or more multibyte chars.
    isMultibyte(str: string): boolean;

    // check if the string is null.
    isNull(str: string): boolean;

    // check if the string contains only numbers.
    isNumeric(str: string): boolean;

    // check if the string contains any surrogate pairs chars.
    isSurrogatePair(str: string): boolean;

    // check if the string is an URL.
    isURL(str: string, options?: IsURLOptions): boolean;

    // check if the string is a UUID. Must be one of ['3', '4', '5', 'all'], default is all.
    isUUID(str: string, version?: string|number): boolean;

    // check if the string is uppercase.
    isUppercase(str: string): boolean;

    // check if the string contains a mixture of full and half-width chars.
    isVariableWidth(str: string): boolean;

    // checks characters if they appear in the whitelist.
    isWhitelisted(str: string, chars: string|string[]): boolean;

    // check if string matches the pattern.
    matches(str: string, pattern: RegExp|string, modifiers?: string): boolean;

    /**************
     * Sanitizers *
     **************/

    // remove characters that appear in the blacklist. The characters are used in a RegExp and so you will need
    // to escape some chars, e.g. blacklist(input, '\\[\\]').
    blacklist(input: string, chars: string): string;

    // replace <, >, &, ', " and / with HTML entities.
    escape(input: string): string;

    // replaces HTML encoded entities with <, >, &, ', " and /.
    unescape(input: string): string;

    // trim characters from the left-side of the input.
    ltrim(input: any, chars?: string): string;

    // canonicalize an email address.
    normalizeEmail(email: string, options?: NormalizeEmailOptions): string;

    // trim characters from the right-side of the input.
    rtrim(input: any, chars?: string): string;

    // remove characters with a numerical value < 32 and 127, mostly control characters. If keep_new_lines is true,
    // newline characters are preserved (\n and \r, hex 0xA and 0xD). Unicode-safe in JavaScript.
    stripLow(input: string, keep_new_lines?: boolean): string;

    // convert the input to a boolean. Everything except for '0', 'false' and '' returns true. In strict mode only '1'
    // and 'true' return true.
    toBoolean(input: any, strict?: boolean): boolean;

    // convert the input to a date, or null if the input is not a date.
    toDate(input: any): Date; // Date or null

    // convert the input to a float, or NaN if the input is not a float.
    toFloat(input: any): number; // number or NaN

    // convert the input to an integer, or NaN if the input is not an integer.
    toInt(input: any, radix?: number): number; // number or NaN

    // trim characters (whitespace by default) from both sides of the input.
    trim(input: any, chars?: string): string;

    // remove characters that do not appear in the whitelist. The characters are used in a RegExp and so you will
    // need to escape some chars, e.g. whitelist(input, '\\[\\]').
    whitelist(input: string, chars: string): string;

    /**************
     * Extensions *
     **************/

    // add your own validators.
    // Note: that the first argument will be automatically coerced to a string.
    extend<T extends Function>(name: string, fn: T): void;
  }

  // options for IsByteLength
  interface IsByteLengthOptions {
    min?: number;
    max?: number;
  }

  // options for IsCurrency
  interface IsCurrencyOptions {
    symbol?: string;
    require_symbol?: boolean;
    allow_space_after_symbol?: boolean;
    symbol_after_digits?: boolean;
    allow_negatives?: boolean;
    parens_for_negatives?: boolean;
    negative_sign_before_digits?: boolean;
    negative_sign_after_digits?: boolean;
    allow_negative_sign_placeholder?: boolean;
    thousands_separator?: string;
    decimal_separator?: string;
    allow_space_after_digits?: boolean;
  }

  // options for isEmail
  interface IsEmailOptions {
    allow_display_name?: boolean;
    allow_utf8_local_part?: boolean;
    require_tld?: boolean;
  }

  // options for isFQDN
  interface IsFQDNOptions {
    require_tld?: boolean;
    allow_underscores?: boolean;
    allow_trailing_dot?: boolean;
  }

  // options for IsFloat
  interface IsFloatOptions {
    min?: number;
    max?: number;
  }

  // options for IsInt
  interface IsIntOptions {
    min?: number;
    max?: number;
  }

  // options for IsLength
  interface IsLengthOptions {
    min?: number;
    max?: number;
  }

  // options for isURL
  interface IsURLOptions {
    protocols?: string[];
    require_tld?: boolean;
    require_protocol?: boolean;
    require_host: boolean;
    require_valid_protocol?: boolean;
    allow_underscores?: boolean;
    host_whitelist?: (string|RegExp)[];
    host_blacklist?: (string|RegExp)[];
    allow_trailing_dot?: boolean;
    allow_protocol_relative_urls?: boolean;
  }

  // options for normalizeEmail
  interface NormalizeEmailOptions {
    lowercase?: boolean;
    remove_dots?: boolean;
    remove_extension?: boolean;
  }
}

const validator: validator.ValidatorStatic;
export = validator;
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-sequelize/e12e516e5de4d9b95e5a44be3f16648a1ba74eed/lib/utils/validator-extras.d.ts
declare module '~sequelize/lib/utils/validator-extras' {
import {ValidatorStatic} from '~sequelize~validator/index';

export interface Extensions {
  notEmpty(str: string): boolean;
  len(str: string, min: number, max: number): boolean;
  isUrl(str: string): boolean;
  isIPv6(str: string): boolean;
  isIPv4(str: string): boolean;
  notIn(str: string, values: Array<string>): boolean;
  regex(str: string, pattern: string, modifiers: string): boolean;
  notRegex(str: string, pattern: string, modifiers: string): boolean;
  isDecimal(str: string): boolean;
  min(str: string, val: number): boolean;
  max(str: string, val: number): boolean;
  not(str: string, pattern: string, modifiers: string): boolean;
  contains(str: string, elem: Array<string>): boolean;
  notContains(str: string, elem: Array<string>): boolean;
  is(str: string, pattern: string, modifiers: string): boolean;
}
export const extensions: Extensions;

export interface Validator extends ValidatorStatic, Extensions {
  contains(str: string, elem: string[]): boolean;
}
export const validator: Validator;
}
declare module 'sequelize/lib/utils/validator-extras' {
export * from '~sequelize/lib/utils/validator-extras';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-sequelize/e12e516e5de4d9b95e5a44be3f16648a1ba74eed/lib/sequelize.d.ts
declare module '~sequelize/lib/sequelize' {

import {Literal, Json, Where, Col, Cast, Fn} from '~sequelize/lib/utils';
import {Transaction, TransactionOptions} from '~sequelize/lib/transaction';
import {QueryInterface, QueryOptions} from '~sequelize/lib/query-interface';
import * as DataTypes from '~sequelize/lib/data-types';
import {Promise} from '~sequelize/lib/promise';
import {ModelManager} from '~sequelize/lib/model-manager';
import {
  Model,
  ModelAttributes,
  ModelOptions,
  DestroyOptions,
  DropOptions,
  CreateOptions,
  InstanceDestroyOptions,
  UpdateOptions,
  BulkCreateOptions,
  FindOptions,
  WhereAttributeHash,
  WhereOperators,
  AndOperator,
  OrOperator
} from '~sequelize/lib/model';


/**
 * Sync Options
 */
export interface SyncOptions {

  /**
   * If force is true, each DAO will do DROP TABLE IF EXISTS ..., before it tries to create its own table
   */
  force?: boolean;

  /**
   * Match a regex against the database name before syncing, a safety check for cases where force: true is
   * used in tests but not live code
   */
  match?: RegExp;

  /**
   * A function that logs sql queries, or false for no logging
   */
  logging?: Function | boolean;

  /**
   * The schema that the tables should be created in. This can be overriden for each table in sequelize.define
   */
  schema?: string;

}

export interface SetOptions { }

/**
 * Connection Pool options
 */
export interface PoolOptions {

  /**
   * Maximum connections of the pool
   */
  maxConnections?: number;

  /**
   * Minimum connections of the pool
   */
  minConnections?: number;

  /**
   * The maximum time, in milliseconds, that a connection can be idle before being released.
   */
  maxIdleTime?: number;

  /**
   * A function that validates a connection. Called with client. The default function checks that client is an
   * object, and that its state is not disconnected.
   */
  validateConnection?: (client?: any) => boolean;

}

/**
 * Interface for replication Options in the sequelize constructor
 */
export interface ReplicationOptions {

  read?: {
    host?: string,
    port?: string | number,
    username?: string,
    password?: string,
    database?: string
  }

  write?: {
    host?: string,
    port?: string | number,
    username?: string,
    password?: string,
    database?: string
  }

}

/**
 * Options for the constructor of Sequelize main class
 */
export interface Options {

  /**
   * The dialect of the database you are connecting to. One of mysql, postgres, sqlite, mariadb and mssql.
   *
   * Defaults to 'mysql'
   */
  dialect?: 'mysql' | 'postgres' | 'sqlite' | 'mariadb' | 'mssql';

  /**
   * If specified, load the dialect library from this path. For example, if you want to use pg.js instead of
   * pg when connecting to a pg database, you should specify 'pg.js' here
   */
  dialectModulePath?: string;

  /**
   * An object of additional options, which are passed directly to the connection library
   */
  dialectOptions?: Object;

  /**
   * Only used by sqlite.
   *
   * Defaults to ':memory:'
   */
  storage?: string;

  /**
   * The host of the relational database.
   *
   * Defaults to 'localhost'
   */
  host?: string;

  /**
   * The port of the relational database.
   */
  port?: number;

  /**
   * The protocol of the relational database.
   *
   * Defaults to 'tcp'
   */
  protocol?: string;

  /**
   * Default options for model definitions. See sequelize.define for options
   */
  define?: ModelOptions;

  /**
   * Default options for sequelize.query
   */
  query?: QueryOptions;

  /**
   * Default options for sequelize.set
   */
  set?: SetOptions;

  /**
   * Default options for sequelize.sync
   */
  sync?: SyncOptions;

  /**
   * The timezone used when converting a date from the database into a JavaScript date. The timezone is also
   * used to SET TIMEZONE when connecting to the server, to ensure that the result of NOW, CURRENT_TIMESTAMP
   * and other time related functions have in the right timezone. For best cross platform performance use the
   * format
   * +/-HH:MM. Will also accept string versions of timezones used by moment.js (e.g. 'America/Los_Angeles');
   * this is useful to capture daylight savings time changes.
   *
   * Defaults to '+00:00'
   */
  timezone?: string;

  /**
   * A function that gets executed everytime Sequelize would log something.
   *
   * Defaults to console.log
   */
  logging?: boolean | Function;

  /**
   * A flag that defines if null values should be passed to SQL queries or not.
   *
   * Defaults to false
   */
  omitNull?: boolean;

  /**
   * A flag that defines if native library shall be used or not. Currently only has an effect for postgres
   *
   * Defaults to false
   */
  native?: boolean;

  /**
   * Use read / write replication. To enable replication, pass an object, with two properties, read and write.
   * Write should be an object (a single server for handling writes), and read an array of object (several
   * servers to handle reads). Each read/write server can have the following properties: `host`, `port`,
   * `username`, `password`, `database`
   *
   * Defaults to false
   */
  replication?: ReplicationOptions;

  /**
   * Connection pool options
   */
  pool?: PoolOptions;

  /**
   * Set to `false` to make table names and attributes case-insensitive on Postgres and skip double quoting of
   * them.
   *
   * Defaults to true
   */
  quoteIdentifiers?: boolean;

  /**
   * Set the default transaction isolation level. See `Sequelize.Transaction.ISOLATION_LEVELS` for possible
   * options.
   *
   * Defaults to 'REPEATABLE_READ'
   */
  isolationLevel?: string;

}

export interface QueryOptionsTransactionRequired { }

/**
 * This is the main class, the entry point to sequelize. To use it, you just need to
 * import sequelize:
 *
 * ```js
 * var Sequelize = require('sequelize');
 * ```
 *
 * In addition to sequelize, the connection library for the dialect you want to use
 * should also be installed in your project. You don't need to import it however, as
 * sequelize will take care of that.
 */
export class Sequelize {

  /**
   * A reference to Sequelize constructor from sequelize. Useful for accessing DataTypes, Errors etc.
   */
  Sequelize: typeof Sequelize;

  modelManager: ModelManager;

  /**
   * Creates a object representing a database function. This can be used in search queries, both in where and
   * order parts, and as default values in column definitions. If you want to refer to columns in your
   * function, you should use `sequelize.col`, so that the columns are properly interpreted as columns and
   * not a strings.
   *
   * Convert a user's username to upper case
   * ```js
   * instance.updateAttributes({
   *   username: self.sequelize.fn('upper', self.sequelize.col('username'))
   * })
   * ```
   * @param fn The function you want to call
   * @param args All further arguments will be passed as arguments to the function
   */
  static fn(fn: string, ...args: any[]): Fn;

  /**
   * Creates a object representing a column in the DB. This is often useful in conjunction with
   * `sequelize.fn`, since raw string arguments to fn will be escaped.
   *
   * @param col The name of the column
   */
  static col(col: string): Col;

  /**
   * Creates a object representing a call to the cast function.
   *
   * @param val The value to cast
   * @param type The type to cast it to
   */
  static cast(val: any, type: string): Cast;

  /**
   * Creates a object representing a literal, i.e. something that will not be escaped.
   *
   * @param val
   */
  static literal(val: any): Literal;
  static asIs(val: any): Literal;

  /**
   * An AND query
   *
   * @param args Each argument will be joined by AND
   */
  static and(...args: Array<WhereOperators | WhereAttributeHash>): AndOperator;

  /**
   * An OR query
   *
   * @param args Each argument will be joined by OR
   */
  static or(...args: Array<WhereOperators | WhereAttributeHash>): OrOperator;

  /**
   * Creates an object representing nested where conditions for postgres's json data-type.
   *
   * @param conditionsOrPath A hash containing strings/numbers or other nested hash, a string using dot
   *     notation or a string using postgres json syntax.
   * @param value An optional value to compare against. Produces a string of the form "<json path> =
   *     '<value>'".
   */
  static json(conditionsOrPath: string | Object, value?: string | number | boolean): Json;

  /**
   * A way of specifying attr = condition.
   *
   * The attr can either be an object taken from `Model.rawAttributes` (for example `Model.rawAttributes.id`
   * or
   * `Model.rawAttributes.name`). The attribute should be defined in your model definition. The attribute can
   * also be an object from one of the sequelize utility functions (`sequelize.fn`, `sequelize.col` etc.)
   *
   * For string attributes, use the regular `{ where: { attr: something }}` syntax. If you don't want your
   * string to be escaped, use `sequelize.literal`.
   *
   * @param attr The attribute, which can be either an attribute object from `Model.rawAttributes` or a
   *     sequelize object, for example an instance of `sequelize.fn`. For simple string attributes, use the
   *     POJO syntax
   * @param comparator Comparator
   * @param logic The condition. Can be both a simply type, or a further condition (`.or`, `.and`, `.literal`
   *     etc.)
   */
  static where(attr: Object, comparator: string, logic: string | Object): Where;
  static where(attr: Object, logic: string | Object): Where;
  static condition(attr: Object, logic: string | Object): Where;

  // -------------------- Static Hooks ---------------------------------------------------------------------

  /**
   * Add a hook to the model
   *
   * @param hookType
   * @param name Provide a name for the hook function. It can be used to remove the hook later or to order
   *     hooks based on some sort of priority system in the future.
   * @param fn The hook function
   *
   * @alias hook
   */
  static addHook(hookType: string, name: string, fn: Function): typeof Sequelize;
  static addHook(hookType: string, fn: Function): typeof Sequelize;
  static hook(hookType: string, name: string, fn: Function): typeof Sequelize;
  static hook(hookType: string, fn: Function): typeof Sequelize;

  /**
   * Remove hook from the model
   *
   * @param hookType
   * @param name
   */
  static removeHook(hookType: string, name: string): typeof Sequelize;

  /**
   * Check whether the mode has any hooks of this type
   *
   * @param hookType
   *
   * @alias hasHooks
   */
  static hasHook(hookType: string): boolean;
  static hasHooks(hookType: string): boolean;

  /**
   * A hook that is run before validation
   *
   * @param name
   * @param fn A callback function that is called with instance, options
   */
  static beforeValidate(name: string, fn: (instance: Model, options: Object) => void): void;
  static beforeValidate(fn: (instance: Model, options: Object) => void): void;

  /**
   * A hook that is run after validation
   *
   * @param name
   * @param fn A callback function that is called with instance, options
   */
  static afterValidate(name: string,
    fn: (instance: Model, options: Object) => void): void;
  static afterValidate(fn: (instance: Model, options: Object) => void): void;

  /**
   * A hook that is run before creating a single instance
   *
   * @param name
   * @param fn A callback function that is called with attributes, options
   */
  static beforeCreate(name: string, fn: (attributes: Model, options: CreateOptions) => void): void;
  static beforeCreate(fn: (attributes: Model, options: CreateOptions) => void): void;

  /**
   * A hook that is run after creating a single instance
   *
   * @param name
   * @param fn A callback function that is called with attributes, options
   */
  static afterCreate(name: string, fn: (attributes: Model, options: CreateOptions) => void): void;
  static afterCreate(fn: (attributes: Model, options: CreateOptions) => void): void;

  /**
   * A hook that is run before destroying a single instance
   *
   * @param name
   * @param fn A callback function that is called with instance, options
   * @alias beforeDelete
   */
  static beforeDestroy(name: string, fn: (instance: Model, options: InstanceDestroyOptions) => void): void;
  static beforeDestroy(fn: (instance: Model, options: InstanceDestroyOptions) => void): void;
  static beforeDelete(name: string, fn: (instance: Model, options: InstanceDestroyOptions) => void): void;
  static beforeDelete(fn: (instance: Model, options: InstanceDestroyOptions) => void): void;

  /**
   * A hook that is run after destroying a single instance
   *
   * @param name
   * @param fn A callback function that is called with instance, options
   * @alias afterDelete
   */
  static afterDestroy(name: string, fn: (instance: Model, options: InstanceDestroyOptions) => void): void;
  static afterDestroy(fn: (instance: Model, options: InstanceDestroyOptions) => void): void;
  static afterDelete(name: string, fn: (instance: Model, options: InstanceDestroyOptions) => void): void;
  static afterDelete(fn: (instance: Model, options: InstanceDestroyOptions) => void): void;

  /**
   * A hook that is run before updating a single instance
   *
   * @param name
   * @param fn A callback function that is called with instance, options
   */
  static beforeUpdate(name: string,
    fn: (instance: Model, options: UpdateOptions) => void): void;
  static beforeUpdate(fn: (instance: Model, options: UpdateOptions) => void): void;

  /**
   * A hook that is run after updating a single instance
   *
   * @param name
   * @param fn A callback function that is called with instance, options
   */
  static afterUpdate(name: string, fn: (instance: Model, options: UpdateOptions) => void): void;
  static afterUpdate(fn: (instance: Model, options: UpdateOptions) => void): void;

  /**
   * A hook that is run before creating instances in bulk
   *
   * @param name
   * @param fn A callback function that is called with instances, options
   */
  static beforeBulkCreate(name: string, fn: (instances: Model[], options: BulkCreateOptions) => void): void;
  static beforeBulkCreate(fn: (instances: Model[], options: BulkCreateOptions) => void): void;

  /**
   * A hook that is run after creating instances in bulk
   *
   * @param name
   * @param fn A callback function that is called with instances, options
   * @name afterBulkCreate
   */
  static afterBulkCreate(name: string, fn: (instances: Model[], options: BulkCreateOptions) => void): void;
  static afterBulkCreate(fn: (instances: Model[], options: BulkCreateOptions) => void): void;

  /**
   * A hook that is run before destroying instances in bulk
   *
   * @param name
   * @param fn   A callback function that is called with options
   *
   * @alias beforeBulkDelete
   */
  static beforeBulkDestroy(name: string, fn: (options: BulkCreateOptions) => void): void;
  static beforeBulkDestroy(fn: (options: BulkCreateOptions) => void): void;
  static beforeBulkDelete(name: string, fn: (options: BulkCreateOptions) => void): void;
  static beforeBulkDelete(fn: (options: BulkCreateOptions) => void): void;

  /**
   * A hook that is run after destroying instances in bulk
   *
   * @param name
   * @param fn   A callback function that is called with options
   *
   * @alias afterBulkDelete
   */
  static afterBulkDestroy(name: string, fn: (options: DestroyOptions) => void): void;
  static afterBulkDestroy(fn: (options: DestroyOptions) => void): void;
  static afterBulkDelete(name: string, fn: (options: DestroyOptions) => void): void;
  static afterBulkDelete(fn: (options: DestroyOptions) => void): void;

  /**
   * A hook that is run after updating instances in bulk
   *
   * @param name
   * @param fn   A callback function that is called with options
   */
  static beforeBulkUpdate(name: string, fn: (options: UpdateOptions) => void): void;
  static beforeBulkUpdate(fn: (options: UpdateOptions) => void): void;

  /**
   * A hook that is run after updating instances in bulk
   *
   * @param name
   * @param fn   A callback function that is called with options
   */
  static afterBulkUpdate(name: string, fn: (options: UpdateOptions) => void): void;
  static afterBulkUpdate(fn: (options: UpdateOptions) => void): void;

  /**
   * A hook that is run before a find (select) query
   *
   * @param name
   * @param fn   A callback function that is called with options
   */
  static beforeFind(name: string, fn: (options: FindOptions) => void): void;
  static beforeFind(fn: (options: FindOptions) => void): void;

  /**
   * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded
   *
   * @param name
   * @param fn   A callback function that is called with options
   */
  static beforeFindAfterExpandIncludeAll(name: string,
    fn: (options: FindOptions) => void): void;
  static beforeFindAfterExpandIncludeAll(fn: (options: FindOptions) => void): void;

  /**
   * A hook that is run before a find (select) query, after all option parsing is complete
   *
   * @param name
   * @param fn   A callback function that is called with options
   */
  static beforeFindAfterOptions(name: string, fn: (options: FindOptions) => void): void;
  static beforeFindAfterOptions(fn: (options: FindOptions) => void): void;

  /**
   * A hook that is run after a find (select) query
   *
   * @param name
   * @param fn   A callback function that is called with instance(s), options
   */
  static afterFind(name: string, fn: (instancesOrInstance: Model[] | Model, options: FindOptions,
    fn?: Function) => void): void;
  static afterFind(fn: (instancesOrInstance: Model[] | Model, options: FindOptions,
    fn?: Function) => void): void;

  /**
   * A hook that is run before a define call
   *
   * @param name
   * @param fn   A callback function that is called with attributes, options
   */
  static beforeDefine(name: string, fn: (attributes: ModelAttributes, options: ModelOptions) => void): void;
  static beforeDefine(fn: (attributes: ModelAttributes, options: ModelOptions) => void): void;

  /**
   * A hook that is run after a define call
   *
   * @param name
   * @param fn   A callback function that is called with factory
   */
  static afterDefine(name: string, fn: (model: typeof Model) => void): void;
  static afterDefine(fn: (model: typeof Model) => void): void;

  /**
   * A hook that is run before Sequelize() call
   *
   * @param name
   * @param fn   A callback function that is called with config, options
   */
  static beforeInit(name: string, fn: (config: Object, options: Object) => void): void;
  static beforeInit(fn: (config: Object, options: Object) => void): void;

  /**
   * A hook that is run after Sequelize() call
   *
   * @param name
   * @param fn   A callback function that is called with sequelize
   */
  static afterInit(name: string, fn: (sequelize: Sequelize) => void): void;
  static afterInit(fn: (sequelize: Sequelize) => void): void;

  /**
   * A hook that is run before sequelize.sync call
   * @param {String}   name
   * @param {Function} fn   A callback function that is called with options passed to sequelize.sync
   * @name beforeBulkSync
   */
  static beforeBulkSync(name: string, fn: (options: SyncOptions) => any): void;
  static beforeBulkSync(fn: (options: SyncOptions) => any): void;

  /**
   * A hook that is run after sequelize.sync call
   * @param {String}   name
   * @param {Function} fn   A callback function that is called with options passed to sequelize.sync
   * @name afterBulkSync
   */
  static afterBulkSync(name: string, fn: (options: SyncOptions) => any): void;
  static afterBulkSync(fn: (options: SyncOptions) => any): void;

  /**
   * A hook that is run before Model.sync call
   * @param {String}   name
   * @param {Function} fn   A callback function that is called with options passed to Model.sync
   * @name beforeSync
   */
  static beforeSync(name: string, fn: (options: SyncOptions) => any): void;
  static beforeSync(fn: (options: SyncOptions) => any): void;

  /**
   * A hook that is run after Model.sync call
   * @param {String}   name
   * @param {Function} fn   A callback function that is called with options passed to Model.sync
   * @name afterSync
   */
  static afterSync(name: string, fn: (options: SyncOptions) => any): void;
  static afterSync(fn: (options: SyncOptions) => any): void;

  // --------------------------- instance hooks -----------------------------------------------------------

  /**
   * Add a hook to the model
   *
   * @param hookType
   * @param name Provide a name for the hook function. It can be used to remove the hook later or to order
   *     hooks based on some sort of priority system in the future.
   * @param fn The hook function
   *
   * @alias hook
   */
  addHook(hookType: string, name: string, fn: Function): typeof Sequelize;
  addHook(hookType: string, fn: Function): typeof Sequelize;
  hook(hookType: string, name: string, fn: Function): typeof Sequelize;
  hook(hookType: string, fn: Function): typeof Sequelize;

  /**
   * Remove hook from the model
   *
   * @param hookType
   * @param name
   */
  removeHook(hookType: string, name: string): typeof Sequelize;

  /**
   * Check whether the mode has any hooks of this type
   *
   * @param hookType
   *
   * @alias hasHooks
   */
  hasHook(hookType: string): boolean;
  hasHooks(hookType: string): boolean;

  /**
   * A hook that is run before validation
   *
   * @param name
   * @param fn A callback function that is called with instance, options
   */
  beforeValidate(name: string, fn: (instance: Model, options: Object) => void): void;
  beforeValidate(fn: (instance: Model, options: Object) => void): void;

  /**
   * A hook that is run after validation
   *
   * @param name
   * @param fn A callback function that is called with instance, options
   */
  afterValidate(name: string,
    fn: (instance: Model, options: Object) => void): void;
  afterValidate(fn: (instance: Model, options: Object) => void): void;

  /**
   * A hook that is run before creating a single instance
   *
   * @param name
   * @param fn A callback function that is called with attributes, options
   */
  beforeCreate(name: string, fn: (attributes: Model, options: CreateOptions) => void): void;
  beforeCreate(fn: (attributes: Model, options: CreateOptions) => void): void;

  /**
   * A hook that is run after creating a single instance
   *
   * @param name
   * @param fn A callback function that is called with attributes, options
   */
  afterCreate(name: string, fn: (attributes: Model, options: CreateOptions) => void): void;
  afterCreate(fn: (attributes: Model, options: CreateOptions) => void): void;

  /**
   * A hook that is run before destroying a single instance
   *
   * @param name
   * @param fn A callback function that is called with instance, options
   * @alias beforeDelete
   */
  beforeDestroy(name: string, fn: (instance: Model, options: InstanceDestroyOptions) => void): void;
  beforeDestroy(fn: (instance: Model, options: InstanceDestroyOptions) => void): void;
  beforeDelete(name: string, fn: (instance: Model, options: InstanceDestroyOptions) => void): void;
  beforeDelete(fn: (instance: Model, options: InstanceDestroyOptions) => void): void;

  /**
   * A hook that is run after destroying a single instance
   *
   * @param name
   * @param fn A callback function that is called with instance, options
   * @alias afterDelete
   */
  afterDestroy(name: string, fn: (instance: Model, options: InstanceDestroyOptions) => void): void;
  afterDestroy(fn: (instance: Model, options: InstanceDestroyOptions) => void): void;
  afterDelete(name: string, fn: (instance: Model, options: InstanceDestroyOptions) => void): void;
  afterDelete(fn: (instance: Model, options: InstanceDestroyOptions) => void): void;

  /**
   * A hook that is run before updating a single instance
   *
   * @param name
   * @param fn A callback function that is called with instance, options
   */
  beforeUpdate(name: string,
    fn: (instance: Model, options: UpdateOptions) => void): void;
  beforeUpdate(fn: (instance: Model, options: UpdateOptions) => void): void;

  /**
   * A hook that is run after updating a single instance
   *
   * @param name
   * @param fn A callback function that is called with instance, options
   */
  afterUpdate(name: string, fn: (instance: Model, options: UpdateOptions) => void): void;
  afterUpdate(fn: (instance: Model, options: UpdateOptions) => void): void;

  /**
   * A hook that is run before creating instances in bulk
   *
   * @param name
   * @param fn A callback function that is called with instances, options
   */
  beforeBulkCreate(name: string, fn: (instances: Model[], options: BulkCreateOptions) => void): void;
  beforeBulkCreate(fn: (instances: Model[], options: BulkCreateOptions) => void): void;

  /**
   * A hook that is run after creating instances in bulk
   *
   * @param name
   * @param fn A callback function that is called with instances, options
   * @name afterBulkCreate
   */
  afterBulkCreate(name: string, fn: (instances: Model[], options: BulkCreateOptions) => void): void;
  afterBulkCreate(fn: (instances: Model[], options: BulkCreateOptions) => void): void;

  /**
   * A hook that is run before destroying instances in bulk
   *
   * @param name
   * @param fn   A callback function that is called with options
   *
   * @alias beforeBulkDelete
   */
  beforeBulkDestroy(name: string, fn: (options: BulkCreateOptions) => void): void;
  beforeBulkDestroy(fn: (options: BulkCreateOptions) => void): void;
  beforeBulkDelete(name: string, fn: (options: BulkCreateOptions) => void): void;
  beforeBulkDelete(fn: (options: BulkCreateOptions) => void): void;

  /**
   * A hook that is run after destroying instances in bulk
   *
   * @param name
   * @param fn   A callback function that is called with options
   *
   * @alias afterBulkDelete
   */
  afterBulkDestroy(name: string, fn: (options: DestroyOptions) => void): void;
  afterBulkDestroy(fn: (options: DestroyOptions) => void): void;
  afterBulkDelete(name: string, fn: (options: DestroyOptions) => void): void;
  afterBulkDelete(fn: (options: DestroyOptions) => void): void;

  /**
   * A hook that is run after updating instances in bulk
   *
   * @param name
   * @param fn   A callback function that is called with options
   */
  beforeBulkUpdate(name: string, fn: (options: UpdateOptions) => void): void;
  beforeBulkUpdate(fn: (options: UpdateOptions) => void): void;

  /**
   * A hook that is run after updating instances in bulk
   *
   * @param name
   * @param fn   A callback function that is called with options
   */
  afterBulkUpdate(name: string, fn: (options: UpdateOptions) => void): void;
  afterBulkUpdate(fn: (options: UpdateOptions) => void): void;

  /**
   * A hook that is run before a find (select) query
   *
   * @param name
   * @param fn   A callback function that is called with options
   */
  beforeFind(name: string, fn: (options: FindOptions) => void): void;
  beforeFind(fn: (options: FindOptions) => void): void;

  /**
   * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded
   *
   * @param name
   * @param fn   A callback function that is called with options
   */
  beforeFindAfterExpandIncludeAll(name: string,
    fn: (options: FindOptions) => void): void;
  beforeFindAfterExpandIncludeAll(fn: (options: FindOptions) => void): void;

  /**
   * A hook that is run before a find (select) query, after all option parsing is complete
   *
   * @param name
   * @param fn   A callback function that is called with options
   */
  beforeFindAfterOptions(name: string, fn: (options: FindOptions) => void): void;
  beforeFindAfterOptions(fn: (options: FindOptions) => void): void;

  /**
   * A hook that is run after a find (select) query
   *
   * @param name
   * @param fn   A callback function that is called with instance(s), options
   */
  afterFind(name: string, fn: (instancesOrInstance: Model[] | Model, options: FindOptions,
    fn?: Function) => void): void;
  afterFind(fn: (instancesOrInstance: Model[] | Model, options: FindOptions,
    fn?: Function) => void): void;

  /**
   * A hook that is run before a define call
   *
   * @param name
   * @param fn   A callback function that is called with attributes, options
   */
  beforeDefine(name: string, fn: (attributes: ModelAttributes, options: ModelOptions) => void): void;
  beforeDefine(fn: (attributes: ModelAttributes, options: ModelOptions) => void): void;

  /**
   * A hook that is run after a define call
   *
   * @param name
   * @param fn   A callback function that is called with factory
   */
  afterDefine(name: string, fn: (model: typeof Model) => void): void;
  afterDefine(fn: (model: typeof Model) => void): void;

  /**
   * A hook that is run before Sequelize() call
   *
   * @param name
   * @param fn   A callback function that is called with config, options
   */
  beforeInit(name: string, fn: (config: Object, options: Object) => void): void;
  beforeInit(fn: (config: Object, options: Object) => void): void;

  /**
   * A hook that is run after Sequelize() call
   *
   * @param name
   * @param fn   A callback function that is called with sequelize
   */
  afterInit(name: string, fn: (sequelize: Sequelize) => void): void;
  afterInit(fn: (sequelize: Sequelize) => void): void;

  /**
   * A hook that is run before sequelize.sync call
   * @param {String}   name
   * @param {Function} fn   A callback function that is called with options passed to sequelize.sync
   * @name beforeBulkSync
   */
  beforeBulkSync(name: string, fn: (options: SyncOptions) => any): void;
  beforeBulkSync(fn: (options: SyncOptions) => any): void;

  /**
   * A hook that is run after sequelize.sync call
   * @param {String}   name
   * @param {Function} fn   A callback function that is called with options passed to sequelize.sync
   * @name afterBulkSync
   */
  afterBulkSync(name: string, fn: (options: SyncOptions) => any): void;
  afterBulkSync(fn: (options: SyncOptions) => any): void;

  /**
   * A hook that is run before Model.sync call
   * @param {String}   name
   * @param {Function} fn   A callback function that is called with options passed to Model.sync
   * @name beforeSync
   */
  beforeSync(name: string, fn: (options: SyncOptions) => any): void;
  beforeSync(fn: (options: SyncOptions) => any): void;

  /**
   * A hook that is run after Model.sync call
   * @param {String}   name
   * @param {Function} fn   A callback function that is called with options passed to Model.sync
   * @name afterSync
   */
  afterSync(name: string, fn: (options: SyncOptions) => any): void;
  afterSync(fn: (options: SyncOptions) => any): void;


  /**
   * Instantiate sequelize with name of database, username and password
   *
   * #### Example usage
   *
   * ```javascript
   * // without password and options
   * var sequelize = new Sequelize('database', 'username')
   *
   * // without options
   * var sequelize = new Sequelize('database', 'username', 'password')
   *
   * // without password / with blank password
   * var sequelize = new Sequelize('database', 'username', null, {})
   *
   * // with password and options
   * var sequelize = new Sequelize('my_database', 'john', 'doe', {})
   *
   * // with uri (see below)
   * var sequelize = new Sequelize('mysql://localhost:3306/database', {})
   * ```
   *
   * @param database The name of the database
   * @param username The username which is used to authenticate against the
   *     database.
   * @param password The password which is used to authenticate against the
   *     database.
   * @param options An object with options.
   */
  constructor(database: string, username: string, password: string, options?: Options);
  constructor(database: string, username: string, options?: Options);

  /**
   * Instantiate sequelize with an URI
   * @name Sequelize
   * @constructor
   *
   * @param uri A full database URI
   * @param options See above for possible options
   */
  constructor(uri: string, options?: Options);

  /**
   * Returns the specified dialect.
   */
  getDialect(): string;

  /**
   * Returns an instance of QueryInterface.
   */
  getQueryInterface(): QueryInterface;

  /**
   * Define a new model, representing a table in the DB.
   *
   * The table columns are define by the hash that is given as the second argument. Each attribute of the
   * hash
   * represents a column. A short table definition might look like this:
   *
   * ```js
   * sequelize.define('modelName', {
   *     columnA: {
   *         type: Sequelize.BOOLEAN,
   *         validate: {
   *           is: ["[a-z]",'i'],        // will only allow letters
   *           max: 23,                  // only allow values <= 23
   *           isIn: {
   *             args: [['en', 'zh']],
   *             msg: "Must be English or Chinese"
   *           }
   *         },
   *         field: 'column_a'
   *         // Other attributes here
   *     },
   *     columnB: Sequelize.STRING,
   *     columnC: 'MY VERY OWN COLUMN TYPE'
   * })
   *
   * sequelize.models.modelName // The model will now be available in models under the name given to define
   * ```
   *
   * As shown above, column definitions can be either strings, a reference to one of the datatypes that are
   * predefined on the Sequelize constructor, or an object that allows you to specify both the type of the
   * column, and other attributes such as default values, foreign key constraints and custom setters and
   * getters.
   *
   * For a list of possible data types, see
   * http://docs.sequelizejs.com/en/latest/docs/models-definition/#data-types
   *
   * For more about getters and setters, see
   * http://docs.sequelizejs.com/en/latest/docs/models-definition/#getters-setters
   *
   * For more about instance and class methods, see
   * http://docs.sequelizejs.com/en/latest/docs/models-definition/#expansion-of-models
   *
   * For more about validation, see
   * http://docs.sequelizejs.com/en/latest/docs/models-definition/#validations
   *
   * @param modelName  The name of the model. The model will be stored in `sequelize.models` under this name
   * @param attributes An object, where each attribute is a column of the table. Each column can be either a
   *                   DataType, a string or a type-description object, with the properties described below:
   * @param options    These options are merged with the default define options provided to the Sequelize
   *                   constructor
   */
  define(modelName: string, attributes: ModelAttributes, options?: ModelOptions): typeof Model;

  /**
   * Fetch a Model which is already defined
   *
   * @param modelName The name of a model defined with Sequelize.define
   */
  model(modelName: string): typeof Model;

  /**
   * Checks whether a model with the given name is defined
   *
   * @param modelName The name of a model defined with Sequelize.define
   */
  isDefined(modelName: string): boolean;

  /**
   * Imports a model defined in another file
   *
   * Imported models are cached, so multiple calls to import with the same path will not load the file
   * multiple times
   *
   * See https://github.com/sequelize/sequelize/blob/master/examples/using-multiple-model-files/Task.js for a
   * short example of how to define your models in separate files so that they can be imported by
   * sequelize.import
   *
   * @param path The path to the file that holds the model you want to import. If the part is relative, it
   *     will be resolved relatively to the calling file
   *
   * @param defineFunction An optional function that provides model definitions. Useful if you do not
   *     want to use the module root as the define function
   */
  import<T extends typeof Model>(
    path: string,
    defineFunction?: (sequelize: Sequelize, dataTypes: typeof DataTypes) => T
  ): T;

  /**
   * Execute a query on the DB, with the posibility to bypass all the sequelize goodness.
   *
   * By default, the function will return two arguments: an array of results, and a metadata object,
   * containing number of affected rows etc. Use `.spread` to access the results.
   *
   * If you are running a type of query where you don't need the metadata, for example a `SELECT` query, you
   * can pass in a query type to make sequelize format the results:
   *
   * ```js
   * sequelize.query('SELECT...').spread(function (results, metadata) {
   *   // Raw query - use spread
   * });
   *
   * sequelize.query('SELECT...', { type: sequelize.QueryTypes.SELECT }).then(function (results) {
   *   // SELECT query - use then
   * })
   * ```
   *
   * @param sql
   * @param options Query options
   */
  query(sql: string | { query: string, values: Array<any> }, options?: QueryOptions): Promise<any>;

  /**
   * Execute a query which would set an environment or user variable. The variables are set per connection,
   * so this function needs a transaction.
   *
   * Only works for MySQL.
   *
   * @param variables Object with multiple variables.
   * @param options Query options.
   */
  set(variables: Object, options: QueryOptionsTransactionRequired): Promise<any>;

  /**
   * Escape value.
   *
   * @param value Value that needs to be escaped
   */
  escape(value: string | number | Date): string;

  /**
   * Create a new database schema.
   *
   * Note,that this is a schema in the
   * [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),
   * not a database table. In mysql and sqlite, this command will do nothing.
   *
   * @param schema Name of the schema
   * @param options Options supplied
   * @param options.logging A function that logs sql queries, or false for no logging
   */
  createSchema(schema: string, options: { logging?: boolean | Function }): Promise<any>;

  /**
   * Show all defined schemas
   *
   * Note,that this is a schema in the
   * [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),
   * not a database table. In mysql and sqlite, this will show all tables.
   *
   * @param options Options supplied
   * @param options.logging A function that logs sql queries, or false for no logging
   */
  showAllSchemas(options: { logging?: boolean | Function }): Promise<any>;

  /**
   * Drop a single schema
   *
   * Note,that this is a schema in the
   * [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),
   * not a database table. In mysql and sqlite, this drop a table matching the schema name
   *
   * @param schema Name of the schema
   * @param options Options supplied
   * @param options.logging A function that logs sql queries, or false for no logging
   */
  dropSchema(schema: string, options: { logging?: boolean | Function }): Promise<any>;

  /**
   * Drop all schemas
   *
   * Note,that this is a schema in the
   * [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),
   * not a database table. In mysql and sqlite, this is the equivalent of drop all tables.
   *
   * @param options Options supplied
   * @param options.logging A function that logs sql queries, or false for no logging
   */
  dropAllSchemas(options: { logging?: boolean | Function }): Promise<any>;

  /**
   * Sync all defined models to the DB.
   *
   * @param options Sync Options
   */
  sync(options?: SyncOptions): Promise<any>;

  /**
   * Truncate all tables defined through the sequelize models. This is done
   * by calling Model.truncate() on each model.
   *
   * @param {object} [options] The options passed to Model.destroy in addition to truncate
   * @param {Boolean|function} [options.transaction]
   * @param {Boolean|function} [options.logging] A function that logs sql queries, or false for no logging
   */
  truncate(options?: DestroyOptions): Promise<any>;

  /**
   * Drop all tables defined through this sequelize instance. This is done by calling Model.drop on each model
   *
   * @param options The options passed to each call to Model.drop
   */
  drop(options?: DropOptions): Promise<any>;

  /**
   * Test the connection by trying to authenticate
   *
   * @param options Query Options for authentication
   */
  authenticate(options?: QueryOptions): Promise<void>;
  validate(options?: QueryOptions): Promise<void>;

  /**
   * Start a transaction. When using transactions, you should pass the transaction in the options argument
   * in order for the query to happen under that transaction
   *
   * ```js
   * sequelize.transaction().then(function (t) {
   *   return User.find(..., { transaction: t}).then(function (user) {
   *     return user.updateAttributes(..., { transaction: t});
   *   })
   *   .then(t.commit.bind(t))
   *   .catch(t.rollback.bind(t));
   * })
   * ```
   *
   * A syntax for automatically committing or rolling back based on the promise chain resolution is also
   * supported:
   *
   * ```js
   * sequelize.transaction(function (t) { // Note that we use a callback rather than a promise.then()
   *   return User.find(..., { transaction: t}).then(function (user) {
   *     return user.updateAttributes(..., { transaction: t});
   *   });
   * }).then(function () {
   *   // Commited
   * }).catch(function (err) {
   *   // Rolled back
   *   console.error(err);
   * });
   * ```
   *
   * If you have [CLS](https://github.com/othiym23/node-continuation-local-storage) enabled, the transaction
   * will automatically be passed to any query that runs witin the callback. To enable CLS, add it do your
   * project, create a namespace and set it on the sequelize constructor:
   *
   * ```js
   * var cls = require('continuation-local-storage'),
   *     ns = cls.createNamespace('....');
   * var Sequelize = require('sequelize');
   * Sequelize.cls = ns;
   * ```
   * Note, that CLS is enabled for all sequelize instances, and all instances will share the same namespace
   *
   * @param options Transaction Options
   * @param autoCallback Callback for the transaction
   */
  transaction(options: TransactionOptions, autoCallback: (t: Transaction) => PromiseLike<any>): Promise<any>;
  transaction(autoCallback: (t: Transaction) => PromiseLike<any>): Promise<any>;
  transaction(options?: TransactionOptions): Promise<Transaction>;

  /**
   * Close all connections used by this sequelize instance, and free all references so the instance can be
   * garbage collected.
   *
   * Normally this is done on process exit, so you only need to call this method if you are creating multiple
   * instances, and want to garbage collect some of them.
   */
  close(): void;

  /**
   * Returns the database version
   */
  databaseVersion(): Promise<string>;

}

export {DataTypes};
export * from '~sequelize/lib/model';
export * from '~sequelize/lib/transaction';
export * from '~sequelize/lib/model';
export * from '~sequelize/lib/associations/index';
export * from '~sequelize/lib/errors';
export {BaseError as Error} from '~sequelize/lib/errors';
export {useInflection} from '~sequelize/lib/utils';
import * as Deferrable from '~sequelize/lib/deferrable';
export {Deferrable};
export {Promise} from '~sequelize/lib/promise';
export {Validator} from '~sequelize/lib/utils/validator-extras';
import * as Utils from '~sequelize/lib/utils';
export {Utils};
export * from '~sequelize/lib/utils';

export default Sequelize;
}
declare module 'sequelize/lib/sequelize' {
export * from '~sequelize/lib/sequelize';
export { default } from '~sequelize/lib/sequelize';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-sequelize/e12e516e5de4d9b95e5a44be3f16648a1ba74eed/index.d.ts
declare module '~sequelize/index' {

export * from '~sequelize/lib/sequelize';
}
declare module 'sequelize/index' {
export * from '~sequelize/index';
}
declare module 'sequelize' {
export * from '~sequelize/index';
}
